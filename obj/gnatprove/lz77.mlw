(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "byte_array" defined at lz77.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Lz77__byte_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type byte_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type byte_array__ref =
  { mutable byte_array__content : byte_array }
 
 function byte_array__ref_byte_array__content__projection 
   (a : byte_array__ref) : byte_array =
  a.byte_array__content
 
 meta "model_projection" function byte_array__ref_byte_array__content__projection
 
 meta "inline:no" function byte_array__ref_byte_array__content__projection
 
 val byte_array__havoc 
   (x : byte_array__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "token" defined at lz77.ads:14, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Lz77__token__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 type __split_fields =
  { rec__lz77__token__offset [@name:Offset] [@model_trace:.3168] : Standard__natural.natural; rec__lz77__token__length [@model_trace:.3178] [@name:Length] : Standard__natural.natural; rec__lz77__token__next_c [@model_trace:.3188] [@name:Next_C] : Standard__character.character }
 
 function __split_fields_rec__lz77__token__offset__projection [@name:Offset] [@model_trace:.3168] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__lz77__token__offset
 
 meta "model_projection" function __split_fields_rec__lz77__token__offset__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__offset__projection
 
 function __split_fields_rec__lz77__token__length__projection [@model_trace:.3178] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__lz77__token__length
 
 meta "model_projection" function __split_fields_rec__lz77__token__length__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__length__projection
 
 function __split_fields_rec__lz77__token__next_c__projection [@model_trace:.3188] [@name:Next_C] 
   (a : __split_fields) : Standard__character.character =
  a.rec__lz77__token__next_c
 
 meta "model_projection" function __split_fields_rec__lz77__token__next_c__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__next_c__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate lz77__token__offset__pred 
   (a : __rep) =
  true
 val lz77__token__offset__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__offset__pred (a : __rep) }
 
 val rec__lz77__token__offset_ 
   (a : __rep) : Standard__natural.natural
  requires {  (lz77__token__offset__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__offset) }
 
 predicate lz77__token__length__pred 
   (a : __rep) =
  true
 val lz77__token__length__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__length__pred (a : __rep) }
 
 val rec__lz77__token__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (lz77__token__length__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__length) }
 
 predicate lz77__token__next_c__pred 
   (a : __rep) =
  true
 val lz77__token__next_c__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__next_c__pred (a : __rep) }
 
 val rec__lz77__token__next_c_ 
   (a : __rep) : Standard__character.character
  requires {  (lz77__token__next_c__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__next_c) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Standard__natural__rep.to_rep a.__split_fields.rec__lz77__token__offset) = (Standard__natural__rep.to_rep b.__split_fields.rec__lz77__token__offset)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__lz77__token__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__lz77__token__length)) )/\((Standard__character__rep.to_rep a.__split_fields.rec__lz77__token__next_c) = (Standard__character__rep.to_rep b.__split_fields.rec__lz77__token__next_c)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "token" defined at lz77.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Lz77__token
 use export Lz77__token__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type token =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant lz77__token__offset__first__bit 
   : int

 
 val constant lz77__token__offset__last__bit 
   : int

 
 val constant lz77__token__offset__position 
   : int

 
 axiom lz77__token__offset__first__bit_axiom :
  ((lz77__token__offset__first__bit ) >= (0 : int))
 
 axiom lz77__token__offset__last__bit_axiom :
  ((lz77__token__offset__last__bit ) > (lz77__token__offset__first__bit ))
 
 axiom lz77__token__offset__position_axiom :
  ((lz77__token__offset__position ) >= (0 : int))
 
 val constant lz77__token__length__first__bit 
   : int

 
 val constant lz77__token__length__last__bit 
   : int

 
 val constant lz77__token__length__position 
   : int

 
 axiom lz77__token__length__first__bit_axiom :
  ((lz77__token__length__first__bit ) >= (0 : int))
 
 axiom lz77__token__length__last__bit_axiom :
  ((lz77__token__length__last__bit ) > (lz77__token__length__first__bit ))
 
 axiom lz77__token__length__position_axiom :
  ((lz77__token__length__position ) >= (0 : int))
 
 val constant lz77__token__next_c__first__bit 
   : int

 
 val constant lz77__token__next_c__last__bit 
   : int

 
 val constant lz77__token__next_c__position 
   : int

 
 axiom lz77__token__next_c__first__bit_axiom :
  ((lz77__token__next_c__first__bit ) >= (0 : int))
 
 axiom lz77__token__next_c__last__bit_axiom :
  ((lz77__token__next_c__last__bit ) > (lz77__token__next_c__first__bit ))
 
 axiom lz77__token__next_c__position_axiom :
  ((lz77__token__next_c__position ) >= (0 : int))
 
 val function user_eq 
   (a : token) (b : token) : bool
 
 val constant dummy 
   : token

 
 type token__ref =
  { mutable token__content : token }
 
 function token__ref_token__content__projection 
   (a : token__ref) : token =
  a.token__content
 
 meta "model_projection" function token__ref_token__content__projection
 
 meta "inline:no" function token__ref_token__content__projection
 
 val token__havoc 
   (x : token__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "token_array" defined at lz77.ads:21, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Lz77__token
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token as Lz77__token

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Lz77__token.token
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    (Lz77__token.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     (Lz77__token.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "token_array" defined at lz77.ads:21, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Lz77__token__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Lz77__token.component_type, 
 type map = Array__Int__Lz77__token.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Lz77__token.get

end

(* Module for axiomatizing type "token_array" defined at lz77.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 type component_type =
  Lz77__token.token
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Lz77__token.map, 
 function array_bool_eq = Array__Int__Lz77__token.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type token_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type token_array__ref =
  { mutable token_array__content : token_array }
 
 function token_array__ref_token_array__content__projection 
   (a : token_array__ref) : token_array =
  a.token_array__content
 
 meta "model_projection" function token_array__ref_token_array__content__projection
 
 meta "inline:no" function token_array__ref_token_array__content__projection
 
 val token_array__havoc 
   (x : token_array__ref) : unit
  writes {x}

end


(* Module for axiomatizing the record theory associated to type "big_integer" defined at big_integers.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Big_integers__big_integer__rep
 use "_gnatprove_standard".Main
 use "int".Int

 type __main_type = int
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool = a = b
 
 type __rep = int
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool = a = b

end

(* Module for axiomatizing type "big_integer" defined at big_integers.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Big_integers__big_integer
 use Big_integers__big_integer__rep
 use "_gnatprove_standard".Main
 use "int".Int

 type big_integer =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   : int
 
 function alignment 
   : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  ((object__size ) >= 0)
 
 axiom alignment_axiom :
  ((alignment ) >= 0)
 
 function user_eq 
   (a : big_integer) (b : big_integer) : bool
 
 function dummy 
   : big_integer
 
 type big_integer__ref =
  { mutable big_integer__content : big_integer }
 
 function big_integer__ref_big_integer__content__projection 
   (a : big_integer__ref) : big_integer =
  a.big_integer__content
 
 meta "model_projection" function big_integer__ref_big_integer__content__projection
 
 meta "inline:no" function big_integer__ref_big_integer__content__projection
 
 val big_integer__havoc 
   (x : big_integer__ref) : unit
  writes {x}

 predicate dynamic_invariant [@inline]
   (temp___expr_158 : big_integer) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  true
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_159 : big_integer) (temp___skip_top_level_160 : bool)  =
  true

end


(* Module for defining the constant "zero" defined at big_integers.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Big_integers__zero
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 val constant zero [#"big_integers.ads" 8 0 0]
   : Big_integers__big_integer.big_integer
   ensures { result = 0 }

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for possibly declaring a logic function for "Oeq" defined at big_integers.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oeq
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oeq__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l = r
 
 predicate oeq__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oeq 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (oeq__logic l r)) /\ (oeq__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Olt" defined at big_integers.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Olt
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function olt__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l < r
 
 predicate olt__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val olt 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (olt__logic l r)) /\ (olt__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Ole" defined at big_integers.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Ole
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function ole__logic
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l <= r
 
 predicate ole__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val ole 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (ole__logic l r)) /\ (ole__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Ogt" defined at big_integers.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Ogt
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function ogt__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l > r
 
 predicate ogt__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val ogt 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (ogt__logic l r)) /\ (ogt__function_guard result l r) )/\true ) }
  
end

(* Module for possibly declaring a logic function for "Oge" defined at big_integers.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oge
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oge__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l >= r
 
 predicate oge__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oge 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (oge__logic l r)) /\ (oge__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "to_big_integer" defined at big_integers.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__to_big_integer
 use "_gnatprove_standard".Main
 use Big_integers__big_integer

 function to_big_integer__logic
   (arg : int) : Big_integers__big_integer.big_integer = arg
 
 predicate to_big_integer__function_guard 
   (result : Big_integers__big_integer.big_integer) (arg : int) = true

 val to_big_integer 
   (arg : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (to_big_integer__logic arg)) /\ (to_big_integer__function_guard result arg) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

module Big_integers__to_big_integer__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer

 function to_big_integer__2__logic 
   (arg : int) : Big_integers__big_integer.big_integer = arg
 
 predicate to_big_integer__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (arg : int) 

 val to_big_integer__2 
   (arg : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (to_big_integer__2__logic arg)) /\ (to_big_integer__2__function_guard result arg) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
 
end

(* Module for possibly declaring a logic function for "in_range" defined at big_integers.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__in_range
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int
 
 function in_range__logic
   (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) : bool = low <= arg /\ arg <= high
 
 predicate in_range__function_guard 
   (result : bool) (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) = true

 val in_range 
   (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) : bool
  requires {  true }
(*  ensures {  ( ( (result = (in_range__logic arg low high)) /\ (in_range__function_guard result arg low high) )/\( (result = True) <-> ( ((epsilon temp___result_178 : bool.
   ( (temp___result_178 = (Big_integers__Ole.ole low arg)) /\ (Big_integers__Ole.ole__function_guard temp___result_178 low arg) )) = True) /\ ((epsilon temp___result_179 : bool.
   ( (temp___result_179 = (Big_integers__Ole.ole arg high)) /\ (Big_integers__Ole.ole__function_guard temp___result_179 arg high) )) = True) ) ) ) } *)
   ensures { result = (in_range__logic arg low high) /\ (in_range__function_guard result arg low high) }
end

(* Module for possibly declaring a logic function for "to_integer" defined at big_integers.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__to_integer
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use Big_integers__to_big_integer
 use Big_integers__in_range
 use "int".Int

 function to_integer__logic 
   (arg : Big_integers__big_integer.big_integer) : int = arg
 
 predicate to_integer__function_guard 
   (result : int) (arg : Big_integers__big_integer.big_integer) = true

 val to_integer 
   (arg : Big_integers__big_integer.big_integer) : int
   requires { in_range__logic arg (to_big_integer__logic (-2147483648)) (to_big_integer__logic 2147483647)}
  ensures {  ( ( (result = (to_integer__logic arg)) /\ (to_integer__function_guard result arg) ) ) }

end

(* Module for possibly declaring a logic function for "Osubtract" defined at big_integers.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Osubtract
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function osubtract__logic 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = -l
 
 predicate osubtract__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) 

 val osubtract 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (osubtract__logic l)) /\ (osubtract__function_guard result l) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
 
end

(* Module for possibly declaring a logic function for "Oabs" defined at big_integers.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oabs
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Abs
 
 function oabs__logic 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = abs l
 
 predicate oabs__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer)

 val oabs 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oabs__logic l)) /\ (oabs__function_guard result l) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Oadd" defined at big_integers.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oadd__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oadd__2__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l + r
 
 predicate oadd__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oadd__2 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oadd__2__logic l r)) /\ (oadd__2__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Osubtract__2" defined at big_integers.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Osubtract__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function osubtract__2__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l - r
 
 predicate osubtract__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val osubtract__2 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (osubtract__2__logic l r)) /\ (osubtract__2__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Omultiply" defined at big_integers.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Omultiply
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function omultiply__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l * r
 
 predicate omultiply__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) 

 val omultiply 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (omultiply__logic l r)) /\ (omultiply__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "Odivide" defined at big_integers.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Odivide
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".EuclideanDivision

 function odivide__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = div l r
 
 predicate odivide__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val odivide 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (odivide__logic l r)) /\ (odivide__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Omod" defined at big_integers.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Omod
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".EuclideanDivision
 use "int".Int
 
 function omod__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = if r > 0 then mod l r else mod l r + r
 
 predicate omod__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val omod 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (omod__logic l r)) /\ (omod__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Orem" defined at big_integers.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Orem
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int
 use "int".EuclideanDivision

 function orem__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = mod l r
 
 predicate orem__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) 

 val orem 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (orem__logic l r)) /\ (orem__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "Oexpon" defined at big_integers.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oexpon
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Power

 function oexpon__logic 
   (l : Big_integers__big_integer.big_integer) (r : int) : Big_integers__big_integer.big_integer = power l r
 
 predicate oexpon__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : int) 

 val oexpon 
   (l : Big_integers__big_integer.big_integer) (r : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oexpon__logic l r)) /\ (oexpon__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "min" defined at big_integers.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__min
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".MinMax

 function min__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = min l r
 
 predicate min__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val min 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (min__logic l r)) /\ (min__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "max" defined at big_integers.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__max
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".MinMax

 function max__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = max l r
 
 predicate max__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val max 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (max__logic l r)) /\ (max__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end


(* Module for axiomatizing the array theory associated to type "partial_length" defined at lz77.ads:31, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Big_integers__big_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Big_integers__big_integer as Big_integers__big_integer

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Big_integers__big_integer.big_integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    (Big_integers__big_integer.user_eq (get a temp___idx_155) (get b ((b__first - a__first) + temp___idx_155)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     (Big_integers__big_integer.user_eq (get a temp___idx_155) (get b ((b__first - a__first) + temp___idx_155)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "partial_length" defined at lz77.ads:31, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Big_integers__big_integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Big_integers__big_integer.component_type, 
 type map = Array__Int__Big_integers__big_integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Big_integers__big_integer.get

end

(* Module for axiomatizing type "partial_length" defined at lz77.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Lz77__partial_length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 type component_type =
  Big_integers__big_integer.big_integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Big_integers__big_integer.map, 
 function array_bool_eq = Array__Int__Big_integers__big_integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type partial_length =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type partial_length__ref =
  { mutable partial_length__content : partial_length }
 
 function partial_length__ref_partial_length__content__projection 
   (a : partial_length__ref) : partial_length =
  a.partial_length__content
 
 meta "model_projection" function partial_length__ref_partial_length__content__projection
 
 meta "inline:no" function partial_length__ref_partial_length__content__projection
 
 val partial_length__havoc 
   (x : partial_length__ref) : unit
  writes {x}

end

(* Module for defining the constant "one" defined at lz77.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__one
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant one [#"lz77.ads" 33 0 0][@model_trace:3228] [@name:One] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "input" defined at lz77.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__length_acc__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 41 0 0][@model_projected] [@name:Input] [@model_trace:3248] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__length_acc__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at lz77.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12s" defined at lz77.ads:50, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L9s__L11s__T12s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t12s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref =
  { mutable t12s__content : t12s }
 
 function t12s__ref_t12s__content__projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref_t12s__content__projection
 
 meta "inline:no" function t12s__ref_t12s__content__projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "length_acc" defined at lz77.ads:41, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__length_acc
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length

 val function length_acc 
   (input : Lz77__token_array.token_array) : Lz77__partial_length.partial_length
 
 val predicate length_acc__function_guard 
   (temp___result_156 : Lz77__partial_length.partial_length) (input : Lz77__token_array.token_array)

end

(* Module for defining the constant "input" defined at lz77.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decoded_length__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 54 0 0][@model_trace:3371] [@model_projected] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decoded_length__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decoded_length" defined at lz77.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decoded_length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Big_integers__big_integer as Big_integers__big_integer

 val function decoded_length 
   (input : Lz77__token_array.token_array) : Big_integers__big_integer.big_integer
 
 val predicate decoded_length__function_guard 
   (temp___result_157 : Big_integers__big_integer.big_integer) (input : Lz77__token_array.token_array)

end

(* Module for defining the constant "input" defined at lz77.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__valid__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 65 0 0][@model_trace:3427] [@model_projected] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__valid__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "upto" defined at lz77.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__valid__upto
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant upto [#"lz77.ads" 65 0 0][@model_trace:3436] [@name:Upto] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "upto" defined at lz77.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__valid__upto___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T18s" defined at lz77.ads:72, created in Gnat2Why.Types.Translate_Type *)
module Lz77__valid__L17s__T18s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content : t18s }
 
 function t18s__ref_t18s__content__projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref_t18s__content__projection
 
 meta "inline:no" function t18s__ref_t18s__content__projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "valid" defined at lz77.ads:65, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__valid
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val function valid 
   (input : Lz77__token_array.token_array) (upto : int) : bool
 
 val predicate valid__function_guard 
   (temp___result_158 : bool) (input : Lz77__token_array.token_array) (upto : int)

end

(* Module for defining the constant "t" defined at lz77.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__put__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token as Lz77__token

 val constant t [#"lz77.ads" 86 0 0][@model_projected] [@model_trace:3557] [@name:T] 
   : Lz77__token.token

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at lz77.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__put__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input" defined at lz77.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decode__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 94 0 0][@model_trace:3575] [@model_projected] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input" defined at lz77.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__is_valid__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 100 0 0][@model_projected] [@name:Input] [@model_trace:3630] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_valid" defined at lz77.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__is_valid
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val function is_valid 
   (input : Lz77__token_array.token_array) : bool
 
 val predicate is_valid__function_guard 
   (temp___result_159 : bool) (input : Lz77__token_array.token_array)

end

(* Module for defining the constant "input" defined at lz77.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decode_fast__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 113 0 0][@model_projected] [@model_trace:3670] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TS1bP1" defined at lz77.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at lz77.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__S1b
 use export Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  token_array
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at lz77.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at lz77.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__TresultS
 use export Lz77__partial_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  partial_length
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at lz77.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content : t2b }
 
 function t2b__ref_t2b__content__projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref_t2b__content__projection
 
 meta "inline:no" function t2b__ref_t2b__content__projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at lz77.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__T3b
 use export Lz77__partial_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t3b =
  partial_length
 
 type t3b__ref =
  { mutable t3b__content : t3b }
 
 function t3b__ref_t3b__content__projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref_t3b__content__projection
 
 meta "inline:no" function t3b__ref_t3b__content__projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at lz77.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content : t4b }
 
 function t4b__ref_t4b__content__projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref_t4b__content__projection
 
 meta "inline:no" function t4b__ref_t4b__content__projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at lz77.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L11b__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content : t12b }
 
 function t12b__ref_t12b__content__projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref_t12b__content__projection
 
 meta "inline:no" function t12b__ref_t12b__content__projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at lz77.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L5b__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content : t6b }
 
 function t6b__ref_t6b__content__projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref_t6b__content__projection
 
 meta "inline:no" function t6b__ref_t6b__content__projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at lz77.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L13b__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content : t14b }
 
 function t14b__ref_t14b__content__projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref_t14b__content__projection
 
 meta "inline:no" function t14b__ref_t14b__content__projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at lz77.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L7b__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t8b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref =
  { mutable t8b__content : t8b }
 
 function t8b__ref_t8b__content__projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref_t8b__content__projection
 
 meta "inline:no" function t8b__ref_t8b__content__projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16b" defined at lz77.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L13b__L15b__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t16b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t16b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16b__ref =
  { mutable t16b__content : t16b }
 
 function t16b__ref_t16b__content__projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref_t16b__content__projection
 
 meta "inline:no" function t16b__ref_t16b__content__projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at lz77.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L_1__L7b__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18b" defined at lz77.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Lz77__put__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:8318] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type field =
  < range 0 255 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type field__ref =
  { mutable field__content : field }
 
 function field__ref_field__content__projection 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref_field__content__projection
 
 meta "inline:no" function field__ref_field__content__projection
 
 val field__havoc 
   (x : field__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field__rep
 use        Ada__text_io__field as Ada__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__field.field) : int =
  (Ada__text_io__field.field'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__field.field, 
 predicate in_range = Ada__text_io__field.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type num =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type num__ref =
  { mutable num__content : num }
 
 function num__ref_num__content__projection 
   (a : num__ref) : num =
  a.num__content
 
 meta "model_projection" function num__ref_num__content__projection
 
 meta "inline:no" function num__ref_num__content__projection
 
 val num__havoc 
   (x : num__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num__rep
 use        Ada__integer_text_io__num as Ada__integer_text_io__num
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__integer_text_io__num.num) : int =
  (Ada__integer_text_io__num.num'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__integer_text_io__num.num, 
 predicate in_range = Ada__integer_text_io__num.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type number_base =
  < range 2 16 >
 
 val constant first 
   : int
  ensures { result =  (2 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type number_base__ref =
  { mutable number_base__content : number_base }
 
 function number_base__ref_number_base__content__projection 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref_number_base__content__projection
 
 meta "inline:no" function number_base__ref_number_base__content__projection
 
 val number_base__havoc 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base__rep
 use        Ada__text_io__number_base as Ada__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__number_base.number_base) : int =
  (Ada__text_io__number_base.number_base'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__number_base.number_base, 
 predicate in_range = Ada__text_io__number_base.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "item" defined at a-tiinio.ads:81 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"a-tiinio.ads" 81 0 0][@name:Item] [@model_trace:20946] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:81 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "width" defined at a-tiinio.ads:82 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__width
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant width [#"a-tiinio.ads" 82 0 0][@model_trace:20955] [@name:Width] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:82 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__width___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "base" defined at a-tiinio.ads:83 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__base
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant base [#"a-tiinio.ads" 83 0 0][@model_trace:20965] [@name:Base] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "base" defined at a-tiinio.ads:83 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive_count =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive_count__ref =
  { mutable positive_count__content : positive_count }
 
 function positive_count__ref_positive_count__content__projection 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref_positive_count__content__projection
 
 meta "inline:no" function positive_count__ref_positive_count__content__projection
 
 val positive_count__havoc 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count__rep
 use        Ada__text_io__positive_count as Ada__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__positive_count.positive_count) : int =
  (Ada__text_io__positive_count.positive_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__positive_count.positive_count, 
 predicate in_range = Ada__text_io__positive_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "spacing" defined at a-textio.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__2__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"a-textio.ads" 264 0 0][@name:Spacing] [@model_trace:6770] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__2__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T19b" defined at lz77.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Lz77__put__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at lz77.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Lz77__put__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:392, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"a-textio.ads" 392 0 0][@name:Item] [@model_trace:7825] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:392, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS22bP1" defined at lz77.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__TS22bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS22bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS22bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS22bP1__ref =
  { mutable tS22bP1__content : tS22bP1 }
 
 function tS22bP1__ref_tS22bP1__content__projection 
   (a : tS22bP1__ref) : tS22bP1 =
  a.tS22bP1__content
 
 meta "model_projection" function tS22bP1__ref_tS22bP1__content__projection
 
 meta "inline:no" function tS22bP1__ref_tS22bP1__content__projection
 
 val tS22bP1__havoc 
   (x : tS22bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S22b" defined at lz77.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__S22b
 use export Lz77__byte_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s22b =
  byte_array
 
 type s22b__ref =
  { mutable s22b__content : s22b }
 
 function s22b__ref_s22b__content__projection 
   (a : s22b__ref) : s22b =
  a.s22b__content
 
 meta "model_projection" function s22b__ref_s22b__content__projection
 
 meta "inline:no" function s22b__ref_s22b__content__projection
 
 val s22b__havoc 
   (x : s22b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS21bP1" defined at lz77.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__TS21bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS21bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS21bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS21bP1__ref =
  { mutable tS21bP1__content : tS21bP1 }
 
 function tS21bP1__ref_tS21bP1__content__projection 
   (a : tS21bP1__ref) : tS21bP1 =
  a.tS21bP1__content
 
 meta "model_projection" function tS21bP1__ref_tS21bP1__content__projection
 
 meta "inline:no" function tS21bP1__ref_tS21bP1__content__projection
 
 val tS21bP1__havoc 
   (x : tS21bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S21b" defined at lz77.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__S21b
 use export Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s21b =
  token_array
 
 type s21b__ref =
  { mutable s21b__content : s21b }
 
 function s21b__ref_s21b__content__projection 
   (a : s21b__ref) : s21b =
  a.s21b__content
 
 meta "model_projection" function s21b__ref_s21b__content__projection
 
 meta "inline:no" function s21b__ref_s21b__content__projection
 
 val s21b__havoc 
   (x : s21b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T23b" defined at lz77.adb:60, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__L_2__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t23b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t23b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t23b__ref =
  { mutable t23b__content : t23b }
 
 function t23b__ref_t23b__content__projection 
   (a : t23b__ref) : t23b =
  a.t23b__content
 
 meta "model_projection" function t23b__ref_t23b__content__projection
 
 meta "inline:no" function t23b__ref_t23b__content__projection
 
 val t23b__havoc 
   (x : t23b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R24b" defined at lz77.adb:63, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decode__L_3__R24b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r24b [#"lz77.adb" 63 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T25b" defined at lz77.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode__L_3__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t25b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t25b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t25b__ref =
  { mutable t25b__content : t25b }
 
 function t25b__ref_t25b__content__projection 
   (a : t25b__ref) : t25b =
  a.t25b__content
 
 meta "model_projection" function t25b__ref_t25b__content__projection
 
 meta "inline:no" function t25b__ref_t25b__content__projection
 
 val t25b__havoc 
   (x : t25b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS26bP1" defined at lz77.adb:100, created in Gnat2Why.Types.Translate_Type *)
module Lz77__is_valid__TS26bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS26bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS26bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS26bP1__ref =
  { mutable tS26bP1__content : tS26bP1 }
 
 function tS26bP1__ref_tS26bP1__content__projection 
   (a : tS26bP1__ref) : tS26bP1 =
  a.tS26bP1__content
 
 meta "model_projection" function tS26bP1__ref_tS26bP1__content__projection
 
 meta "inline:no" function tS26bP1__ref_tS26bP1__content__projection
 
 val tS26bP1__havoc 
   (x : tS26bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S26b" defined at lz77.adb:100, created in Gnat2Why.Types.Translate_Type *)
module Lz77__is_valid__S26b
 use export Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s26b =
  token_array
 
 type s26b__ref =
  { mutable s26b__content : s26b }
 
 function s26b__ref_s26b__content__projection 
   (a : s26b__ref) : s26b =
  a.s26b__content
 
 meta "model_projection" function s26b__ref_s26b__content__projection
 
 meta "inline:no" function s26b__ref_s26b__content__projection
 
 val s26b__havoc 
   (x : s26b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27b" defined at lz77.adb:105, created in Gnat2Why.Types.Translate_Type *)
module Lz77__is_valid__L_4__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t27b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t27b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t27b__ref =
  { mutable t27b__content : t27b }
 
 function t27b__ref_t27b__content__projection 
   (a : t27b__ref) : t27b =
  a.t27b__content
 
 meta "model_projection" function t27b__ref_t27b__content__projection
 
 meta "inline:no" function t27b__ref_t27b__content__projection
 
 val t27b__havoc 
   (x : t27b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS30bP1" defined at lz77.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__TS30bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS30bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS30bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS30bP1__ref =
  { mutable tS30bP1__content : tS30bP1 }
 
 function tS30bP1__ref_tS30bP1__content__projection 
   (a : tS30bP1__ref) : tS30bP1 =
  a.tS30bP1__content
 
 meta "model_projection" function tS30bP1__ref_tS30bP1__content__projection
 
 meta "inline:no" function tS30bP1__ref_tS30bP1__content__projection
 
 val tS30bP1__havoc 
   (x : tS30bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S30b" defined at lz77.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__S30b
 use export Lz77__byte_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s30b =
  byte_array
 
 type s30b__ref =
  { mutable s30b__content : s30b }
 
 function s30b__ref_s30b__content__projection 
   (a : s30b__ref) : s30b =
  a.s30b__content
 
 meta "model_projection" function s30b__ref_s30b__content__projection
 
 meta "inline:no" function s30b__ref_s30b__content__projection
 
 val s30b__havoc 
   (x : s30b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS29bP1" defined at lz77.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__TS29bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS29bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS29bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS29bP1__ref =
  { mutable tS29bP1__content : tS29bP1 }
 
 function tS29bP1__ref_tS29bP1__content__projection 
   (a : tS29bP1__ref) : tS29bP1 =
  a.tS29bP1__content
 
 meta "model_projection" function tS29bP1__ref_tS29bP1__content__projection
 
 meta "inline:no" function tS29bP1__ref_tS29bP1__content__projection
 
 val tS29bP1__havoc 
   (x : tS29bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S29b" defined at lz77.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__S29b
 use export Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s29b =
  token_array
 
 type s29b__ref =
  { mutable s29b__content : s29b }
 
 function s29b__ref_s29b__content__projection 
   (a : s29b__ref) : s29b =
  a.s29b__content
 
 meta "model_projection" function s29b__ref_s29b__content__projection
 
 meta "inline:no" function s29b__ref_s29b__content__projection
 
 val s29b__havoc 
   (x : s29b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T31b" defined at lz77.adb:125, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__L_5__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t31b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t31b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t31b__ref =
  { mutable t31b__content : t31b }
 
 function t31b__ref_t31b__content__projection 
   (a : t31b__ref) : t31b =
  a.t31b__content
 
 meta "model_projection" function t31b__ref_t31b__content__projection
 
 meta "inline:no" function t31b__ref_t31b__content__projection
 
 val t31b__havoc 
   (x : t31b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T33b" defined at lz77.adb:128, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__L_6__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t33b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t33b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t33b__ref =
  { mutable t33b__content : t33b }
 
 function t33b__ref_t33b__content__projection 
   (a : t33b__ref) : t33b =
  a.t33b__content
 
 meta "model_projection" function t33b__ref_t33b__content__projection
 
 meta "inline:no" function t33b__ref_t33b__content__projection
 
 val t33b__havoc 
   (x : t33b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T36b" defined at lz77.adb:146, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__L_5__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t36b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t36b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t36b__ref =
  { mutable t36b__content : t36b }
 
 function t36b__ref_t36b__content__projection 
   (a : t36b__ref) : t36b =
  a.t36b__content
 
 meta "model_projection" function t36b__ref_t36b__content__projection
 
 meta "inline:no" function t36b__ref_t36b__content__projection
 
 val t36b__havoc 
   (x : t36b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T37b" defined at lz77.adb:146, created in Gnat2Why.Types.Translate_Type *)
module Lz77__decode_fast__L_5__T37b
 use export Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t37b =
  token_array
 
 type t37b__ref =
  { mutable t37b__content : t37b }
 
 function t37b__ref_t37b__content__projection 
   (a : t37b__ref) : t37b =
  a.t37b__content
 
 meta "model_projection" function t37b__ref_t37b__content__projection
 
 meta "inline:no" function t37b__ref_t37b__content__projection
 
 val t37b__havoc 
   (x : t37b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "output" defined at lz77.ads:94, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val output [#"lz77.ads" 94 0 0][@name:Output] [@model_projected] [@model_trace:3584]  : Array__Int__Standard__character.map__ref 
 
 val constant output__first [#"lz77.ads" 94 0 0][@model_trace:3584'First] [@name:Output] [@model_projected] 
   : Standard__integer.integer

 
 val constant output__last [#"lz77.ads" 94 0 0][@name:Output] [@model_projected] [@model_trace:3584'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output" defined at lz77.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output_length" defined at lz77.ads:95, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__output_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val output_length [#"lz77.ads" 95 0 0][@name:Output_Length] [@model_projected] [@model_trace:3593]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output_length" defined at lz77.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__output_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "error" defined at lz77.ads:95, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__error
 use        "_gnatprove_standard".Main
 use        "int".Int

 val error [#"lz77.ads" 95 0 0][@model_projected] [@model_trace:3602] [@name:Error]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "error" defined at lz77.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output" defined at lz77.ads:113, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val output [#"lz77.ads" 113 0 0][@name:Output] [@model_projected] [@model_trace:3679]  : Array__Int__Standard__character.map__ref 
 
 val constant output__first [#"lz77.ads" 113 0 0][@name:Output] [@model_projected] [@model_trace:3679'First] 
   : Standard__integer.integer

 
 val constant output__last [#"lz77.ads" 113 0 0][@model_trace:3679'Last] [@name:Output] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output" defined at lz77.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output_length" defined at lz77.ads:114, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__output_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val output_length [#"lz77.ads" 114 0 0][@name:Output_Length] [@model_trace:3688] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output_length" defined at lz77.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__output_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at lz77.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__length_acc__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val result__ [#"lz77.adb" 12 0 0][@model_projected] [@model_trace:2342] [@name:Result]  : Array__Int__Big_integers__big_integer.map__ref 
 
 val constant result____first [#"lz77.adb" 12 0 0][@model_projected] [@model_trace:2342'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"lz77.adb" 12 0 0][@model_trace:2342'Last] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at lz77.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__length_acc__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at lz77.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__length_acc__L_1__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"lz77.adb" 15 0 0][@model_trace:2362] [@model_projected] [@name:Index]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at lz77.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__length_acc__L_1__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_width
 use        "_gnatprove_standard".Main
 use        "int".Int

 val default_width [#"a-tiinio.ads" 48 0 0][@model_projected] [@name:Default_Width] [@model_trace:20717]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_width___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_base
 use        "_gnatprove_standard".Main
 use        "int".Int

 val default_base [#"a-tiinio.ads" 49 0 0][@name:Default_Base] [@model_projected] [@model_trace:20728]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at lz77.adb:60, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__L_2__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"lz77.adb" 60 0 0][@model_trace:2597] [@model_projected] [@name:Index]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at lz77.adb:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__L_2__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenindex" defined at lz77.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__L_3__tokenindex
 use        "_gnatprove_standard".Main
 use        "int".Int

 val tokenindex [#"lz77.adb" 63 0 0][@name:TokenIndex] [@model_projected] [@model_trace:2620]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenindex" defined at lz77.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__L_3__tokenindex___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "totallength" defined at lz77.adb:101, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__is_valid__totallength
 use        "_gnatprove_standard".Main
 use        "int".Int

 val totallength [#"lz77.adb" 101 0 0][@model_trace:2798] [@name:TotalLength] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "totallength" defined at lz77.adb:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__totallength___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "valid" defined at lz77.adb:102, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__is_valid__valid
 use        "_gnatprove_standard".Main
 use        "int".Int

 val valid [#"lz77.adb" 102 0 0][@model_trace:2808] [@name:Valid] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "valid" defined at lz77.adb:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__valid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at lz77.adb:105, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__is_valid__L_4__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"lz77.adb" 105 0 0][@model_projected] [@model_trace:2821] [@name:Index]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at lz77.adb:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__L_4__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at lz77.adb:125, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__L_5__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"lz77.adb" 125 0 0][@model_trace:2917] [@model_projected] [@name:Index]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at lz77.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__L_5__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "R32b" defined at lz77.adb:128, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__L_6__R32b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val r32b [#"lz77.adb" 128 0 0] : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "R32b" defined at lz77.adb:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__L_6__R32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokenindex" defined at lz77.adb:128, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__L_6__tokenindex
 use        "_gnatprove_standard".Main
 use        "int".Int

 val tokenindex [#"lz77.adb" 128 0 0][@name:TokenIndex] [@model_projected] [@model_trace:2931]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokenindex" defined at lz77.adb:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__L_6__tokenindex___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "put" defined at lz77.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decode" defined at lz77.ads:94, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decode
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decode_fast" defined at lz77.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decode_fast
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_160 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_161 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for defining the loop exit exception for the loop "L_1" defined at lz77.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__length_acc__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at lz77.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__length_acc__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__2" defined at a-tiinio.ads:80 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "new_line__2" defined at a-textio.ads:264, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__2" defined at a-textio.ads:392, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at lz77.adb:60, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__decode__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at lz77.adb:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at lz77.adb:63, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__decode__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at lz77.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at lz77.adb:105, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__is_valid__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at lz77.adb:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_5" defined at lz77.adb:125, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__decode_fast__L_5
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_5

end

(* Module giving an empty axiom for the entity "L_5" defined at lz77.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__L_5___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_6" defined at lz77.adb:128, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Lz77__decode_fast__L_6
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_6

end

(* Module giving an empty axiom for the entity "L_6" defined at lz77.adb:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__L_6___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "byte_array" defined at lz77.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__byte_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__byte_array as Lz77__byte_array

 predicate dynamic_invariant [@inline] 
   (temp___expr_166 : Lz77__byte_array.byte_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) =
  (if (temp___skip_constant_163) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Lz77__byte_array.first temp___expr_166) (Lz77__byte_array.last temp___expr_166))))
 val dynamic_invariant [@inline] 
   (temp___expr_166 : Lz77__byte_array.byte_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_166 : Lz77__byte_array.byte_array) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) }

end

(* Module giving axioms for type "token" defined at lz77.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__token___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token as Lz77__token

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : Lz77__token.token) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_172 : Lz77__token.token) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : Lz77__token.token) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_173 : Lz77__token.token) (temp___skip_top_level_174 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_173 : Lz77__token.token) (temp___skip_top_level_174 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_173 : Lz77__token.token) (temp___skip_top_level_174 : bool) }

end

(* Module giving axioms for type "token_array" defined at lz77.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__token_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__token_array as Lz77__token_array

 predicate dynamic_invariant [@inline] 
   (temp___expr_182 : Lz77__token_array.token_array) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) =
  (if (temp___skip_constant_179) then (
   true) else (
   (Lz77__token_array.dynamic_property Standard__positive.first Standard__positive.last (Lz77__token_array.first temp___expr_182) (Lz77__token_array.last temp___expr_182))))
 val dynamic_invariant [@inline] 
   (temp___expr_182 : Lz77__token_array.token_array) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_182 : Lz77__token_array.token_array) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) }

end

(* Module giving axioms for type "partial_length" defined at lz77.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__partial_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__partial_length as Lz77__partial_length

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : Lz77__partial_length.partial_length) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  (if (temp___skip_constant_185) then (
   true) else (
   (Lz77__partial_length.dynamic_property Standard__positive.first Standard__positive.last (Lz77__partial_length.first temp___expr_188) (Lz77__partial_length.last temp___expr_188))))
 val dynamic_invariant [@inline] 
   (temp___expr_188 : Lz77__partial_length.partial_length) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : Lz77__partial_length.partial_length) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }

end

(* Module giving axioms for type "T10s" defined at lz77.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12s" defined at lz77.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L9s__L11s__T12s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18s" defined at lz77.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__valid__L17s__T18s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_231 : int) (temp___is_init_227 : bool) (temp___skip_constant_228 : bool) (temp___do_toplevel_229 : bool) (temp___do_typ_inv_230 : bool) =
  (if (( temp___is_init_227 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_231)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_231 : int) (temp___is_init_227 : bool) (temp___skip_constant_228 : bool) (temp___do_toplevel_229 : bool) (temp___do_typ_inv_230 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_231 : int) (temp___is_init_227 : bool) (temp___skip_constant_228 : bool) (temp___do_toplevel_229 : bool) (temp___do_typ_inv_230 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_232 : int) (temp___skip_top_level_233 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_232 : int) (temp___skip_top_level_233 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_232 : int) (temp___skip_top_level_233 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at lz77.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at lz77.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__length_acc__input as Lz77__length_acc__input
 use        Lz77__length_acc__S1b as Lz77__length_acc__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_238 : Lz77__length_acc__S1b.s1b) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) =
  (if (temp___skip_constant_235) then (
   true) else (
   ( (Lz77__length_acc__S1b.dynamic_property (Lz77__token_array.first Lz77__length_acc__input.input) (Lz77__token_array.last Lz77__length_acc__input.input) (Lz77__length_acc__S1b.first temp___expr_238) (Lz77__length_acc__S1b.last temp___expr_238)) /\ ( ((Lz77__length_acc__S1b.first temp___expr_238) = (Lz77__token_array.first Lz77__length_acc__input.input)) /\ ((Lz77__length_acc__S1b.last temp___expr_238) = (Lz77__token_array.last Lz77__length_acc__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_238 : Lz77__length_acc__S1b.s1b) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_238 : Lz77__length_acc__S1b.s1b) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_240 : Lz77__length_acc__S1b.s1b) (temp___skip_top_level_241 : bool) =
  ( ( true /\ ((Lz77__length_acc__S1b.first temp___expr_240) = (Lz77__token_array.first Lz77__length_acc__input.input)) )/\((Lz77__length_acc__S1b.last temp___expr_240) = (Lz77__token_array.last Lz77__length_acc__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_240 : Lz77__length_acc__S1b.s1b) (temp___skip_top_level_241 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_240 : Lz77__length_acc__S1b.s1b) (temp___skip_top_level_241 : bool) }

end

(* Module giving axioms for type "TTresultSP1" defined at lz77.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at lz77.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__length_acc__input as Lz77__length_acc__input
 use        Lz77__length_acc__TresultS as Lz77__length_acc__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : Lz77__length_acc__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (temp___skip_constant_248) then (
   true) else (
   ( (Lz77__length_acc__TresultS.dynamic_property (Lz77__token_array.first Lz77__length_acc__input.input) (Lz77__token_array.last Lz77__length_acc__input.input) (Lz77__length_acc__TresultS.first temp___expr_251) (Lz77__length_acc__TresultS.last temp___expr_251)) /\ ( ((Lz77__length_acc__TresultS.first temp___expr_251) = (Lz77__token_array.first Lz77__length_acc__input.input)) /\ ((Lz77__length_acc__TresultS.last temp___expr_251) = (Lz77__token_array.last Lz77__length_acc__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_251 : Lz77__length_acc__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : Lz77__length_acc__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_253 : Lz77__length_acc__TresultS.tresultS) (temp___skip_top_level_254 : bool) =
  ( ( true /\ ((Lz77__length_acc__TresultS.first temp___expr_253) = (Lz77__token_array.first Lz77__length_acc__input.input)) )/\((Lz77__length_acc__TresultS.last temp___expr_253) = (Lz77__token_array.last Lz77__length_acc__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_253 : Lz77__length_acc__TresultS.tresultS) (temp___skip_top_level_254 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_253 : Lz77__length_acc__TresultS.tresultS) (temp___skip_top_level_254 : bool) }

end

(* Module giving axioms for type "T2b" defined at lz77.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at lz77.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at lz77.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at lz77.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L11b__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at lz77.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L5b__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at lz77.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L13b__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at lz77.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L7b__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at lz77.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L13b__L15b__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at lz77.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L_1__L7b__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at lz77.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__put__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__field___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__field as Ada__text_io__field

 predicate dynamic_invariant [@inline] 
   (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) =
  (if (( temp___is_init_258 \/ (Ada__text_io__field.first <= Ada__text_io__field.last) )) then (
   (Ada__text_io__field.dynamic_property Ada__text_io__field.first Ada__text_io__field.last temp___expr_262)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_263 : int) (temp___skip_top_level_264 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_263 : int) (temp___skip_top_level_264 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_263 : int) (temp___skip_top_level_264 : bool) }

end

(* Module giving axioms for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__integer_text_io__num___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__integer_text_io__num as Ada__integer_text_io__num

 predicate dynamic_invariant [@inline] 
   (temp___expr_269 : int) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) =
  (if (( temp___is_init_265 \/ (Ada__integer_text_io__num.first <= Ada__integer_text_io__num.last) )) then (
   (Ada__integer_text_io__num.dynamic_property Ada__integer_text_io__num.first Ada__integer_text_io__num.last temp___expr_269)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_269 : int) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_269 : int) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_270 : int) (temp___skip_top_level_271 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_270 : int) (temp___skip_top_level_271 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_270 : int) (temp___skip_top_level_271 : bool) }

end

(* Module giving axioms for type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__number_base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__number_base as Ada__text_io__number_base

 predicate dynamic_invariant [@inline] 
   (temp___expr_276 : int) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) =
  (if (( temp___is_init_272 \/ (Ada__text_io__number_base.first <= Ada__text_io__number_base.last) )) then (
   (Ada__text_io__number_base.dynamic_property Ada__text_io__number_base.first Ada__text_io__number_base.last temp___expr_276)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_276 : int) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_276 : int) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_277 : int) (temp___skip_top_level_278 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_277 : int) (temp___skip_top_level_278 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_277 : int) (temp___skip_top_level_278 : bool) }

end

(* Module giving axioms for type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__positive_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__positive_count as Ada__text_io__positive_count

 predicate dynamic_invariant [@inline] 
   (temp___expr_283 : int) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) =
  (if (( temp___is_init_279 \/ (Ada__text_io__positive_count.first <= Ada__text_io__positive_count.last) )) then (
   (Ada__text_io__positive_count.dynamic_property Ada__text_io__positive_count.first Ada__text_io__positive_count.last temp___expr_283)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_283 : int) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_283 : int) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_284 : int) (temp___skip_top_level_285 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_284 : int) (temp___skip_top_level_285 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_284 : int) (temp___skip_top_level_285 : bool) }

end

(* Module giving axioms for type "T19b" defined at lz77.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__put__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at lz77.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__put__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS22bP1" defined at lz77.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__TS22bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S22b" defined at lz77.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__S22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__decode__output as Lz77__decode__output
 use        Lz77__decode__S22b as Lz77__decode__S22b

 predicate dynamic_invariant [@inline] 
   (temp___expr_290 : Lz77__decode__S22b.s22b) (temp___is_init_286 : bool) (temp___skip_constant_287 : bool) (temp___do_toplevel_288 : bool) (temp___do_typ_inv_289 : bool) =
  (if (temp___skip_constant_287) then (
   true) else (
   ( (Lz77__decode__S22b.dynamic_property (Standard__integer__rep.to_rep Lz77__decode__output.output__first) (Standard__integer__rep.to_rep Lz77__decode__output.output__last) (Lz77__decode__S22b.first temp___expr_290) (Lz77__decode__S22b.last temp___expr_290)) /\ ( ((Lz77__decode__S22b.first temp___expr_290) = (Standard__integer__rep.to_rep Lz77__decode__output.output__first)) /\ ((Lz77__decode__S22b.last temp___expr_290) = (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_290 : Lz77__decode__S22b.s22b) (temp___is_init_286 : bool) (temp___skip_constant_287 : bool) (temp___do_toplevel_288 : bool) (temp___do_typ_inv_289 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_290 : Lz77__decode__S22b.s22b) (temp___is_init_286 : bool) (temp___skip_constant_287 : bool) (temp___do_toplevel_288 : bool) (temp___do_typ_inv_289 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_292 : Lz77__decode__S22b.s22b) (temp___skip_top_level_293 : bool) =
  ( ( true /\ ((Lz77__decode__S22b.first temp___expr_292) = (Standard__integer__rep.to_rep Lz77__decode__output.output__first)) )/\((Lz77__decode__S22b.last temp___expr_292) = (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) )
 val default_initial_assumption [@inline] 
   (temp___expr_292 : Lz77__decode__S22b.s22b) (temp___skip_top_level_293 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_292 : Lz77__decode__S22b.s22b) (temp___skip_top_level_293 : bool) }

end

(* Module giving axioms for type "TS21bP1" defined at lz77.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__TS21bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S21b" defined at lz77.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__S21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__decode__input as Lz77__decode__input
 use        Lz77__decode__S21b as Lz77__decode__S21b

 predicate dynamic_invariant [@inline] 
   (temp___expr_300 : Lz77__decode__S21b.s21b) (temp___is_init_296 : bool) (temp___skip_constant_297 : bool) (temp___do_toplevel_298 : bool) (temp___do_typ_inv_299 : bool) =
  (if (temp___skip_constant_297) then (
   true) else (
   ( (Lz77__decode__S21b.dynamic_property (Lz77__token_array.first Lz77__decode__input.input) (Lz77__token_array.last Lz77__decode__input.input) (Lz77__decode__S21b.first temp___expr_300) (Lz77__decode__S21b.last temp___expr_300)) /\ ( ((Lz77__decode__S21b.first temp___expr_300) = (Lz77__token_array.first Lz77__decode__input.input)) /\ ((Lz77__decode__S21b.last temp___expr_300) = (Lz77__token_array.last Lz77__decode__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_300 : Lz77__decode__S21b.s21b) (temp___is_init_296 : bool) (temp___skip_constant_297 : bool) (temp___do_toplevel_298 : bool) (temp___do_typ_inv_299 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_300 : Lz77__decode__S21b.s21b) (temp___is_init_296 : bool) (temp___skip_constant_297 : bool) (temp___do_toplevel_298 : bool) (temp___do_typ_inv_299 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_302 : Lz77__decode__S21b.s21b) (temp___skip_top_level_303 : bool) =
  ( ( true /\ ((Lz77__decode__S21b.first temp___expr_302) = (Lz77__token_array.first Lz77__decode__input.input)) )/\((Lz77__decode__S21b.last temp___expr_302) = (Lz77__token_array.last Lz77__decode__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_302 : Lz77__decode__S21b.s21b) (temp___skip_top_level_303 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_302 : Lz77__decode__S21b.s21b) (temp___skip_top_level_303 : bool) }

end

(* Module giving axioms for type "T23b" defined at lz77.adb:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__L_2__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at lz77.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode__L_3__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS26bP1" defined at lz77.adb:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__is_valid__TS26bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S26b" defined at lz77.adb:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__is_valid__S26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__is_valid__input as Lz77__is_valid__input
 use        Lz77__is_valid__S26b as Lz77__is_valid__S26b

 predicate dynamic_invariant [@inline] 
   (temp___expr_313 : Lz77__is_valid__S26b.s26b) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) =
  (if (temp___skip_constant_310) then (
   true) else (
   ( (Lz77__is_valid__S26b.dynamic_property (Lz77__token_array.first Lz77__is_valid__input.input) (Lz77__token_array.last Lz77__is_valid__input.input) (Lz77__is_valid__S26b.first temp___expr_313) (Lz77__is_valid__S26b.last temp___expr_313)) /\ ( ((Lz77__is_valid__S26b.first temp___expr_313) = (Lz77__token_array.first Lz77__is_valid__input.input)) /\ ((Lz77__is_valid__S26b.last temp___expr_313) = (Lz77__token_array.last Lz77__is_valid__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_313 : Lz77__is_valid__S26b.s26b) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_313 : Lz77__is_valid__S26b.s26b) (temp___is_init_309 : bool) (temp___skip_constant_310 : bool) (temp___do_toplevel_311 : bool) (temp___do_typ_inv_312 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_315 : Lz77__is_valid__S26b.s26b) (temp___skip_top_level_316 : bool) =
  ( ( true /\ ((Lz77__is_valid__S26b.first temp___expr_315) = (Lz77__token_array.first Lz77__is_valid__input.input)) )/\((Lz77__is_valid__S26b.last temp___expr_315) = (Lz77__token_array.last Lz77__is_valid__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_315 : Lz77__is_valid__S26b.s26b) (temp___skip_top_level_316 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_315 : Lz77__is_valid__S26b.s26b) (temp___skip_top_level_316 : bool) }

end

(* Module giving axioms for type "T27b" defined at lz77.adb:105, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__is_valid__L_4__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS30bP1" defined at lz77.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__TS30bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S30b" defined at lz77.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__S30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__decode_fast__output as Lz77__decode_fast__output
 use        Lz77__decode_fast__S30b as Lz77__decode_fast__S30b

 predicate dynamic_invariant [@inline] 
   (temp___expr_326 : Lz77__decode_fast__S30b.s30b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) =
  (if (temp___skip_constant_323) then (
   true) else (
   ( (Lz77__decode_fast__S30b.dynamic_property (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last) (Lz77__decode_fast__S30b.first temp___expr_326) (Lz77__decode_fast__S30b.last temp___expr_326)) /\ ( ((Lz77__decode_fast__S30b.first temp___expr_326) = (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first)) /\ ((Lz77__decode_fast__S30b.last temp___expr_326) = (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_326 : Lz77__decode_fast__S30b.s30b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_326 : Lz77__decode_fast__S30b.s30b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_328 : Lz77__decode_fast__S30b.s30b) (temp___skip_top_level_329 : bool) =
  ( ( true /\ ((Lz77__decode_fast__S30b.first temp___expr_328) = (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first)) )/\((Lz77__decode_fast__S30b.last temp___expr_328) = (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) )
 val default_initial_assumption [@inline] 
   (temp___expr_328 : Lz77__decode_fast__S30b.s30b) (temp___skip_top_level_329 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_328 : Lz77__decode_fast__S30b.s30b) (temp___skip_top_level_329 : bool) }

end

(* Module giving axioms for type "TS29bP1" defined at lz77.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__TS29bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S29b" defined at lz77.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__S29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__decode_fast__input as Lz77__decode_fast__input
 use        Lz77__decode_fast__S29b as Lz77__decode_fast__S29b

 predicate dynamic_invariant [@inline] 
   (temp___expr_336 : Lz77__decode_fast__S29b.s29b) (temp___is_init_332 : bool) (temp___skip_constant_333 : bool) (temp___do_toplevel_334 : bool) (temp___do_typ_inv_335 : bool) =
  (if (temp___skip_constant_333) then (
   true) else (
   ( (Lz77__decode_fast__S29b.dynamic_property (Lz77__token_array.first Lz77__decode_fast__input.input) (Lz77__token_array.last Lz77__decode_fast__input.input) (Lz77__decode_fast__S29b.first temp___expr_336) (Lz77__decode_fast__S29b.last temp___expr_336)) /\ ( ((Lz77__decode_fast__S29b.first temp___expr_336) = (Lz77__token_array.first Lz77__decode_fast__input.input)) /\ ((Lz77__decode_fast__S29b.last temp___expr_336) = (Lz77__token_array.last Lz77__decode_fast__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_336 : Lz77__decode_fast__S29b.s29b) (temp___is_init_332 : bool) (temp___skip_constant_333 : bool) (temp___do_toplevel_334 : bool) (temp___do_typ_inv_335 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_336 : Lz77__decode_fast__S29b.s29b) (temp___is_init_332 : bool) (temp___skip_constant_333 : bool) (temp___do_toplevel_334 : bool) (temp___do_typ_inv_335 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_338 : Lz77__decode_fast__S29b.s29b) (temp___skip_top_level_339 : bool) =
  ( ( true /\ ((Lz77__decode_fast__S29b.first temp___expr_338) = (Lz77__token_array.first Lz77__decode_fast__input.input)) )/\((Lz77__decode_fast__S29b.last temp___expr_338) = (Lz77__token_array.last Lz77__decode_fast__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_338 : Lz77__decode_fast__S29b.s29b) (temp___skip_top_level_339 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_338 : Lz77__decode_fast__S29b.s29b) (temp___skip_top_level_339 : bool) }

end

(* Module giving axioms for type "T31b" defined at lz77.adb:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__L_5__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at lz77.adb:128, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__L_6__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at lz77.adb:146, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__L_5__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at lz77.adb:146, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__decode_fast__L_5__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at lz77.adb:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Lz77__length_acc__result__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__length_acc__T3b as Lz77__length_acc__T3b

 val function lz77__length_acc__result__aggregate_def 
   (temp___346 : Big_integers__big_integer.big_integer) (temp___347 : int) (temp___348 : int) : Lz77__length_acc__T3b.t3b

end

(* Module for defining a value for string literal  defined at lz77.adb:34, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_376
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_376 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_376__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_376 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (2 : int))) = (102 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (3 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (4 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (7 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_376 __void_param) (8 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at lz77.adb:35, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_377
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_377 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_377__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_377 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (3 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (4 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (6 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (7 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (8 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at lz77.adb:36, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_378
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_378 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_378__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_378 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (3 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (5 : int))) = (95 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (6 : int))) = (67 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (7 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (8 : int))) = (32 : int)) ) ) ))

end
(* Module for defining the value of constant "one" defined at lz77.ads:33, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Lz77__one___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__one as Lz77__one

 axiom one__def_axiom :
  ((Lz77__one.one ) = (1 : int))

end

(* Module for defining the value of constant "R24b" defined at lz77.adb:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Lz77__decode__L_3__R24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring a program function (and possibly an axiom) for "length_acc" defined at lz77.ads:41, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__length_acc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Oeq as Big_integers__Oeq
 use        Big_integers__Ogt as Big_integers__Ogt
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__Oadd__2 as Big_integers__Oadd__2
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val length_acc 
   (input : Lz77__token_array.token_array) : Lz77__partial_length.partial_length
  requires {  ( [@GP_Pretty_Ada:21770] ((Lz77__token_array.length input) > (0 : int)) ) }
  ensures {  ( ( (result = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard result input) )/\( (Lz77__partial_length___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:3279] ((Lz77__partial_length.length result) = (Lz77__token_array.length input)) ) /\ ( [@GP_Pretty_Ada:3289] ((Lz77__partial_length.first result) = (Lz77__token_array.first input)) ) ) /\ (forall i   [@model_trace:3294] [@name:I]  : int.
   ( ( ((Lz77__token_array.first input) <= i) /\ (i <= (Lz77__token_array.last input)) ) -> ( ( [@GP_Pretty_Ada:3309] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first input))) then (
    Big_integers__zero.zero) else (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j   [@model_trace:3338] [@name:J]  : int.
    ( ( ((Lz77__token_array.first input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:3359] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) j)) = True) ) )) ) )) ) ) ) }
 
 axiom length_acc__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__length_acc.length_acc input)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ ( [@GP_Pretty_Ada:21770] ((Lz77__token_array.length input) > (0 : int)) ) ) -> (let result = (Lz77__length_acc.length_acc input) in (
    (if ((Lz77__length_acc.length_acc__function_guard result input)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:3279] ((Lz77__partial_length.length result) = (Lz77__token_array.length input)) ) /\ ( [@GP_Pretty_Ada:3289] ((Lz77__partial_length.first result) = (Lz77__token_array.first input)) ) ) /\ (forall i   [@model_trace:3294] [@name:I]  : int.
      ( ( ((Lz77__token_array.first input) <= i) /\ (i <= (Lz77__token_array.last input)) ) -> ( ( [@GP_Pretty_Ada:3309] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first input))) then (
       Big_integers__zero.zero) else (
       (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j   [@model_trace:3338] [@name:J]  : int.
       ( ( ((Lz77__token_array.first input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:3359] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) j)) = True) ) )) ) )) ) /\ (Lz77__partial_length___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "decoded_length" defined at lz77.ads:54, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Lz77__decoded_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__decoded_length as Lz77__decoded_length
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val decoded_length 
   (input : Lz77__token_array.token_array) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard result input) )/\( (Big_integers__big_integer.dynamic_invariant result True False True True) /\ (result = (if (((Lz77__token_array.length input) = (0 : int))) then (
   Big_integers__zero.zero) else (
   (let temp___195 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_194 : Lz77__partial_length.partial_length.
    ( (temp___result_194 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_194 input) )) in (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___195) (Lz77__token_array.last input))))
  ))) ) ) }
 
 axiom decoded_length__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__decoded_length.decoded_length input)].
   ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) -> (let result = (Lz77__decoded_length.decoded_length input) in (
    (if ((Lz77__decoded_length.decoded_length__function_guard result input)) then (
     ( ( true /\ (Big_integers__big_integer.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom decoded_length__def_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__decoded_length.decoded_length input)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ (let result = (Lz77__decoded_length.decoded_length input) in (
    (Lz77__decoded_length.decoded_length__function_guard result input)))
    ) -> ((Lz77__decoded_length.decoded_length input) = (if (((Lz77__token_array.length input) = (0 : int))) then (
    Big_integers__zero.zero) else (
    (let temp___199 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_198 : Lz77__partial_length.partial_length.
     ( (temp___result_198 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_198 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___199) (Lz77__token_array.last input))))
   ))) ))

end

(* Module giving a program function and a defining axiom for the expression function "valid" defined at lz77.ads:65, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Lz77__valid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__valid as Lz77__valid
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Ole as Big_integers__Ole
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__in_range as Big_integers__in_range
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val valid 
   (input : Lz77__token_array.token_array) (upto : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Lz77__valid.valid input upto)) /\ (Lz77__valid.valid__function_guard result input upto) )/\( (result = True) <-> ( (upto <= (Lz77__token_array.last input)) /\ ( ((Lz77__token_array.length input) = (0 : int)) \/ (forall i   [@model_trace:3493] [@name:I]  : int.
   ( ( ((Lz77__token_array.first input) <= i) /\ (i <= upto) ) -> ( ((Big_integers__in_range.in_range__logic (let temp___201 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_200 : Lz77__partial_length.partial_length.
    ( (temp___result_200 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_200 input) )) in (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___201) i)))
    (Big_integers__to_big_integer.to_big_integer__logic (1 : int)) (Big_integers__to_big_integer.to_big_integer__logic (2147483647 : int))) = True) /\ ((Big_integers__Ole.ole__logic (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) (if ((i = (Lz77__token_array.first input))) then (
    Big_integers__zero.zero) else (
    (let temp___203 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_202 : Lz77__partial_length.partial_length.
     ( (temp___result_202 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_202 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___203) (i - (1 : int)))))
   ))) = True) ) )) ) ) ) ) }
 
 axiom valid__post_axiom :
  (forall input   : Lz77__token_array.token_array.
  (forall upto   : int [(Lz77__valid.valid input upto)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ (Standard__integer___axiom.dynamic_invariant upto True True True True) ) -> (let result = (Lz77__valid.valid input upto) in (
    (if ((Lz77__valid.valid__function_guard result input upto)) then (
     ( ( true /\ true )/\true )) else true)))
    )))
 
 axiom valid__def_axiom :
  (forall input   : Lz77__token_array.token_array.
  (forall upto   : int [(Lz77__valid.valid input upto)].
   ( (let result = (Lz77__valid.valid input upto) in (
    (Lz77__valid.valid__function_guard result input upto)))
    -> ( ((Lz77__valid.valid input upto) = True) <-> ( (upto <= (Lz77__token_array.last input)) /\ ( ((Lz77__token_array.length input) = (0 : int)) \/ (forall i   [@model_trace:3493] [@name:I]  : int.
    ( ( ((Lz77__token_array.first input) <= i) /\ (i <= upto) ) -> ( ((Big_integers__in_range.in_range__logic (let temp___207 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_206 : Lz77__partial_length.partial_length.
     ( (temp___result_206 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_206 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___207) i)))
     (Big_integers__to_big_integer.to_big_integer__logic (1 : int)) (Big_integers__to_big_integer.to_big_integer__logic (2147483647 : int))) = True) /\ ((Big_integers__Ole.ole__logic (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) (if ((i = (Lz77__token_array.first input))) then (
     Big_integers__zero.zero) else (
     (let temp___209 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_208 : Lz77__partial_length.partial_length.
      ( (temp___result_208 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_208 input) )) in (
      (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___209) (i - (1 : int)))))
    ))) = True) ) )) ) ) ) )))

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at lz77.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token as Lz77__token
 use        Ada__integer_text_io__default_width as Ada__integer_text_io__default_width
 use        Ada__integer_text_io__default_base as Ada__integer_text_io__default_base
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put 
   (t : Lz77__token.token) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__integer_text_io__default_base.default_base, Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__integer_text_io__default_width.default_width}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "decode" defined at lz77.ads:94, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__decode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__byte_array as Lz77__byte_array
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val decode 
   (input : Lz77__token_array.token_array) (output : Array__Int__Standard__character.map__ref) (output__first : Standard__integer.integer) (output__last : Standard__integer.integer) (output_length : int__ref) (error : bool__ref) : unit
  requires {  true }
  ensures {  ( (if ((error.bool__content = True)) then (
   ( [@GP_Pretty_Ada:3620] (output_length.int__content = (0 : int)) )) else (
   ( [@GP_Pretty_Ada:3621] true ))) /\ ( (if (True) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)))) /\ (Standard__natural___axiom.dynamic_invariant output_length.int__content True True True True) ) ) }
  writes {output, output_length, error}

end

(* Module for declaring a program function (and possibly an axiom) for "is_valid" defined at lz77.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__is_valid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__valid as Lz77__valid
 use        Lz77__is_valid as Lz77__is_valid
 use        Lz77__token_array___axiom as Lz77__token_array___axiom

 val is_valid 
   (input : Lz77__token_array.token_array) : bool
  requires {  true }
  ensures {  ( ( (result = (Lz77__is_valid.is_valid input)) /\ (Lz77__is_valid.is_valid__function_guard result input) )/\(if ((result = True)) then (
   ( [@GP_Pretty_Ada:3654] ((epsilon temp___result_214 : bool.
    ( (temp___result_214 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_214 input (Lz77__token_array.last input)) )) = True) )) else (
   ( [@GP_Pretty_Ada:3655] not ( ((epsilon temp___result_215 : bool.
    ( (temp___result_215 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_215 input (Lz77__token_array.last input)) )) = True) ) ))) ) }
 
 axiom is_valid__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__is_valid.is_valid input)].
   ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) -> (let result = (Lz77__is_valid.is_valid input) in (
    (if ((Lz77__is_valid.is_valid__function_guard result input)) then (
     ( ( (if ((result = True)) then (
      ( [@GP_Pretty_Ada:3654] ((epsilon temp___result_217 : bool.
       ( (temp___result_217 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_217 input (Lz77__token_array.last input)) )) = True) )) else (
      ( [@GP_Pretty_Ada:3655] not ( ((epsilon temp___result_218 : bool.
       ( (temp___result_218 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_218 input (Lz77__token_array.last input)) )) = True) ) ))) /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "decode_fast" defined at lz77.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__decode_fast___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__decoded_length as Lz77__decoded_length
 use        Lz77__valid as Lz77__valid
 use        Lz77__byte_array as Lz77__byte_array
 use        Big_integers__to_integer as Big_integers__to_integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val decode_fast 
   (input : Lz77__token_array.token_array) (output : Array__Int__Standard__character.map__ref) (output__first : Standard__integer.integer) (output__last : Standard__integer.integer) (output_length : int__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3708] ((epsilon temp___result_220 : bool.
   ( (temp___result_220 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_220 input (Lz77__token_array.last input)) )) = True) ) /\ ( [@GP_Pretty_Ada:3714] ((Integer.length (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)) >= (Big_integers__to_integer.to_integer__logic (epsilon temp___result_221 : Big_integers__big_integer.big_integer.
   ( (temp___result_221 = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_221 input) )))) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:22322] (output_length.int__content = (Big_integers__to_integer.to_integer__logic (epsilon temp___result_222 : Big_integers__big_integer.big_integer.
   ( (temp___result_222 = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_222 input) )))) ) /\ ( (if (True) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)))) /\ (Standard__natural___axiom.dynamic_invariant output_length.int__content True True True True) ) ) }
  writes {output, output_length}

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:8337] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:8343] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-tiinio.ads:80 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__2 
   (item : int) (width : int) (base : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:20923] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:20927] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at a-textio.ads:264, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val new_line__2 
   (spacing : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:6790] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:6796] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-textio.ads:392, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__2 
   (item : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:7844] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:7850] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lz77" defined at lz77.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Lz77__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__one as Lz77__one
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__one___axiom as Lz77__one___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"lz77.ads" 4 0 0][@GP_Subp:lz77.ads:4] 
   (__void_param : unit)
  requires { [#"lz77.ads" 4 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"lz77.ads" 4 0 0] ());
  ([#"lz77.ads" 11 0 0] ());
  ([#"lz77.ads" 14 0 0] ());
  ([#"lz77.ads" 21 0 0] ());
  ([#"lz77.ads" 31 0 0] ());
  ([#"lz77.ads" 31 0 0] ());
  ([#"lz77.ads" 33 0 0] ( [#"lz77.ads" 33 0 0] begin ensures {true} let _ = (let _ = (1 : int) in (
   ()))
   in () end ;
  [#"lz77.ads" 33 0 0] assume { [#"lz77.ads" 33 0 0] (Standard__integer___axiom.dynamic_invariant Lz77__one.one True False True True) } ));
  ([#"lz77.ads" 33 0 0] ());
  ([#"lz77.ads" 41 0 0] ());
  ([#"lz77.ads" 44 0 0] ());
  ([#"lz77.ads" 43 0 0] ());
  ([#"lz77.ads" 42 0 0] ());
  ([#"lz77.ads" 54 0 0] ());
  ([#"lz77.ads" 55 0 0] ());
  ([#"lz77.ads" 57 0 0] ());
  ([#"lz77.ads" 57 0 0] ());
  ([#"lz77.ads" 57 0 0] ());
  ([#"lz77.ads" 57 0 0] ());
  ([#"lz77.ads" 57 0 0] ());
  ([#"lz77.ads" 65 0 0] ());
  ([#"lz77.ads" 66 0 0] ());
  ([#"lz77.ads" 68 0 0] ());
  ([#"lz77.ads" 68 0 0] ());
  ([#"lz77.ads" 86 0 0] ());
  ([#"lz77.ads" 94 0 0] ());
  ([#"lz77.ads" 96 0 0] ());
  ([#"lz77.ads" 100 0 0] ());
  ([#"lz77.ads" 101 0 0] ());
  ([#"lz77.ads" 113 0 0] ());
  ([#"lz77.ads" 116 0 0] ());
  ([#"lz77.ads" 115 0 0] ());
  ([#"lz77.ads" 115 0 0] ());
  ([#"lz77.ads" 115 0 0] ());
  ([#"lz77.ads" 115 0 0] ());
  ([#"lz77.ads" 115 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"lz77.adb" 9 0 0] ());
  ([#"lz77.adb" 11 0 0] ());
  ([#"lz77.adb" 32 0 0] ());
  ([#"lz77.adb" 51 0 0] ());
  ([#"lz77.adb" 100 0 0] ());
  ([#"lz77.adb" 117 0 0] ());
  ();
  ( [@GP_Sloc:lz77.adb:150:1] ([#"lz77.adb" 150 0 0] ()) ) )
end

(* Module for defining the value of the aggregate at lz77.adb:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Lz77__length_acc__result__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__partial_length as Lz77__partial_length
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Lz77__length_acc__T3b as Lz77__length_acc__T3b
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__length_acc__result__aggregate_def as Lz77__length_acc__result__aggregate_def
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 axiom def_axiom :
  (forall temp___346   : Big_integers__big_integer.big_integer.
  (forall temp___347   temp___348   : int.
   (let temp___345 [@mlw:proxy_symbol] [@introduced] = (Lz77__length_acc__result__aggregate_def.lz77__length_acc__result__aggregate_def temp___346 temp___347 temp___348) in (
    (if ((Big_integers__big_integer.dynamic_invariant temp___346 True True True True)) then (
     ( (if ((Lz77__partial_length.dynamic_property Standard__positive.first Standard__positive.last temp___347 temp___348)) then (
      ( ((Lz77__length_acc__T3b.first temp___345) = temp___347) /\ ((Lz77__length_acc__T3b.last temp___345) = temp___348) )) else true) /\ (forall temp___349   : int.
      ((Array__Int__Big_integers__big_integer.get (Lz77__length_acc__T3b.to_array temp___345) temp___349) = temp___346)) )) else true)))
  ))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length_acc" defined at lz77.ads:41, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__length_acc__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__length_acc__input as Lz77__length_acc__input
 use        Lz77__partial_length as Lz77__partial_length
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__token as Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Lz77__length_acc__result as Lz77__length_acc__result
 use        Lz77__length_acc__L_1__index as Lz77__length_acc__L_1__index
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Oeq as Big_integers__Oeq
 use        Big_integers__Ogt as Big_integers__Ogt
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__Oadd__2 as Big_integers__Oadd__2
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Lz77__length_acc__TresultS as Lz77__length_acc__TresultS
 use        Lz77__length_acc__T3b as Lz77__length_acc__T3b
 use        Lz77__length_acc__L_1 as Lz77__length_acc__L_1
 use        Lz77__length_acc__L_1__T4b as Lz77__length_acc__L_1__T4b
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__length_acc__result__aggregate_def as Lz77__length_acc__result__aggregate_def
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__length_acc__result___axiom as Lz77__length_acc__result___axiom
 use        Lz77__length_acc__result__aggregate_def___axiom as Lz77__length_acc__result__aggregate_def___axiom
 use        Lz77__length_acc__L_1__index___axiom as Lz77__length_acc__L_1__index___axiom
 use        Lz77__length_acc__L_1___axiom as Lz77__length_acc__L_1___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc__input___axiom as Lz77__length_acc__input___axiom
 use        Lz77__length_acc__TresultS___axiom as Lz77__length_acc__TresultS___axiom
 use        Lz77__length_acc__T3b___axiom as Lz77__length_acc__T3b___axiom
 use        Lz77__length_acc__L_1__T4b___axiom as Lz77__length_acc__L_1__T4b___axiom

 val lz77__length_acc__result [@model_trace:3241@result] [@name:Length_Acc] [@model_projected]  : Lz77__partial_length.partial_length__ref 
 
 let def [#"lz77.ads" 41 0 0][@GP_Subp:lz77.ads:41] 
   (__void_param : unit)
  requires { [#"lz77.ads" 41 0 0] true }
  ensures { [#"lz77.ads" 41 0 0] ([#"lz77.ads" 44 0 0] ( [@comment:     Post => Length_Acc'Result'Length = Input'Length and then              ^ lz77.ads:44:14:VC_POSTCONDITION] [@GP_Sloc:lz77.ads:44:14] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:37] [@GP_Shape:pragargs__andthen] [@model_vc_post] ( ( ( [@GP_Sloc:lz77.ads:44:14] [@GP_Pretty_Ada:3279] ((Lz77__partial_length.length lz77__length_acc__result.Lz77__partial_length.partial_length__content) = (Lz77__token_array.length Lz77__length_acc__input.input)) ) /\ ( [@GP_Pretty_Ada:3289] [@GP_Sloc:lz77.ads:45:6] ((Lz77__partial_length.first lz77__length_acc__result.Lz77__partial_length.partial_length__content) = (Lz77__token_array.first Lz77__length_acc__input.input)) ) ) /\ (forall i [#"lz77.ads" 44 0 0]  [@model_trace:3294] [@name:I]  : int.
   ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__length_acc__input.input)) ) -> ( ( [@GP_Pretty_Ada:3309] [@GP_Sloc:lz77.ads:47:9] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first Lz77__length_acc__input.input))) then (
    Big_integers__zero.zero) else (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__length_acc__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j [#"lz77.ads" 44 0 0]  [@model_trace:3338] [@name:J]  : int.
    ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Sloc:lz77.ads:51:16] [@GP_Pretty_Ada:3359] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) j)) = True) ) )) ) )) ) )) }
   = [@vc:divergent]
  (  assume {  (Big_integers__big_integer.dynamic_invariant Big_integers__zero.zero True False True True) };
  () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:41 *)
  ;
   assume {  (Lz77__token_array___axiom.dynamic_invariant Lz77__length_acc__input.input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:41 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:41 *)
  ;
   begin ensures {true} let _ = (let _ = ((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
   ()))
   in () end ;
  (Lz77__token_array.length(Lz77__length_acc__input.input)) ) > (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:41 *)
  ;
   assume {  ( [@GP_Pretty_Ada:21770] ((Lz77__token_array.length Lz77__length_acc__input.input) > (0 : int)) ) };
   try
   ( ();
   ([#"lz77.adb" 11 0 0] ());
   ([#"lz77.adb" 12 0 0] ([#"lz77.adb" 12 0 0] [#"lz77.adb" 12 0 0] (val _f : unit
   requires {( [@vc:annotation] [@comment:      Result : Partial_Length (Input'Range) := (others => Zero);       ^ lz77.adb:12:7:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] [@GP_Sloc:lz77.adb:12:7] [#"lz77.adb" 12 0 0] ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= (Lz77__token_array.last Lz77__length_acc__input.input)) -> ( ((Lz77__token_array.first Lz77__length_acc__input.input) >= Standard__positive.first) /\ ((Lz77__token_array.last Lz77__length_acc__input.input) <= Standard__positive.last) ) ) )} 
   ensures {[#"lz77.adb" 12 0 0] true} 
   in _f)));
   ([#"lz77.adb" 12 0 0] ( (let lz77__length_acc__result__assume = (let temp___351 [@mlw:proxy_symbol] [@introduced] = (let temp___350 [@mlw:proxy_symbol] [@introduced] = (Lz77__length_acc__result__aggregate_def.lz77__length_acc__result__aggregate_def(Big_integers__zero.zero) ((Lz77__token_array.first Lz77__length_acc__input.input)) ((Lz77__token_array.last Lz77__length_acc__input.input))) in (
    ( [#"lz77.adb" 12 0 0] assume { [#"lz77.adb" 12 0 0] ((Lz77__length_acc__T3b.first temp___350) = (Lz77__token_array.first Lz77__length_acc__input.input)) };
    [#"lz77.adb" 12 0 0] assume { [#"lz77.adb" 12 0 0] ((Lz77__length_acc__T3b.last temp___350) = (Lz77__token_array.last Lz77__length_acc__input.input)) };
    temp___350 )))
    in (
    ( [#"lz77.adb" 12 0 0] assert { [#"lz77.adb" 12 0 0] ([#"lz77.adb" 12 0 0] ( [@GP_Shape:result_decl__aggr] [@vc:annotation] [@GP_Sloc:lz77.adb:12:48] [@comment:      Result : Partial_Length (Input'Range) := (others => Zero);                                                ^ lz77.adb:12:48:VC_LENGTH_CHECK] [@GP_Id:1] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Lz77__length_acc__T3b.first temp___351) <= (Lz77__length_acc__T3b.last temp___351))) then (
     ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= (Lz77__token_array.last Lz77__length_acc__input.input)) /\ (((Lz77__length_acc__T3b.last temp___351) - (Lz77__length_acc__T3b.first temp___351)) = ((Lz77__token_array.last Lz77__length_acc__input.input) - (Lz77__token_array.first Lz77__length_acc__input.input))) )) else (
     ((Lz77__token_array.last Lz77__length_acc__input.input) < (Lz77__token_array.first Lz77__length_acc__input.input)))) ) )) };
    (Lz77__length_acc__TresultS.of_array((Array__Int__Big_integers__big_integer.slide((Lz77__length_acc__T3b.to_array(temp___351))) ((Lz77__length_acc__T3b.first(temp___351))) ((Lz77__token_array.first Lz77__length_acc__input.input)))) ((Lz77__token_array.first Lz77__length_acc__input.input)) ((Lz77__token_array.last Lz77__length_acc__input.input))) )))
    in (
    (  (Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content <- ( (Lz77__length_acc__TresultS.to_array(lz77__length_acc__result__assume)) ));
     assume {  ((Standard__integer__rep.to_rep(Lz77__length_acc__result.result____first)) = (Lz77__length_acc__TresultS.first(lz77__length_acc__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Lz77__length_acc__result.result____last)) = (Lz77__length_acc__TresultS.last(lz77__length_acc__result__assume))) } )))
   ;
    assume {  ( (if (False) then (
    true) else (
    ( (Lz77__length_acc__TresultS.dynamic_property (Lz77__token_array.first Lz77__length_acc__input.input) (Lz77__token_array.last Lz77__length_acc__input.input) (Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) = (Lz77__token_array.first Lz77__length_acc__input.input)) /\ ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____last) = (Lz77__token_array.last Lz77__length_acc__input.input)) ) ))) /\ (forall temp___352   : int.
    (if (( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___352) /\ (temp___352 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) )) then (
     (Big_integers__big_integer.dynamic_invariant (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content temp___352) True False True True)) else true)) ) } ));
   ([#"lz77.adb" 15 0 0] ());
   ();
   ( [@GP_Sloc:lz77.adb:15:32] ([#"lz77.adb" 15 0 0] (let temp___353 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 15 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.first(Lz77__length_acc__input.input)) ) in (
   (let temp___354 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 15 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__length_acc__input.input)) ) in (
    ( [#"lz77.adb" 15 0 0] (Lz77__length_acc__L_1__index.index.int__content <- ( temp___353 ));
    () (* Translation of an Ada loop from lz77.adb:15 *)
    ;
    (if ((Boolean.andb((temp___353 <= Lz77__length_acc__L_1__index.index.int__content)) ((Lz77__length_acc__L_1__index.index.int__content <= temp___354)))) then (
     [#"lz77.adb" 15 0 0] try
      ( [#"lz77.adb" 15 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__L_1__index.index.int__content in (
       ()))
       in () end ;
      (let temp___359 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 15 0 0] (val _f : int
      ensures {[#"lz77.adb" 15 0 0] (result = Lz77__length_acc__L_1__index.index.int__content)} 
      in _f) in (
       ( [#"lz77.adb" 15 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content in (
        ()))
        in () end ;
       (let temp___357 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 15 0 0] (val _f : Array__Int__Big_integers__big_integer.map
       ensures {[#"lz77.adb" 15 0 0] (result = Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:15 *)
        ;
        () (* While loop translating the Ada loop from lz77.adb:15 *)
        ;
        (let temp___inv_360 [@mlw:proxy_symbol] [@introduced] = ( ( (let i = [#"lz77.adb" 15 0 0] (val _f : int
        in _f) in (
         (if ((Boolean.andb((( [#"lz77.adb" 15 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
          ()))
          in () end ;
         (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= i)) ((i <= ([#"lz77.adb" 18 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__range__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:18:47] [@GP_Id:8] [@comment:           ((for all I in Input'First .. Index-1 =>                                               ^ lz77.adb:18:47:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Lz77__length_acc__L_1__index.index.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ([#"lz77.adb" 19 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:17] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq] [@vc:annotation] [@comment:              Result(I) =                         ^ lz77.adb:19:25:VC_PRECONDITION] [@GP_Sloc:lz77.adb:19:25] (Big_integers__Oeq.oeq((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) (( [#"lz77.adb" 19 0 0] assert { [#"lz77.adb" 19 0 0] ([#"lz77.adb" 19 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__ixdcomp] [@comment:              Result(I) =                      ^ lz77.adb:19:22:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:19:22] [@GP_Id:9] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= i) /\ (i <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
          i )))) (([#"lz77.adb" 20 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:16] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2] [@GP_Sloc:lz77.adb:21:47] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                               ^ lz77.adb:21:47:VC_PRECONDITION] [@vc:annotation] (Big_integers__Oadd__2.oadd__2(([#"lz77.adb" 20 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:14] [@GP_Sloc:lz77.adb:20:63] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                               ^ lz77.adb:20:63:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2] (Big_integers__Oadd__2.oadd__2((if ((i = ( [#"lz77.adb" 20 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
           ()))
           in () end ;
          (Lz77__token_array.first(Lz77__length_acc__input.input)) ))) then (
           Big_integers__zero.zero) else (
           (Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((let temp___361 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 20 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:20:57] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                         ^ lz77.adb:20:57:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((i - (1 : int)))) )) in (
            (  assert {  ([#"lz77.adb" 20 0 0] ( [@GP_Id:11] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@vc:annotation] [@GP_Sloc:lz77.adb:20:57] [@GP_Reason:VC_INDEX_CHECK] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                         ^ lz77.adb:20:57:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___361) /\ (temp___361 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
            temp___361 )))
           ))))) (([#"lz77.adb" 21 0 0] ( [@GP_Sloc:lz77.adb:21:15] [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then               ^ lz77.adb:21:15:VC_PRECONDITION] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer] (Big_integers__to_big_integer.to_big_integer((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__length_acc__input.input))) (( [#"lz77.adb" 21 0 0] assert { [#"lz77.adb" 21 0 0] ([#"lz77.adb" 21 0 0] ( [@GP_Id:12] [@vc:annotation] [@GP_Sloc:lz77.adb:21:36] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                    ^ lz77.adb:21:36:VC_INDEX_CHECK] ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__length_acc__input.input)) ) )) };
          i ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)))) )))) ))) (([#"lz77.adb" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_to_big_integer] [@GP_Sloc:lz77.adb:21:49] [@vc:annotation] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                                 ^ lz77.adb:21:49:VC_PRECONDITION] (Big_integers__to_big_integer.to_big_integer((1 : int))) )))) )))) )) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2378]  : int.
         ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first Lz77__length_acc__input.input))) then (
          Big_integers__zero.zero) else (
          (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__length_acc__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) )) )} 
        in _f) ) && ( (let i =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
          ()))
          in () end ;
         (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= i)) ((i <= ([#"lz77.adb" 22 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__range__sub] [@comment:              (for all I in Input'First .. Index-1 =>                                                 ^ lz77.adb:22:49:VC_OVERFLOW_CHECK] [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:22:49] (Standard__integer.range_check_((Lz77__length_acc__L_1__index.index.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ( (let j =  (val _f : int
          in _f) in (
           (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
            ()))
            in () end ;
           (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= j)) ((j <= ([#"lz77.adb" 23 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__range__sub] [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                    (for all J in Input'First..I-1 =>                                                 ^ lz77.adb:23:49:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:23:49] (Standard__integer.range_check_((i - (1 : int)))) )))))) then (
             begin ensures {true} let _ = (let _ = ([#"lz77.adb" 24 0 0] ( [@GP_Sloc:lz77.adb:24:26] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt] [@GP_Id:22] [@comment:               Result(I) > Result(J))));                          ^ lz77.adb:24:26:VC_PRECONDITION] (Big_integers__Ogt.ogt((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) (( [#"lz77.adb" 24 0 0] assert { [#"lz77.adb" 24 0 0] ([#"lz77.adb" 24 0 0] ( [@comment:               Result(I) > Result(J))));                       ^ lz77.adb:24:23:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] [@GP_Sloc:lz77.adb:24:23] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= i) /\ (i <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
            i )))) ((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((  assert {  ([#"lz77.adb" 24 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt__ixdcomp] [@comment:               Result(I) > Result(J))));                                   ^ lz77.adb:24:35:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:24:35] [@GP_Id:21] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= j) /\ (j <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
            j ))))) )) in (
             ()))
             in () end ))))
          ;
           (val _f : bool
          ensures { ( (result = True) <-> (forall j   [@model_trace:2439] [@name:J]  : int.
           ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content j)) = True) )) )} 
          in _f) ) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2423]  : int.
         ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> (forall j   [@model_trace:2439] [@name:J]  : int.
          ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content j)) = True) )) )) )} 
        in _f) ) ) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"lz77.adb" 18 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:           ((for all I in Input'First .. Index-1 =>             ^ lz77.adb:18:13:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:lz77.adb:18:13] [@GP_Id:23] [@GP_Shape:L_1_while__pragargs__andthen] ( (forall i [#"lz77.adb" 18 0 0]  [@name:I] [@model_trace:2378]  : int.
           ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> ( [@GP_Sloc:lz77.adb:19:15] [@GP_Pretty_Ada:2396] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first Lz77__length_acc__input.input))) then (
            Big_integers__zero.zero) else (
            (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__length_acc__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) )) /\ (forall i [#"lz77.adb" 18 0 0]  [@name:I] [@model_trace:2423]  : int.
           ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> (forall j [#"lz77.adb" 18 0 0]  [@model_trace:2439] [@name:J]  : int.
            ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:2458] [@GP_Sloc:lz77.adb:24:16] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content j)) = True) ) )) )) ) ))
          }
         ( () (* Assume implicit invariants from the loop lz77.adb:15 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ ( (if (True) then (
          true) else (
          ( (Lz77__length_acc__TresultS.dynamic_property (Lz77__token_array.first Lz77__length_acc__input.input) (Lz77__token_array.last Lz77__length_acc__input.input) (Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) = (Lz77__token_array.first Lz77__length_acc__input.input)) /\ ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____last) = (Lz77__token_array.last Lz77__length_acc__input.input)) ) ))) /\ (forall temp___356   : int.
          (if (( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___356) /\ (temp___356 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) )) then (
           (Big_integers__big_integer.dynamic_invariant (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content temp___356) True False True True)) else true)) ) )/\(forall temp___358   : int.
          (if (( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___358) /\ (temp___358 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) )) then (
           (if (( (temp___354 < temp___358) \/ ( (temp___358 < temp___353) \/ (Lz77__length_acc__L_1__index.index.int__content <= temp___358) ) )) then (
            ((Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content temp___358) = (Array__Int__Big_integers__big_integer.get temp___357 temp___358))) else (
            true))) else true)) ) /\ (if (( True \/ ((Lz77__token_array.first Lz77__length_acc__input.input) <= (Lz77__token_array.last Lz77__length_acc__input.input)) )) then (
          (Lz77__length_acc__L_1__T4b.dynamic_property (Lz77__token_array.first Lz77__length_acc__input.input) (Lz77__token_array.last Lz77__length_acc__input.input) Lz77__length_acc__L_1__index.index.int__content)) else true) )/\true )) (( ((Lz77__token_array.first Lz77__length_acc__input.input) <= Lz77__length_acc__L_1__index.index.int__content) /\ (Lz77__length_acc__L_1__index.index.int__content <= (Lz77__token_array.last Lz77__length_acc__input.input)) ))) };
         () (* Check for absence of RTE in the invariant of loop lz77.adb:15 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop lz77.adb:15 *)
         ;
         ();
         ( [@GP_Sloc:lz77.adb:25:10] ([#"lz77.adb" 25 0 0] ()) );
         ( [@GP_Sloc:lz77.adb:27:14] ([#"lz77.adb" 27 0 0] ()) );
         ( [@GP_Sloc:lz77.adb:26:70] ([#"lz77.adb" 26 0 0] ()) );
         ( [@GP_Sloc:lz77.adb:27:52] ([#"lz77.adb" 27 0 0] ()) );
         ( [@GP_Sloc:lz77.adb:27:50] ([#"lz77.adb" 27 0 0] ()) );
         ( [@GP_Sloc:lz77.adb:25:24] ([#"lz77.adb" 25 0 0] [#"lz77.adb" 25 0 0] (Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content <- ( (Array__Int__Big_integers__big_integer.set(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) (Lz77__length_acc__L_1__index.index.int__content) (([#"lz77.adb" 26 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:lz77.adb:27:50] [@vc:annotation] [@GP_Shape:L_1_while__result_assign__call_Oadd__2] [@comment:             To_Big_Integer(Input(Index).Length) + To_Big_Integer(One);                                                  ^ lz77.adb:27:50:VC_PRECONDITION] [@GP_Id:7] (Big_integers__Oadd__2.oadd__2(([#"lz77.adb" 26 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:lz77.adb:26:70] [@vc:annotation] [@GP_Shape:L_1_while__result_assign__call_Oadd__2__call_Oadd__2] [@comment:           (if Index = Input'First then Zero else Result(Index - 1)) +                                                                      ^ lz77.adb:26:70:VC_PRECONDITION] [@GP_Id:5] (Big_integers__Oadd__2.oadd__2((if ((Lz77__length_acc__L_1__index.index.int__content = ( [#"lz77.adb" 26 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
          ()))
          in () end ;
         (Lz77__token_array.first(Lz77__length_acc__input.input)) ))) then (
          Big_integers__zero.zero) else (
          (Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((let temp___355 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 26 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__result_assign__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@GP_Sloc:lz77.adb:26:64] [@comment:           (if Index = Input'First then Zero else Result(Index - 1)) +                                                                ^ lz77.adb:26:64:VC_OVERFLOW_CHECK] [@GP_Id:2] (Standard__integer.range_check_((Lz77__length_acc__L_1__index.index.int__content - (1 : int)))) )) in (
           (  assert {  ([#"lz77.adb" 26 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__result_assign__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@GP_Sloc:lz77.adb:26:64] [@GP_Reason:VC_INDEX_CHECK] [@comment:           (if Index = Input'First then Zero else Result(Index - 1)) +                                                                ^ lz77.adb:26:64:VC_INDEX_CHECK] [@GP_Id:3] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___355) /\ (temp___355 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
           temp___355 )))
          ))))) (([#"lz77.adb" 27 0 0] ( [@comment:             To_Big_Integer(Input(Index).Length) + To_Big_Integer(One);              ^ lz77.adb:27:14:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_while__result_assign__call_Oadd__2__call_Oadd__2__call_to_big_integer] [@vc:annotation] [@GP_Sloc:lz77.adb:27:14] [@GP_Id:4] (Big_integers__to_big_integer.to_big_integer((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__length_acc__input.input))) (Lz77__length_acc__L_1__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)))) )))) ))) (([#"lz77.adb" 27 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:             To_Big_Integer(Input(Index).Length) + To_Big_Integer(One);                                                    ^ lz77.adb:27:52:VC_PRECONDITION] [@GP_Sloc:lz77.adb:27:52] [@vc:annotation] [@GP_Shape:L_1_while__result_assign__call_Oadd__2__call_to_big_integer] [@GP_Id:6] (Big_integers__to_big_integer.to_big_integer((1 : int))) )))) )))) ))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:15 *)
         ;
         (if ((Lz77__length_acc__L_1__index.index.int__content = temp___354)) then (
           raise Lz77__length_acc__L_1.L_1));
         ([#"lz77.adb" 15 0 0] [#"lz77.adb" 15 0 0] (Lz77__length_acc__L_1__index.index.int__content <- ( (Lz77__length_acc__L_1__index.index.int__content + (1 : int)) )));
         (let temp___inv_360 [@mlw:proxy_symbol] [@introduced] = ( ( (let i =  (val _f : int
         in _f) in (
          (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
           ()))
           in () end ;
          (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= i)) ((i <= ([#"lz77.adb" 18 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__range__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:18:47] [@GP_Id:8] [@comment:           ((for all I in Input'First .. Index-1 =>                                               ^ lz77.adb:18:47:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Lz77__length_acc__L_1__index.index.int__content - (1 : int)))) )))))) then (
            begin ensures {true} let _ = (let _ = ([#"lz77.adb" 19 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:17] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq] [@vc:annotation] [@comment:              Result(I) =                         ^ lz77.adb:19:25:VC_PRECONDITION] [@GP_Sloc:lz77.adb:19:25] (Big_integers__Oeq.oeq((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) (( [#"lz77.adb" 19 0 0] assert { [#"lz77.adb" 19 0 0] ([#"lz77.adb" 19 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__ixdcomp] [@comment:              Result(I) =                      ^ lz77.adb:19:22:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:19:22] [@GP_Id:9] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= i) /\ (i <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
           i )))) (([#"lz77.adb" 20 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:16] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2] [@GP_Sloc:lz77.adb:21:47] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                               ^ lz77.adb:21:47:VC_PRECONDITION] [@vc:annotation] (Big_integers__Oadd__2.oadd__2(([#"lz77.adb" 20 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:14] [@GP_Sloc:lz77.adb:20:63] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                               ^ lz77.adb:20:63:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2] (Big_integers__Oadd__2.oadd__2((if ((i = ( [#"lz77.adb" 20 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
            ()))
            in () end ;
           (Lz77__token_array.first(Lz77__length_acc__input.input)) ))) then (
            Big_integers__zero.zero) else (
            (Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((let temp___361 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 20 0 0] ( [@GP_Id:10] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:20:57] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                         ^ lz77.adb:20:57:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((i - (1 : int)))) )) in (
             (  assert {  ([#"lz77.adb" 20 0 0] ( [@GP_Id:11] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@vc:annotation] [@GP_Sloc:lz77.adb:20:57] [@GP_Reason:VC_INDEX_CHECK] [@comment:            (if I = Input'First then Zero else Result(I - 1)) +                                                         ^ lz77.adb:20:57:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= temp___361) /\ (temp___361 <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
             temp___361 )))
            ))))) (([#"lz77.adb" 21 0 0] ( [@GP_Sloc:lz77.adb:21:15] [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then               ^ lz77.adb:21:15:VC_PRECONDITION] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer] (Big_integers__to_big_integer.to_big_integer((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__length_acc__input.input))) (( [#"lz77.adb" 21 0 0] assert { [#"lz77.adb" 21 0 0] ([#"lz77.adb" 21 0 0] ( [@GP_Id:12] [@vc:annotation] [@GP_Sloc:lz77.adb:21:36] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                    ^ lz77.adb:21:36:VC_INDEX_CHECK] ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__length_acc__input.input)) ) )) };
           i ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)))) )))) ))) (([#"lz77.adb" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@GP_Shape:L_1_while__pragargs__andthen__forall__call_Oeq__call_Oadd__2__call_to_big_integer] [@GP_Sloc:lz77.adb:21:49] [@vc:annotation] [@comment:              To_Big_Integer(Input(I).Length) + To_Big_Integer(One)) and then                                                 ^ lz77.adb:21:49:VC_PRECONDITION] (Big_integers__to_big_integer.to_big_integer((1 : int))) )))) )))) )) in (
            ()))
            in () end ))))
         ;
          (val _f : bool
         ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2378]  : int.
          ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first Lz77__length_acc__input.input))) then (
           Big_integers__zero.zero) else (
           (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__length_acc__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) )) )} 
         in _f) ) && ( (let i =  (val _f : int
         in _f) in (
          (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
           ()))
           in () end ;
          (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= i)) ((i <= ([#"lz77.adb" 22 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__range__sub] [@comment:              (for all I in Input'First .. Index-1 =>                                                 ^ lz77.adb:22:49:VC_OVERFLOW_CHECK] [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:22:49] (Standard__integer.range_check_((Lz77__length_acc__L_1__index.index.int__content - (1 : int)))) )))))) then (
            begin ensures {true} let _ = (let _ = ( (let j =  (val _f : int
           in _f) in (
            (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
             ()))
             in () end ;
            (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= j)) ((j <= ([#"lz77.adb" 23 0 0] ( [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__range__sub] [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                    (for all J in Input'First..I-1 =>                                                 ^ lz77.adb:23:49:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:23:49] (Standard__integer.range_check_((i - (1 : int)))) )))))) then (
              begin ensures {true} let _ = (let _ = ([#"lz77.adb" 24 0 0] ( [@GP_Sloc:lz77.adb:24:26] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt] [@GP_Id:22] [@comment:               Result(I) > Result(J))));                          ^ lz77.adb:24:26:VC_PRECONDITION] (Big_integers__Ogt.ogt((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) (( [#"lz77.adb" 24 0 0] assert { [#"lz77.adb" 24 0 0] ([#"lz77.adb" 24 0 0] ( [@comment:               Result(I) > Result(J))));                       ^ lz77.adb:24:23:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] [@GP_Sloc:lz77.adb:24:23] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= i) /\ (i <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
             i )))) ((Array__Int__Big_integers__big_integer.get(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((  assert {  ([#"lz77.adb" 24 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__pragargs__andthen__forall__forall__call_Ogt__ixdcomp] [@comment:               Result(I) > Result(J))));                                   ^ lz77.adb:24:35:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:24:35] [@GP_Id:21] ( ((Standard__integer__rep.to_rep Lz77__length_acc__result.result____first) <= j) /\ (j <= (Standard__integer__rep.to_rep Lz77__length_acc__result.result____last)) ) )) };
             j ))))) )) in (
              ()))
              in () end ))))
           ;
            (val _f : bool
           ensures { ( (result = True) <-> (forall j   [@model_trace:2439] [@name:J]  : int.
            ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content j)) = True) )) )} 
           in _f) ) in (
            ()))
            in () end ))))
         ;
          (val _f : bool
         ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2423]  : int.
          ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__length_acc__L_1__index.index.int__content - (1 : int))) ) -> (forall j   [@model_trace:2439] [@name:J]  : int.
           ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content i) (Array__Int__Big_integers__big_integer.get Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content j)) = True) )) )) )} 
         in _f) ) ) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )))
       )
     with
      Lz77__length_acc__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:lz77.adb:29:14] ([#"lz77.adb" 29 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:29:7] ([#"lz77.adb" 29 0 0] ( [#"lz77.adb" 29 0 0] (lz77__length_acc__result.Lz77__partial_length.partial_length__content <- ( (Lz77__partial_length.of_array(Lz77__length_acc__result.result__.Array__Int__Big_integers__big_integer.map__content) ((Standard__integer__rep.to_rep(Lz77__length_acc__result.result____first))) ((Standard__integer__rep.to_rep(Lz77__length_acc__result.result____last)))) ));
   [#"lz77.adb" 29 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ( ((  begin ensures {true} let _ = (let _ = lz77__length_acc__result.Lz77__partial_length.partial_length__content in (
   ()))
   in () end ;
  (Lz77__partial_length.length(lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) = (  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
   ()))
   in () end ;
  (Lz77__token_array.length(Lz77__length_acc__input.input)) )) && ((  begin ensures {true} let _ = (let _ = lz77__length_acc__result.Lz77__partial_length.partial_length__content in (
   ()))
   in () end ;
  (Lz77__partial_length.first(lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) = (  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
   ()))
   in () end ;
  (Lz77__token_array.first(Lz77__length_acc__input.input)) )) ) && ( (let i =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= i)) ((i <= (  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__length_acc__input.input)) ))))) then (
     begin ensures {true} let _ = (let _ = ( ([#"lz77.ads" 47 0 0] ( [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq] [@GP_Reason:VC_PRECONDITION] [@comment:        Length_Acc'Result(I)  =                               ^ lz77.ads:47:31:VC_PRECONDITION] [@vc:annotation] [@GP_Id:32] [@GP_Sloc:lz77.ads:47:31] (Big_integers__Oeq.oeq((Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(lz77__length_acc__result.Lz77__partial_length.partial_length__content))) (( [#"lz77.ads" 47 0 0] assert { [#"lz77.ads" 47 0 0] ([#"lz77.ads" 47 0 0] ( [@GP_Sloc:lz77.ads:47:27] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__ixdcomp] [@vc:annotation] [@comment:        Length_Acc'Result(I)  =                           ^ lz77.ads:47:27:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:24] ( ((Lz77__partial_length.first lz77__length_acc__result.Lz77__partial_length.partial_length__content) <= i) /\ (i <= (Lz77__partial_length.last lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) )) };
    i )))) (([#"lz77.ads" 48 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2] [@GP_Sloc:lz77.ads:49:45] [@vc:annotation] [@GP_Id:31] [@comment:            To_Big_Integer(Input(I).Length) + To_Big_Integer(One) and then                                             ^ lz77.ads:49:45:VC_PRECONDITION] (Big_integers__Oadd__2.oadd__2(([#"lz77.ads" 48 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_Oadd__2] [@vc:annotation] [@comment:          (if I = Input'First then Zero else Length_Acc'Result(I - 1)) +                                                                        ^ lz77.ads:48:72:VC_PRECONDITION] [@GP_Id:29] [@GP_Sloc:lz77.ads:48:72] (Big_integers__Oadd__2.oadd__2((if ((i = ( [#"lz77.ads" 48 0 0] begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
     ()))
     in () end ;
    (Lz77__token_array.first(Lz77__length_acc__input.input)) ))) then (
     Big_integers__zero.zero) else (
     (Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(lz77__length_acc__result.Lz77__partial_length.partial_length__content))) ((let temp___363 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.ads" 48 0 0] ( [@comment:          (if I = Input'First then Zero else Length_Acc'Result(I - 1)) +                                                                  ^ lz77.ads:48:66:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.ads:48:66] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@GP_Id:25] (Standard__integer.range_check_((i - (1 : int)))) )) in (
      (  assert {  ([#"lz77.ads" 48 0 0] ( [@comment:          (if I = Input'First then Zero else Length_Acc'Result(I - 1)) +                                                                  ^ lz77.ads:48:66:VC_INDEX_CHECK] [@GP_Sloc:lz77.ads:48:66] [@vc:annotation] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_Oadd__2__if__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:26] ( ((Lz77__partial_length.first lz77__length_acc__result.Lz77__partial_length.partial_length__content) <= temp___363) /\ (temp___363 <= (Lz77__partial_length.last lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) )) };
      temp___363 )))
     ))))) (([#"lz77.ads" 49 0 0] ( [@GP_Sloc:lz77.ads:49:13] [@GP_Reason:VC_PRECONDITION] [@comment:            To_Big_Integer(Input(I).Length) + To_Big_Integer(One) and then             ^ lz77.ads:49:13:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer] [@vc:annotation] [@GP_Id:28] (Big_integers__to_big_integer.to_big_integer((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__length_acc__input.input))) (( [#"lz77.ads" 49 0 0] assert { [#"lz77.ads" 49 0 0] ([#"lz77.ads" 49 0 0] ( [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_Oadd__2__call_to_big_integer__selectcomp__ixdcomp] [@vc:annotation] [@GP_Sloc:lz77.ads:49:34] [@comment:            To_Big_Integer(Input(I).Length) + To_Big_Integer(One) and then                                  ^ lz77.ads:49:34:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:27] ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__length_acc__input.input)) ) )) };
    i ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)))) )))) ))) (([#"lz77.ads" 49 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__forall__andthen__call_Oeq__call_Oadd__2__call_to_big_integer] [@GP_Sloc:lz77.ads:49:47] [@vc:annotation] [@GP_Id:30] [@comment:            To_Big_Integer(Input(I).Length) + To_Big_Integer(One) and then                                               ^ lz77.ads:49:47:VC_PRECONDITION] (Big_integers__to_big_integer.to_big_integer((1 : int))) )))) )))) )) && ( (let j =  (val _f : int
    in _f) in (
     (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Lz77__length_acc__input.input in (
      ()))
      in () end ;
     (Lz77__token_array.first(Lz77__length_acc__input.input)) ) <= j)) ((j <= ([#"lz77.ads" 50 0 0] ( [@GP_Sloc:lz77.ads:50:39] [@comment:          (for all J in Input'First..I-1 =>                                       ^ lz77.ads:50:39:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:33] [@GP_Shape:pragargs__andthen__forall__andthen__forall__range__sub] (Standard__integer.range_check_((i - (1 : int)))) )))))) then (
       begin ensures {true} let _ = (let _ = ([#"lz77.ads" 51 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:lz77.ads:51:37] [@GP_Id:36] [@comment:               Length_Acc'Result(I) > Length_Acc'Result(J)));                                     ^ lz77.ads:51:37:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__forall__andthen__forall__call_Ogt] (Big_integers__Ogt.ogt((Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(lz77__length_acc__result.Lz77__partial_length.partial_length__content))) (( [#"lz77.ads" 51 0 0] assert { [#"lz77.ads" 51 0 0] ([#"lz77.ads" 51 0 0] ( [@vc:annotation] [@GP_Sloc:lz77.ads:51:34] [@GP_Id:34] [@GP_Reason:VC_INDEX_CHECK] [@comment:               Length_Acc'Result(I) > Length_Acc'Result(J)));                                  ^ lz77.ads:51:34:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__andthen__forall__call_Ogt__ixdcomp] ( ((Lz77__partial_length.first lz77__length_acc__result.Lz77__partial_length.partial_length__content) <= i) /\ (i <= (Lz77__partial_length.last lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) )) };
      i )))) ((Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(lz77__length_acc__result.Lz77__partial_length.partial_length__content))) ((  assert {  ([#"lz77.ads" 51 0 0] ( [@comment:               Length_Acc'Result(I) > Length_Acc'Result(J)));                                                         ^ lz77.ads:51:57:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:35] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__andthen__forall__andthen__forall__call_Ogt__ixdcomp] [@GP_Sloc:lz77.ads:51:57] ( ((Lz77__partial_length.first lz77__length_acc__result.Lz77__partial_length.partial_length__content) <= j) /\ (j <= (Lz77__partial_length.last lz77__length_acc__result.Lz77__partial_length.partial_length__content)) ) )) };
      j ))))) )) in (
       ()))
       in () end ))))
    ;
     (val _f : bool
    ensures { ( (result = True) <-> (forall j   [@model_trace:3338] [@name:J]  : int.
     ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:3359] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) j)) = True) ) )) )} 
    in _f) ) ) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@model_trace:3294] [@name:I]  : int.
   ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__length_acc__input.input)) ) -> ( ( [@GP_Pretty_Ada:3309] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first Lz77__length_acc__input.input))) then (
    Big_integers__zero.zero) else (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__length_acc__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j   [@model_trace:3338] [@name:J]  : int.
    ( ( ((Lz77__token_array.first Lz77__length_acc__input.input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:3359] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array lz77__length_acc__result.Lz77__partial_length.partial_length__content) j)) = True) ) )) ) )) )} 
  in _f) ) ) in (
   ()))
   in () end ;
  lz77__length_acc__result.Lz77__partial_length.partial_length__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decoded_length" defined at lz77.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__decoded_length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__decoded_length__input as Lz77__decoded_length__input
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__decoded_length__input___axiom as Lz77__decoded_length__input___axiom

 val lz77__decoded_length__result [@model_trace:3364@result] [@model_projected] [@name:Decoded_Length]  : Big_integers__big_integer.big_integer__ref 
 
 let def [#"lz77.ads" 54 0 0][@GP_Subp:lz77.ads:54] 
   (__void_param : unit)
  requires { [#"lz77.ads" 54 0 0] true }
   = [@vc:divergent]
  ( [#"lz77.ads" 54 0 0] assume { [#"lz77.ads" 54 0 0] (Big_integers__big_integer.dynamic_invariant Big_integers__zero.zero True False True True) };
  () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:54 *)
  ;
  [#"lz77.ads" 54 0 0] assume { [#"lz77.ads" 54 0 0] (Lz77__token_array___axiom.dynamic_invariant Lz77__decoded_length__input.input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:54 *)
  ;
  [#"lz77.ads" 54 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:54 *)
  ;
  [#"lz77.ads" 54 0 0] try
   ( ();
   ( [@GP_Sloc:lz77.ads:58:8] ([#"lz77.ads" 58 0 0] ( [#"lz77.ads" 58 0 0] (lz77__decoded_length__result.Big_integers__big_integer.big_integer__content <- ( (if ((( [#"lz77.ads" 58 0 0] begin ensures {true} let _ = (let _ = Lz77__decoded_length__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.length(Lz77__decoded_length__input.input)) ) = (0 : int))) then (
    Big_integers__zero.zero) else (
    (let temp___365 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.ads" 58 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:   is (if Input'Length = 0 then Zero else Length_Acc(Input)(Input'Last));                                           ^ lz77.ads:58:43:VC_PRECONDITION] [@GP_Shape:return__if__ixdcomp__call_length_acc] [@GP_Id:38] [@GP_Sloc:lz77.ads:58:43] (Lz77__length_acc___axiom.length_acc(Lz77__decoded_length__input.input)) )) in (
     (Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(temp___365))) ((let temp___366 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = Lz77__decoded_length__input.input in (
      ()))
      in () end ;
     (Lz77__token_array.last(Lz77__decoded_length__input.input)) ) in (
      (  assert {  ([#"lz77.ads" 58 0 0] ( [@GP_Sloc:lz77.ads:58:66] [@vc:annotation] [@comment:   is (if Input'Length = 0 then Zero else Length_Acc(Input)(Input'Last));                                                                  ^ lz77.ads:58:66:VC_INDEX_CHECK] [@GP_Shape:return__if__ixdcomp__last_ref] [@GP_Id:39] [@GP_Reason:VC_INDEX_CHECK] ( ((Lz77__partial_length.first temp___365) <= temp___366) /\ (temp___366 <= (Lz77__partial_length.last temp___365)) ) )) };
      temp___366 )))
     ))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  lz77__decoded_length__result.Big_integers__big_integer.big_integer__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "valid" defined at lz77.ads:65, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__valid__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__valid__input as Lz77__valid__input
 use        Lz77__valid__upto as Lz77__valid__upto
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Ole as Big_integers__Ole
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__in_range as Big_integers__in_range
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__valid__input___axiom as Lz77__valid__input___axiom
 use        Lz77__valid__upto___axiom as Lz77__valid__upto___axiom

 val lz77__valid__result [@name:Valid] [@model_trace:3420@result] [@model_projected]  : bool__ref 
 
 let def [#"lz77.ads" 65 0 0][@GP_Subp:lz77.ads:65] 
   (__void_param : unit)
  requires { [#"lz77.ads" 65 0 0] true }
   = [@vc:divergent]
  ( [#"lz77.ads" 65 0 0] assume { [#"lz77.ads" 65 0 0] (Big_integers__big_integer.dynamic_invariant Big_integers__zero.zero True False True True) };
  () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:65 *)
  ;
  [#"lz77.ads" 65 0 0] assume { [#"lz77.ads" 65 0 0] (Lz77__token_array___axiom.dynamic_invariant Lz77__valid__input.input True False True True) };
  [#"lz77.ads" 65 0 0] assume { [#"lz77.ads" 65 0 0] (Standard__integer___axiom.dynamic_invariant Lz77__valid__upto.upto True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:65 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:65 *)
  ;
  [#"lz77.ads" 65 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:65 *)
  ;
  [#"lz77.ads" 65 0 0] try
   ( ();
   ( [@GP_Sloc:lz77.ads:70:26] ([#"lz77.ads" 70 0 0] ( [#"lz77.ads" 70 0 0] (lz77__valid__result.bool__content <- ( ( (Lz77__valid__upto.upto <= ( [#"lz77.ads" 70 0 0] begin ensures {true} let _ = (let _ = Lz77__valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__valid__input.input)) )) && ( (( [#"lz77.ads" 70 0 0] begin ensures {true} let _ = (let _ = Lz77__valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.length(Lz77__valid__input.input)) ) = (0 : int)) || ( (let i = [#"lz77.ads" 70 0 0] (val _f : int
   in _f) in (
    (if ((Boolean.andb((( [#"lz77.ads" 70 0 0] begin ensures {true} let _ = (let _ = Lz77__valid__input.input in (
     ()))
     in () end ;
    (Lz77__token_array.first(Lz77__valid__input.input)) ) <= i)) ((i <= Lz77__valid__upto.upto)))) then (
     [#"lz77.ads" 70 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb(([#"lz77.ads" 73 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:44] [@GP_Shape:return__andthen__orelse__forall__and__call_in_range] [@vc:annotation] [@comment:              In_Range(Arg => Length_Acc(Input)(I),               ^ lz77.ads:73:15:VC_PRECONDITION] [@GP_Sloc:lz77.ads:73:15] (Big_integers__in_range.in_range((let temp___368 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.ads" 73 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:40] [@GP_Shape:return__andthen__orelse__forall__and__call_in_range__ixdcomp__call_length_acc] [@GP_Sloc:lz77.ads:73:31] [@vc:annotation] [@comment:              In_Range(Arg => Length_Acc(Input)(I),                               ^ lz77.ads:73:31:VC_PRECONDITION] (Lz77__length_acc___axiom.length_acc(Lz77__valid__input.input)) )) in (
      (Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(temp___368))) ((  assert {  ([#"lz77.ads" 73 0 0] ( [@GP_Sloc:lz77.ads:73:49] [@GP_Id:41] [@vc:annotation] [@comment:              In_Range(Arg => Length_Acc(Input)(I),                                                 ^ lz77.ads:73:49:VC_INDEX_CHECK] [@GP_Shape:return__andthen__orelse__forall__and__call_in_range__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((Lz77__partial_length.first temp___368) <= i) /\ (i <= (Lz77__partial_length.last temp___368)) ) )) };
      i )))))
     ) (([#"lz77.ads" 74 0 0] ( [@comment:                       Low => To_Big_Integer(One),                               ^ lz77.ads:74:31:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:42] [@vc:annotation] [@GP_Shape:return__andthen__orelse__forall__and__call_in_range__call_to_big_integer] [@GP_Sloc:lz77.ads:74:31] (Big_integers__to_big_integer.to_big_integer((1 : int))) ))) (([#"lz77.ads" 75 0 0] ( [@GP_Sloc:lz77.ads:75:32] [@GP_Reason:VC_PRECONDITION] [@GP_Id:43] [@vc:annotation] [@GP_Shape:return__andthen__orelse__forall__and__call_in_range__call_to_big_integer] [@comment:                       High => To_Big_Integer(Integer'Last)) and                                ^ lz77.ads:75:32:VC_PRECONDITION] (Big_integers__to_big_integer.to_big_integer((2147483647 : int))) )))) ))) (([#"lz77.ads" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:           To_Big_Integer(Input(I).Offset) <=                                            ^ lz77.ads:76:44:VC_PRECONDITION] [@GP_Sloc:lz77.ads:76:44] [@vc:annotation] [@GP_Shape:return__andthen__orelse__forall__and__call_Ole] [@GP_Id:50] (Big_integers__Ole.ole(([#"lz77.ads" 76 0 0] ( [@comment:           To_Big_Integer(Input(I).Offset) <=            ^ lz77.ads:76:12:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:lz77.ads:76:12] [@GP_Shape:return__andthen__orelse__forall__and__call_Ole__call_to_big_integer] [@GP_Id:46] [@vc:annotation] (Big_integers__to_big_integer.to_big_integer((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__valid__input.input))) (( [#"lz77.ads" 76 0 0] assert { [#"lz77.ads" 76 0 0] ([#"lz77.ads" 76 0 0] ( [@GP_Id:45] [@vc:annotation] [@GP_Shape:return__andthen__orelse__forall__and__call_Ole__call_to_big_integer__selectcomp__ixdcomp] [@GP_Sloc:lz77.ads:76:33] [@GP_Reason:VC_INDEX_CHECK] [@comment:           To_Big_Integer(Input(I).Offset) <=                                 ^ lz77.ads:76:33:VC_INDEX_CHECK] ( ((Lz77__token_array.first Lz77__valid__input.input) <= i) /\ (i <= (Lz77__token_array.last Lz77__valid__input.input)) ) )) };
     i ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)))) ))) ((if ((i = (  begin ensures {true} let _ = (let _ = Lz77__valid__input.input in (
      ()))
      in () end ;
     (Lz77__token_array.first(Lz77__valid__input.input)) ))) then (
      Big_integers__zero.zero) else (
      (let temp___369 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.ads" 77 0 0] ( [@GP_Shape:return__andthen__orelse__forall__and__call_Ole__if__ixdcomp__call_length_acc] [@GP_Reason:VC_PRECONDITION] [@GP_Id:47] [@vc:annotation] [@comment:         (if I = Input'First then Zero else Length_Acc(Input)(I-1))                                             ^ lz77.ads:77:45:VC_PRECONDITION] [@GP_Sloc:lz77.ads:77:45] (Lz77__length_acc___axiom.length_acc(Lz77__valid__input.input)) )) in (
       (Array__Int__Big_integers__big_integer.get((Lz77__partial_length.to_array(temp___369))) ((let temp___370 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.ads" 77 0 0] ( [@GP_Sloc:lz77.ads:77:64] [@GP_Shape:return__andthen__orelse__forall__and__call_Ole__if__ixdcomp__sub] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         (if I = Input'First then Zero else Length_Acc(Input)(I-1))                                                                ^ lz77.ads:77:64:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((i - (1 : int)))) )) in (
        (  assert {  ([#"lz77.ads" 77 0 0] ( [@GP_Sloc:lz77.ads:77:64] [@GP_Shape:return__andthen__orelse__forall__and__call_Ole__if__ixdcomp__sub] [@vc:annotation] [@GP_Id:49] [@GP_Reason:VC_INDEX_CHECK] [@comment:         (if I = Input'First then Zero else Length_Acc(Input)(I-1))                                                                ^ lz77.ads:77:64:VC_INDEX_CHECK] ( ((Lz77__partial_length.first temp___369) <= temp___370) /\ (temp___370 <= (Lz77__partial_length.last temp___369)) ) )) };
        temp___370 )))
       ))))
     )))) )))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:3493] [@name:I]  : int.
    ( ( ((Lz77__token_array.first Lz77__valid__input.input) <= i) /\ (i <= Lz77__valid__upto.upto) ) -> ( ((Big_integers__in_range.in_range__logic (let temp___372 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_371 : Lz77__partial_length.partial_length.
     ( (temp___result_371 = (Lz77__length_acc.length_acc Lz77__valid__input.input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_371 Lz77__valid__input.input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___372) i)))
     (Big_integers__to_big_integer.to_big_integer__logic (1 : int)) (Big_integers__to_big_integer.to_big_integer__logic (2147483647 : int))) = True) /\ ((Big_integers__Ole.ole__logic (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__valid__input.input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) (if ((i = (Lz77__token_array.first Lz77__valid__input.input))) then (
     Big_integers__zero.zero) else (
     (let temp___374 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_373 : Lz77__partial_length.partial_length.
      ( (temp___result_373 = (Lz77__length_acc.length_acc Lz77__valid__input.input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_373 Lz77__valid__input.input) )) in (
      (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___374) (i - (1 : int)))))
    ))) = True) ) )) )} 
   in _f) ) ) ) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  lz77__valid__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put" defined at lz77.ads:86, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__put__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Standard__string as Standard__string
 use        Lz77__token as Lz77__token
 use        Lz77__put__t as Lz77__put__t
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__integer_text_io__default_width as Ada__integer_text_io__default_width
 use        Ada__integer_text_io__default_base as Ada__integer_text_io__default_base
 use        Ada__integer_text_io__put__2___axiom as Ada__integer_text_io__put__2___axiom
 use        Ada__text_io__new_line__2___axiom as Ada__text_io__new_line__2___axiom
 use        Ada__text_io__put__2___axiom as Ada__text_io__put__2___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Ada__text_io__field___axiom as Ada__text_io__field___axiom
 use        Ada__text_io__number_base___axiom as Ada__text_io__number_base___axiom
 use        Temp___String_Literal_376 as Temp___String_Literal_376
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_377 as Temp___String_Literal_377
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_378 as Temp___String_Literal_378
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__put__t___axiom as Lz77__put__t___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__field___axiom as Ada__text_io__field___axiom
 use        Ada__text_io__number_base___axiom as Ada__text_io__number_base___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__new_line__2___axiom as Ada__text_io__new_line__2___axiom
 use        Ada__text_io__put__2___axiom as Ada__text_io__put__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__integer_text_io__default_width___axiom as Ada__integer_text_io__default_width___axiom
 use        Ada__integer_text_io__default_base___axiom as Ada__integer_text_io__default_base___axiom
 use        Ada__integer_text_io__put__2___axiom as Ada__integer_text_io__put__2___axiom

 let def [#"lz77.ads" 86 0 0][@GP_Subp:lz77.ads:86] 
   (__void_param : unit)
  requires { [#"lz77.ads" 86 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:86 *)
  ;
  [#"lz77.ads" 86 0 0] assume { [#"lz77.ads" 86 0 0] (Lz77__token___axiom.dynamic_invariant Lz77__put__t.t True False True True) };
  [#"lz77.ads" 86 0 0] assume { [#"lz77.ads" 86 0 0] (Ada__text_io__field___axiom.dynamic_invariant Ada__integer_text_io__default_width.default_width.int__content True False True True) };
  [#"lz77.ads" 86 0 0] assume { [#"lz77.ads" 86 0 0] (Ada__text_io__number_base___axiom.dynamic_invariant Ada__integer_text_io__default_base.default_base.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:86 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:86 *)
  ;
  [#"lz77.ads" 86 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:86 *)
  ;
  [#"lz77.ads" 86 0 0] try
   ( ();
   ( [@GP_Sloc:lz77.adb:34:7] ([#"lz77.adb" 34 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:34:7] ([#"lz77.adb" 34 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_376.temp___String_Literal_376(()))) ((1 : int)) ((8 : int))))) )) );
   ( [@GP_Sloc:lz77.adb:34:24] ([#"lz77.adb" 34 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:34:24] ([#"lz77.adb" 34 0 0] ( (Ada__integer_text_io__put__2___axiom.put__2((Standard__natural__rep.to_rep(Lz77__put__t.t.Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))) (Ada__integer_text_io__default_width.default_width.int__content) (Ada__integer_text_io__default_base.default_base.int__content)) )) );
   ( [@GP_Sloc:lz77.adb:34:39] ([#"lz77.adb" 34 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:34:39] ([#"lz77.adb" 34 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) );
   ( [@GP_Sloc:lz77.adb:35:7] ([#"lz77.adb" 35 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:35:7] ([#"lz77.adb" 35 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_377.temp___String_Literal_377(()))) ((1 : int)) ((8 : int))))) )) );
   ( [@GP_Sloc:lz77.adb:35:24] ([#"lz77.adb" 35 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:35:24] ([#"lz77.adb" 35 0 0] ( (Ada__integer_text_io__put__2___axiom.put__2((Standard__natural__rep.to_rep(Lz77__put__t.t.Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Ada__integer_text_io__default_width.default_width.int__content) (Ada__integer_text_io__default_base.default_base.int__content)) )) );
   ( [@GP_Sloc:lz77.adb:35:39] ([#"lz77.adb" 35 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:35:39] ([#"lz77.adb" 35 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) );
   ( [@GP_Sloc:lz77.adb:36:7] ([#"lz77.adb" 36 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:36:7] ([#"lz77.adb" 36 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_378.temp___String_Literal_378(()))) ((1 : int)) ((8 : int))))) )) );
   ( [@GP_Sloc:lz77.adb:36:24] ([#"lz77.adb" 36 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:36:24] ([#"lz77.adb" 36 0 0] ( (Ada__text_io__put__2___axiom.put__2((Standard__character__rep.to_rep(Lz77__put__t.t.Lz77__token.__split_fields.Lz77__token.rec__lz77__token__next_c)))) )) );
   ( [@GP_Sloc:lz77.adb:36:39] ([#"lz77.adb" 36 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:36:39] ([#"lz77.adb" 36 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decode" defined at lz77.ads:94, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__decode__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__token as Lz77__token
 use        Lz77__decode__input as Lz77__decode__input
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Lz77__decode__output as Lz77__decode__output
 use        Lz77__decode__output_length as Lz77__decode__output_length
 use        Lz77__decode__error as Lz77__decode__error
 use        Lz77__decode__L_2__index as Lz77__decode__L_2__index
 use        Lz77__decode__L_3__R24b as Lz77__decode__L_3__R24b
 use        Lz77__decode__L_3__tokenindex as Lz77__decode__L_3__tokenindex
 use        Lz77__byte_array as Lz77__byte_array
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__decode__L_2 as Lz77__decode__L_2
 use        Lz77__decode__L_2__T23b as Lz77__decode__L_2__T23b
 use        Lz77__decode__L_3 as Lz77__decode__L_3
 use        Lz77__decode__L_3__T25b as Lz77__decode__L_3__T25b
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__decode__L_2__index___axiom as Lz77__decode__L_2__index___axiom
 use        Lz77__decode__L_3__tokenindex___axiom as Lz77__decode__L_3__tokenindex___axiom
 use        Lz77__decode__L_3___axiom as Lz77__decode__L_3___axiom
 use        Lz77__decode__L_2___axiom as Lz77__decode__L_2___axiom
 use        Lz77__byte_array___axiom as Lz77__byte_array___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__decode__input___axiom as Lz77__decode__input___axiom
 use        Lz77__decode__output___axiom as Lz77__decode__output___axiom
 use        Lz77__decode__output_length___axiom as Lz77__decode__output_length___axiom
 use        Lz77__decode__error___axiom as Lz77__decode__error___axiom
 use        Lz77__decode__L_2__T23b___axiom as Lz77__decode__L_2__T23b___axiom
 use        Lz77__decode__L_3__R24b___axiom as Lz77__decode__L_3__R24b___axiom
 use        Lz77__decode__L_3__T25b___axiom as Lz77__decode__L_3__T25b___axiom

 exception Temp___exception_383
 
 exception Temp___exception_393
 
 let def [#"lz77.ads" 94 0 0][@GP_Subp:lz77.ads:94] 
   (__void_param : unit)
  requires { [#"lz77.ads" 94 0 0] true }
  ensures { [#"lz77.ads" 94 0 0] ([#"lz77.ads" 96 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     with Post => (if Error then Output_Length = 0 else True);                   ^ lz77.ads:96:19:VC_POSTCONDITION] [@GP_Sloc:lz77.ads:96:19] [@GP_Id:63] [@model_vc_post] [@GP_Shape:pragargs__if] (if ((Lz77__decode__error.error.bool__content = True)) then (
   ( [@GP_Sloc:lz77.ads:96:34] [@GP_Pretty_Ada:3620] (Lz77__decode__output_length.output_length.int__content = (0 : int)) )) else (
   ( [@GP_Pretty_Ada:3621] [@GP_Sloc:lz77.ads:96:57] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:94 *)
  ;
   assume {  (Lz77__token_array___axiom.dynamic_invariant Lz77__decode__input.input True False True True) };
   assume {  (if (False) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode__output.output__first) (Standard__integer__rep.to_rep Lz77__decode__output.output__last)))) };
   assume {  (Standard__natural___axiom.dynamic_invariant Lz77__decode__output_length.output_length.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:94 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:94 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:94 *)
  ;
   try
   ( ();
   ([#"lz77.adb" 51 0 0] ());
   ([#"lz77.adb" 51 0 0] ());
   ([#"lz77.adb" 63 0 0] ());
   ([#"lz77.adb" 60 0 0] ());
   ();
   ( [@GP_Sloc:lz77.adb:56:21] ([#"lz77.adb" 56 0 0] [#"lz77.adb" 56 0 0] (Lz77__decode__output_length.output_length.int__content <- ( (0 : int) ))) );
   ( [@GP_Sloc:lz77.adb:57:13] ([#"lz77.adb" 57 0 0] [#"lz77.adb" 57 0 0] (Lz77__decode__error.error.bool__content <- ( (Boolean.of_int((0 : int))) ))) );
   ( [@GP_Sloc:lz77.adb:60:32] ([#"lz77.adb" 60 0 0] (let temp___379 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.first(Lz77__decode__input.input)) ) in (
   (let temp___380 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__decode__input.input)) ) in (
    ( [#"lz77.adb" 60 0 0] (Lz77__decode__L_2__index.index.int__content <- ( temp___379 ));
    () (* Translation of an Ada loop from lz77.adb:60 *)
    ;
    (if ((Boolean.andb((temp___379 <= Lz77__decode__L_2__index.index.int__content)) ((Lz77__decode__L_2__index.index.int__content <= temp___380)))) then (
     [#"lz77.adb" 60 0 0] try
      [#"lz77.adb" 60 0 0] try
       ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__error.error.bool__content in (
        ()))
        in () end ;
       (let temp___399 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 60 0 0] (val _f : bool
       ensures {[#"lz77.adb" 60 0 0] (result = Lz77__decode__error.error.bool__content)} 
       in _f) in (
        ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output_length.output_length.int__content in (
         ()))
         in () end ;
        (let temp___398 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 60 0 0] (val _f : int
        ensures {[#"lz77.adb" 60 0 0] (result = Lz77__decode__output_length.output_length.int__content)} 
        in _f) in (
         ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
          ()))
          in () end ;
         (let temp___396 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 60 0 0] (val _f : Array__Int__Standard__character.map
         ensures {[#"lz77.adb" 60 0 0] (result = Lz77__decode__output.output.Array__Int__Standard__character.map__content)} 
         in _f) in (
          ( [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__L_2__index.index.int__content in (
           ()))
           in () end ;
          (let temp___394 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 60 0 0] (val _f : int
          ensures {[#"lz77.adb" 60 0 0] (result = Lz77__decode__L_2__index.index.int__content)} 
          in _f) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:60 *)
           ;
           () (* While loop translating the Ada loop from lz77.adb:60 *)
           ;
           (let temp___inv_400 [@mlw:proxy_symbol] [@introduced] = (if (Lz77__decode__error.error.bool__content) then (
            (Lz77__decode__output_length.output_length.int__content = (0 : int))) else (
            (Boolean.of_int((1 : int))))) in (
            [#"lz77.adb" 60 0 0] begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
           ;
           [#"lz77.adb" 60 0 0] while True do
            invariant { 
             ([#"lz77.adb" 61 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant (if Error then Output_Length = 0 else True);                                 ^ lz77.adb:61:33:VC_LOOP_INVARIANT] [@GP_Sloc:lz77.adb:61:33] [@GP_Id:62] [@GP_Shape:L_2_while__pragargs__if] (if ((Lz77__decode__error.error.bool__content = True)) then (
              ( [@GP_Pretty_Ada:2615] [@GP_Sloc:lz77.adb:61:47] (Lz77__decode__output_length.output_length.int__content = (0 : int)) )) else (
              ( [@GP_Pretty_Ada:2616] [@GP_Sloc:lz77.adb:61:70] true ))) ))
             }
            ( () (* Assume implicit invariants from the loop lz77.adb:60 *)
            ;
             assume {  (Boolean.andb(( ( ( ( ( ( ( ( true /\ (if (( True \/ ((Lz77__token_array.first Lz77__decode__input.input) <= (Lz77__token_array.last Lz77__decode__input.input)) )) then (
             (Lz77__decode__L_2__T23b.dynamic_property (Lz77__token_array.first Lz77__decode__input.input) (Lz77__token_array.last Lz77__decode__input.input) Lz77__decode__L_2__index.index.int__content)) else true) )/\true ) /\ (if (True) then (
             true) else (
             (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode__output.output__first) (Standard__integer__rep.to_rep Lz77__decode__output.output__last)))) )/\(forall temp___397   : int.
             (if (( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= temp___397) /\ (temp___397 <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) )) then (
              (if (( false /\ false )) then (
               ((Array__Int__Standard__character.get Lz77__decode__output.output.Array__Int__Standard__character.map__content temp___397) = (Array__Int__Standard__character.get temp___396 temp___397))) else (
               true))) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode__output_length.output_length.int__content False True True True) )/\true ) /\ true )/\true )) (( ((Lz77__token_array.first Lz77__decode__input.input) <= Lz77__decode__L_2__index.index.int__content) /\ (Lz77__decode__L_2__index.index.int__content <= (Lz77__token_array.last Lz77__decode__input.input)) ))) };
            () (* Check for absence of RTE in the invariant of loop lz77.adb:60 *)
            ;
            () (* Loop statements appearing after the loop invariant of loop lz77.adb:60 *)
            ;
            ();
            ( [@GP_Sloc:lz77.adb:63:43] ([#"lz77.adb" 63 0 0] ([#"lz77.adb" 63 0 0] ( (let lz77__decode__L_3__R24b__assume = (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)) in (
             [#"lz77.adb" 63 0 0] assume { [#"lz77.adb" 63 0 0] (lz77__decode__L_3__R24b__assume = Lz77__decode__L_3__R24b.r24b) }))
            ;
            [#"lz77.adb" 63 0 0] assume { [#"lz77.adb" 63 0 0] (Standard__natural___axiom.dynamic_invariant Lz77__decode__L_3__R24b.r24b True False True True) } ))) );
            ( [@GP_Sloc:lz77.adb:63:51] ([#"lz77.adb" 63 0 0] (let temp___381 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
            (let temp___382 [@mlw:proxy_symbol] [@introduced] = Lz77__decode__L_3__R24b.r24b in (
             ( [#"lz77.adb" 63 0 0] (Lz77__decode__L_3__tokenindex.tokenindex.int__content <- ( temp___381 ));
             () (* Translation of an Ada loop from lz77.adb:63 *)
             ;
             (if ((Boolean.andb((temp___381 <= Lz77__decode__L_3__tokenindex.tokenindex.int__content)) ((Lz77__decode__L_3__tokenindex.tokenindex.int__content <= temp___382)))) then (
              [#"lz77.adb" 63 0 0] try
               [#"lz77.adb" 63 0 0] try
                ( [#"lz77.adb" 63 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__error.error.bool__content in (
                 ()))
                 in () end ;
                (let temp___390 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 63 0 0] (val _f : bool
                ensures {[#"lz77.adb" 63 0 0] (result = Lz77__decode__error.error.bool__content)} 
                in _f) in (
                 ( [#"lz77.adb" 63 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output_length.output_length.int__content in (
                  ()))
                  in () end ;
                 (let temp___389 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 63 0 0] (val _f : int
                 ensures {[#"lz77.adb" 63 0 0] (result = Lz77__decode__output_length.output_length.int__content)} 
                 in _f) in (
                  ( [#"lz77.adb" 63 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  (let temp___387 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 63 0 0] (val _f : Array__Int__Standard__character.map
                  ensures {[#"lz77.adb" 63 0 0] (result = Lz77__decode__output.output.Array__Int__Standard__character.map__content)} 
                  in _f) in (
                   ( [#"lz77.adb" 63 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__L_3__tokenindex.tokenindex.int__content in (
                    ()))
                    in () end ;
                   (let temp___385 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 63 0 0] (val _f : int
                   ensures {[#"lz77.adb" 63 0 0] (result = Lz77__decode__L_3__tokenindex.tokenindex.int__content)} 
                   in _f) in (
                    ( [#"lz77.adb" 63 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output_length.output_length.int__content in (
                     ()))
                     in () end ;
                    (let temp___392 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 63 0 0] (val _f : int
                    ensures {[#"lz77.adb" 63 0 0] (result = Lz77__decode__output_length.output_length.int__content)} 
                    in _f) in (
                     ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:63 *)
                     ;
                     ();
                     ( [@GP_Sloc:lz77.adb:64:11] ([#"lz77.adb" 64 0 0] (if (( ([#"lz77.adb" 64 0 0] [#"lz77.adb" 64 0 0] (([@branch_id=2637] Main.spark__branch).bool__content <- ( (Lz77__decode__output_length.output_length.int__content < (2147483646 : int)) )));
                     ( [@branch_id=2637] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:lz77.adb:65:13] ([#"lz77.adb" 65 0 0] (if (( ([#"lz77.adb" 65 0 0] [#"lz77.adb" 65 0 0] (([@branch_id=2645] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.orb((Lz77__decode__output_length.output_length.int__content = ([#"lz77.adb" 65 0 0] ( [@vc:annotation] [@GP_Sloc:lz77.adb:65:38] [@comment:            if Output_Length = Output'Length or                                       ^ lz77.adb:65:38:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__typeconv__length_ref] [@GP_Id:55] (Standard__integer.range_check_(( [#"lz77.adb" 65 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                       ()))
                       in () end ;
                      (Integer.length((Standard__integer__rep.to_rep(Lz77__decode__output.output__first))) ((Standard__integer__rep.to_rep(Lz77__decode__output.output__last)))) ))) )))) ((([#"lz77.adb" 66 0 0] ( [@GP_Sloc:lz77.adb:66:51] [@GP_Id:57] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:              Output_Length - Input(Index).Offset + 1 < Output'First or Error                                                   ^ lz77.adb:66:51:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__add] (Standard__integer.range_check_((([#"lz77.adb" 66 0 0] ( [@comment:              Output_Length - Input(Index).Offset + 1 < Output'First or Error                             ^ lz77.adb:66:29:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:66:29] [@GP_Id:56] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) + (1 : int)))) )) < (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                       ()))
                       in () end ;
                      Lz77__decode__output.output__first ))))))) (Lz77__decode__error.error.bool__content)) )));
                      ( [@branch_id=2645] Main.spark__branch ).bool__content )) then (
                        raise Temp___exception_383) else (
                       ( ();
                       ( [@GP_Sloc:lz77.adb:72:30] ([#"lz77.adb" 72 0 0] [#"lz77.adb" 72 0 0] (Lz77__decode__output_length.output_length.int__content <- ( ([#"lz77.adb" 72 0 0] ( [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:72:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__L_3_while__if__if__output_length_assign__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:51] [@GP_Sloc:lz77.adb:72:47] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content + (1 : int)))) )) ))) );
                       ( [@GP_Sloc:lz77.adb:73:16] ([#"lz77.adb" 73 0 0] (if (( ([#"lz77.adb" 73 0 0] [#"lz77.adb" 73 0 0] (([@branch_id=2679] Main.spark__branch).bool__content <- ( (Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 73 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                        ()))
                        in () end ;
                       Lz77__decode__output.output__last )))) )));
                       ( [@branch_id=2679] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:lz77.adb:74:41] ([#"lz77.adb" 74 0 0] [#"lz77.adb" 74 0 0] (Lz77__decode__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 74 0 0] assert { [#"lz77.adb" 74 0 0] ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:26] [@vc:annotation] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                          ^ lz77.adb:74:26:VC_INDEX_CHECK] [@GP_Id:54] ( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= Lz77__decode__output_length.output_length.int__content) /\ (Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )) };
                        Lz77__decode__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode__output.output.Array__Int__Standard__character.map__content) ((let temp___384 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:65] [@vc:annotation] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                                 ^ lz77.adb:74:65:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp__sub] [@GP_Id:52] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                         (  assert {  ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:65] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp__sub] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                                 ^ lz77.adb:74:65:VC_INDEX_CHECK] [@GP_Id:53] ( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= temp___384) /\ (temp___384 <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )) };
                         temp___384 )))
                        )))))))) ))) ) )) else (
                        ()))) ) )))) ) )) else (
                      ()))) );
                     () (* While loop translating the Ada loop from lz77.adb:63 *)
                     ;
                     (let temp___inv_391 [@mlw:proxy_symbol] [@introduced] = (if ((Boolean.andb((Lz77__decode__output_length.output_length.int__content < ((2147483647 : int) - Lz77__decode__L_3__tokenindex.tokenindex.int__content))) (not ( Lz77__decode__error.error.bool__content )))) then (
                      (Lz77__decode__output_length.output_length.int__content = ([#"lz77.adb" 79 0 0] ( [@GP_Id:58] [@comment:         pragma Loop_Invariant ( if Output_Length < Natural'Last - TokenIndex and not Error then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                                            ^ lz77.adb:79:139:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__pragargs__if__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:79:139] (Standard__integer.range_check_((temp___392 + Lz77__decode__L_3__tokenindex.tokenindex.int__content))) )))) else (
                      (Boolean.of_int((1 : int))))) in (
                       begin ensures {true} let _ = (let _ = () in (
                       ()))
                       in () end ))
                     ;
                      while True do
                      invariant { 
                       ([#"lz77.adb" 79 0 0] ( [@GP_Id:59] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Shape:L_2_while__L_3_while__pragargs__if] [@vc:annotation] [@comment:         pragma Loop_Invariant ( if Output_Length < Natural'Last - TokenIndex and not Error then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                   ^ lz77.adb:79:34:VC_LOOP_INVARIANT] [@GP_Sloc:lz77.adb:79:34] (if (( (Lz77__decode__output_length.output_length.int__content < ((2147483647 : int) - Lz77__decode__L_3__tokenindex.tokenindex.int__content)) /\ not ( (Lz77__decode__error.error.bool__content = True) ) )) then (
                        ( [@GP_Sloc:lz77.adb:79:98] [@GP_Pretty_Ada:2713] (Lz77__decode__output_length.output_length.int__content = (temp___392 + Lz77__decode__L_3__tokenindex.tokenindex.int__content)) )) else (
                        ( [@GP_Pretty_Ada:23037] [@GP_Sloc:lz77.adb:79:34] true ))) ))
                       }
                      ( () (* Assume implicit invariants from the loop lz77.adb:63 *)
                      ;
                       assume {  (Boolean.andb(( ( ( ( ( ( ( ( true /\ (if (( True \/ ((1 : int) <= Lz77__decode__L_3__R24b.r24b) )) then (
                       (Lz77__decode__L_3__T25b.dynamic_property (1 : int) Lz77__decode__L_3__R24b.r24b Lz77__decode__L_3__tokenindex.tokenindex.int__content)) else true) )/\true ) /\ (if (True) then (
                       true) else (
                       (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode__output.output__first) (Standard__integer__rep.to_rep Lz77__decode__output.output__last)))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode__output_length.output_length.int__content False True True True) )/\true ) /\ true )/\true )) (( ((1 : int) <= Lz77__decode__L_3__tokenindex.tokenindex.int__content) /\ (Lz77__decode__L_3__tokenindex.tokenindex.int__content <= Lz77__decode__L_3__R24b.r24b) ))) };
                      () (* Check for absence of RTE in the invariant of loop lz77.adb:63 *)
                      ;
                      () (* Loop statements appearing after the loop invariant of loop lz77.adb:63 *)
                      ;
                      () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:63 *)
                      ;
                      (if ((Lz77__decode__L_3__tokenindex.tokenindex.int__content = temp___382)) then (
                        raise Lz77__decode__L_3.L_3));
                      ([#"lz77.adb" 63 0 0] [#"lz77.adb" 63 0 0] (Lz77__decode__L_3__tokenindex.tokenindex.int__content <- ( (Lz77__decode__L_3__tokenindex.tokenindex.int__content + (1 : int)) )));
                      ();
                      ( [@GP_Sloc:lz77.adb:64:11] ([#"lz77.adb" 64 0 0] (if (( ([#"lz77.adb" 64 0 0] [#"lz77.adb" 64 0 0] (([@branch_id=2637] Main.spark__branch).bool__content <- ( (Lz77__decode__output_length.output_length.int__content < (2147483646 : int)) )));
                      ( [@branch_id=2637] Main.spark__branch ).bool__content )) then (
                       ( ();
                       ( [@GP_Sloc:lz77.adb:65:13] ([#"lz77.adb" 65 0 0] (if (( ([#"lz77.adb" 65 0 0] [#"lz77.adb" 65 0 0] (([@branch_id=2645] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.orb((Lz77__decode__output_length.output_length.int__content = ([#"lz77.adb" 65 0 0] ( [@vc:annotation] [@GP_Sloc:lz77.adb:65:38] [@comment:            if Output_Length = Output'Length or                                       ^ lz77.adb:65:38:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__typeconv__length_ref] [@GP_Id:55] (Standard__integer.range_check_(( [#"lz77.adb" 65 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                        ()))
                        in () end ;
                       (Integer.length((Standard__integer__rep.to_rep(Lz77__decode__output.output__first))) ((Standard__integer__rep.to_rep(Lz77__decode__output.output__last)))) ))) )))) ((([#"lz77.adb" 66 0 0] ( [@GP_Sloc:lz77.adb:66:51] [@GP_Id:57] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:              Output_Length - Input(Index).Offset + 1 < Output'First or Error                                                   ^ lz77.adb:66:51:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__add] (Standard__integer.range_check_((([#"lz77.adb" 66 0 0] ( [@comment:              Output_Length - Input(Index).Offset + 1 < Output'First or Error                             ^ lz77.adb:66:29:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:66:29] [@GP_Id:56] [@GP_Shape:L_2_while__L_3_while__if__if__or__or__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) + (1 : int)))) )) < (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                        ()))
                        in () end ;
                       Lz77__decode__output.output__first ))))))) (Lz77__decode__error.error.bool__content)) )));
                       ( [@branch_id=2645] Main.spark__branch ).bool__content )) then (
                         raise Temp___exception_383) else (
                        ( ();
                        ( [@GP_Sloc:lz77.adb:72:30] ([#"lz77.adb" 72 0 0] [#"lz77.adb" 72 0 0] (Lz77__decode__output_length.output_length.int__content <- ( ([#"lz77.adb" 72 0 0] ( [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:72:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__L_3_while__if__if__output_length_assign__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:51] [@GP_Sloc:lz77.adb:72:47] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content + (1 : int)))) )) ))) );
                        ( [@GP_Sloc:lz77.adb:73:16] ([#"lz77.adb" 73 0 0] (if (( ([#"lz77.adb" 73 0 0] [#"lz77.adb" 73 0 0] (([@branch_id=2679] Main.spark__branch).bool__content <- ( (Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 73 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
                         ()))
                         in () end ;
                        Lz77__decode__output.output__last )))) )));
                        ( [@branch_id=2679] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:lz77.adb:74:41] ([#"lz77.adb" 74 0 0] [#"lz77.adb" 74 0 0] (Lz77__decode__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 74 0 0] assert { [#"lz77.adb" 74 0 0] ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:26] [@vc:annotation] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                          ^ lz77.adb:74:26:VC_INDEX_CHECK] [@GP_Id:54] ( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= Lz77__decode__output_length.output_length.int__content) /\ (Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )) };
                         Lz77__decode__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode__output.output.Array__Int__Standard__character.map__content) ((let temp___384 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:65] [@vc:annotation] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                                 ^ lz77.adb:74:65:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp__sub] [@GP_Id:52] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                          (  assert {  ([#"lz77.adb" 74 0 0] ( [@GP_Sloc:lz77.adb:74:65] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_2_while__L_3_while__if__if__if__output_assign__ixdcomp__sub] [@comment:                  Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                                 ^ lz77.adb:74:65:VC_INDEX_CHECK] [@GP_Id:53] ( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= temp___384) /\ (temp___384 <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )) };
                          temp___384 )))
                         )))))))) ))) ) )) else (
                         ()))) ) )))) ) )) else (
                       ()))) );
                      (let temp___inv_391 [@mlw:proxy_symbol] [@introduced] = (if ((Boolean.andb((Lz77__decode__output_length.output_length.int__content < ((2147483647 : int) - Lz77__decode__L_3__tokenindex.tokenindex.int__content))) (not ( Lz77__decode__error.error.bool__content )))) then (
                       (Lz77__decode__output_length.output_length.int__content = ([#"lz77.adb" 79 0 0] ( [@GP_Id:58] [@comment:         pragma Loop_Invariant ( if Output_Length < Natural'Last - TokenIndex and not Error then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                                            ^ lz77.adb:79:139:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__L_3_while__pragargs__if__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:79:139] (Standard__integer.range_check_((temp___392 + Lz77__decode__L_3__tokenindex.tokenindex.int__content))) )))) else (
                       (Boolean.of_int((1 : int))))) in (
                        begin ensures {true} let _ = (let _ = () in (
                        ()))
                        in () end ))
                       )
                     done )))
                     )))
                    )))
                   )))
                  )))
                 )
               with
                Temp___exception_383 -> ( ();
                ( [@GP_Sloc:lz77.adb:68:22] ([#"lz77.adb" 68 0 0] [#"lz77.adb" 68 0 0] (Lz77__decode__error.error.bool__content <- ( (Boolean.of_int((1 : int))) ))) );
                ( [@GP_Sloc:lz77.adb:69:33] ([#"lz77.adb" 69 0 0] [#"lz77.adb" 69 0 0] (Lz77__decode__output_length.output_length.int__content <- ( (0 : int) ))) );
                ( [@GP_Sloc:lz77.adb:70:19] ([#"lz77.adb" 70 0 0] [#"lz77.adb" 70 0 0] raise Lz77__decode__L_3.L_3) ) )
               end
              with
               Lz77__decode__L_3.L_3 -> ()
              end)) )))
            ))
            ) );
            ( [@GP_Sloc:lz77.adb:82:10] ([#"lz77.adb" 82 0 0] (if (( ([#"lz77.adb" 82 0 0] [#"lz77.adb" 82 0 0] (([@branch_id=2720] Main.spark__branch).bool__content <- ( (Boolean.orb((Lz77__decode__output_length.output_length.int__content = (Standard__integer__rep.to_rep(( [#"lz77.adb" 82 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
             ()))
             in () end ;
            Lz77__decode__output.output__last ))))) (Lz77__decode__error.error.bool__content)) )));
            ( [@branch_id=2720] Main.spark__branch ).bool__content )) then (
              raise Temp___exception_393) else (
             ( ();
             ( [@GP_Sloc:lz77.adb:87:13] ([#"lz77.adb" 87 0 0] (if (( ([#"lz77.adb" 87 0 0] [#"lz77.adb" 87 0 0] (([@branch_id=2735] Main.spark__branch).bool__content <- ( (Lz77__decode__output_length.output_length.int__content < (2147483646 : int)) )));
             ( [@branch_id=2735] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:lz77.adb:88:30] ([#"lz77.adb" 88 0 0] [#"lz77.adb" 88 0 0] (Lz77__decode__output_length.output_length.int__content <- ( ([#"lz77.adb" 88 0 0] ( [@GP_Sloc:lz77.adb:88:47] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:60] [@GP_Shape:L_2_while__if__if__output_length_assign__add] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:88:47:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Lz77__decode__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
              ()))) );
             ( [@GP_Sloc:lz77.adb:90:13] ([#"lz77.adb" 90 0 0] (if (( ([#"lz77.adb" 90 0 0] [#"lz77.adb" 90 0 0] (([@branch_id=2748] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 90 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
              ()))
              in () end ;
             Lz77__decode__output.output__last ))))) ((Lz77__decode__output_length.output_length.int__content >= (Standard__integer__rep.to_rep(( [#"lz77.adb" 90 0 0] begin ensures {true} let _ = (let _ = Lz77__decode__output.output.Array__Int__Standard__character.map__content in (
              ()))
              in () end ;
             Lz77__decode__output.output__first )))))) )));
             ( [@branch_id=2748] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:lz77.adb:91:38] ([#"lz77.adb" 91 0 0] [#"lz77.adb" 91 0 0] (Lz77__decode__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 91 0 0] assert { [#"lz77.adb" 91 0 0] ([#"lz77.adb" 91 0 0] ( [@GP_Sloc:lz77.adb:91:23] [@vc:annotation] [@GP_Id:61] [@comment:               Output(Output_Length) := Input(Index).Next_C;                       ^ lz77.adb:91:23:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_2_while__if__if__output_assign__ixdcomp] ( ((Standard__integer__rep.to_rep Lz77__decode__output.output__first) <= Lz77__decode__output_length.output_length.int__content) /\ (Lz77__decode__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode__output.output__last)) ) )) };
              Lz77__decode__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode__input.input))) (Lz77__decode__L_2__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__next_c)))))) ))) ) )) else (
              ()))) ) )))) );
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:60 *)
            ;
            (if ((Lz77__decode__L_2__index.index.int__content = temp___380)) then (
              raise Lz77__decode__L_2.L_2));
            ([#"lz77.adb" 60 0 0] [#"lz77.adb" 60 0 0] (Lz77__decode__L_2__index.index.int__content <- ( (Lz77__decode__L_2__index.index.int__content + (1 : int)) )));
            (let temp___inv_400 [@mlw:proxy_symbol] [@introduced] = (if (Lz77__decode__error.error.bool__content) then (
             (Lz77__decode__output_length.output_length.int__content = (0 : int))) else (
             (Boolean.of_int((1 : int))))) in (
              begin ensures {true} let _ = (let _ = () in (
              ()))
              in () end ))
             )
           done )))
           )))
          )))
         )))
        )
      with
       Temp___exception_393 -> ( ();
       ( [@GP_Sloc:lz77.adb:83:19] ([#"lz77.adb" 83 0 0] [#"lz77.adb" 83 0 0] (Lz77__decode__error.error.bool__content <- ( (Boolean.of_int((1 : int))) ))) );
       ( [@GP_Sloc:lz77.adb:84:27] ([#"lz77.adb" 84 0 0] [#"lz77.adb" 84 0 0] (Lz77__decode__output_length.output_length.int__content <- ( (0 : int) ))) );
       ( [@GP_Sloc:lz77.adb:85:13] ([#"lz77.adb" 85 0 0] [#"lz77.adb" 85 0 0] raise Lz77__decode__L_2.L_2) ) )
      end
     with
      Lz77__decode__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:lz77.adb:96:7] ([#"lz77.adb" 96 0 0] (if (( ([#"lz77.adb" 96 0 0] [#"lz77.adb" 96 0 0] (([@branch_id=2770] Main.spark__branch).bool__content <- ( ((Boolean.to_int(Lz77__decode__error.error.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) )));
   ( [@branch_id=2770] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:lz77.adb:96:42] ([#"lz77.adb" 96 0 0] [#"lz77.adb" 96 0 0] (Lz77__decode__output_length.output_length.int__content <- ( (0 : int) ))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (Lz77__decode__error.error.bool__content) then (
   (Lz77__decode__output_length.output_length.int__content = (0 : int))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_valid" defined at lz77.ads:100, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__is_valid__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__valid as Lz77__valid
 use        Lz77__valid___axiom as Lz77__valid___axiom
 use        Lz77__token as Lz77__token
 use        Lz77__is_valid__input as Lz77__is_valid__input
 use        Lz77__is_valid__totallength as Lz77__is_valid__totallength
 use        Lz77__is_valid__valid as Lz77__is_valid__valid
 use        Lz77__is_valid__L_4__index as Lz77__is_valid__L_4__index
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__is_valid__L_4 as Lz77__is_valid__L_4
 use        Lz77__is_valid__L_4__T27b as Lz77__is_valid__L_4__T27b
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__is_valid__totallength___axiom as Lz77__is_valid__totallength___axiom
 use        Lz77__is_valid__valid___axiom as Lz77__is_valid__valid___axiom
 use        Lz77__is_valid__L_4__index___axiom as Lz77__is_valid__L_4__index___axiom
 use        Lz77__is_valid__L_4___axiom as Lz77__is_valid__L_4___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__valid___axiom as Lz77__valid___axiom
 use        Lz77__is_valid__input___axiom as Lz77__is_valid__input___axiom
 use        Lz77__is_valid__L_4__T27b___axiom as Lz77__is_valid__L_4__T27b___axiom

 val lz77__is_valid__result [@name:Is_Valid] [@model_projected] [@model_trace:3623@result]  : bool__ref 
 
 let def [#"lz77.ads" 100 0 0][@GP_Subp:lz77.ads:100] 
   (__void_param : unit)
  requires { [#"lz77.ads" 100 0 0] true }
  ensures { [#"lz77.ads" 100 0 0] ([#"lz77.ads" 101 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if Is_Valid'Result then Valid(Input,Input'Last) else not Valid(Input,Input'Last));              ^ lz77.ads:101:14:VC_POSTCONDITION] [@GP_Sloc:lz77.ads:101:14] [@GP_Id:70] [@model_vc_post] [@GP_Shape:pragargs__if] (if ((lz77__is_valid__result.bool__content = True)) then (
   ( [@GP_Pretty_Ada:3654] [@GP_Sloc:lz77.ads:101:39] ((epsilon temp___result_413 : bool.
    ( (temp___result_413 = (Lz77__valid.valid Lz77__is_valid__input.input (Lz77__token_array.last Lz77__is_valid__input.input))) /\ (Lz77__valid.valid__function_guard temp___result_413 Lz77__is_valid__input.input (Lz77__token_array.last Lz77__is_valid__input.input)) )) = True) )) else (
   ( [@GP_Pretty_Ada:3655] [@GP_Sloc:lz77.ads:101:68] not ( ((epsilon temp___result_414 : bool.
    ( (temp___result_414 = (Lz77__valid.valid Lz77__is_valid__input.input (Lz77__token_array.last Lz77__is_valid__input.input))) /\ (Lz77__valid.valid__function_guard temp___result_414 Lz77__is_valid__input.input (Lz77__token_array.last Lz77__is_valid__input.input)) )) = True) ) ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:100 *)
  ;
   assume {  (Lz77__token_array___axiom.dynamic_invariant Lz77__is_valid__input.input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:100 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:100 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:100 *)
  ;
   try
   ( ();
   ([#"lz77.adb" 100 0 0] ());
   ([#"lz77.adb" 101 0 0] ( [#"lz77.adb" 101 0 0] (Lz77__is_valid__totallength.totallength.int__content <- ( (0 : int) ));
   [#"lz77.adb" 101 0 0] assume { [#"lz77.adb" 101 0 0] (Standard__integer___axiom.dynamic_invariant Lz77__is_valid__totallength.totallength.int__content True False True True) } ));
   ([#"lz77.adb" 102 0 0] [#"lz77.adb" 102 0 0] (Lz77__is_valid__valid.valid.bool__content <- ( (Boolean.of_int((1 : int))) )));
   ([#"lz77.adb" 105 0 0] ());
   ();
   ( [@GP_Sloc:lz77.adb:105:32] ([#"lz77.adb" 105 0 0] (let temp___405 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.first(Lz77__is_valid__input.input)) ) in (
   (let temp___406 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__is_valid__input.input)) ) in (
    ( [#"lz77.adb" 105 0 0] (Lz77__is_valid__L_4__index.index.int__content <- ( temp___405 ));
    () (* Translation of an Ada loop from lz77.adb:105 *)
    ;
    (if ((Boolean.andb((temp___405 <= Lz77__is_valid__L_4__index.index.int__content)) ((Lz77__is_valid__L_4__index.index.int__content <= temp___406)))) then (
     [#"lz77.adb" 105 0 0] try
      ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__valid.valid.bool__content in (
       ()))
       in () end ;
      (let temp___409 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 105 0 0] (val _f : bool
      ensures {[#"lz77.adb" 105 0 0] (result = Lz77__is_valid__valid.valid.bool__content)} 
      in _f) in (
       ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__totallength.totallength.int__content in (
        ()))
        in () end ;
       (let temp___411 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 105 0 0] (val _f : int
       ensures {[#"lz77.adb" 105 0 0] (result = Lz77__is_valid__totallength.totallength.int__content)} 
       in _f) in (
        ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__totallength.totallength.int__content in (
         ()))
         in () end ;
        (let temp___408 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 105 0 0] (val _f : int
        ensures {[#"lz77.adb" 105 0 0] (result = Lz77__is_valid__totallength.totallength.int__content)} 
        in _f) in (
         ( [#"lz77.adb" 105 0 0] begin ensures {true} let _ = (let _ = Lz77__is_valid__L_4__index.index.int__content in (
          ()))
          in () end ;
         (let temp___407 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 105 0 0] (val _f : int
         ensures {[#"lz77.adb" 105 0 0] (result = Lz77__is_valid__L_4__index.index.int__content)} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:105 *)
          ;
          ();
          ( [@GP_Sloc:lz77.adb:107:36] ([#"lz77.adb" 107 0 0] ()) );
          ( [@GP_Sloc:lz77.adb:107:10] ([#"lz77.adb" 107 0 0] (if (( ([#"lz77.adb" 107 0 0] [#"lz77.adb" 107 0 0] (([@branch_id=2833] Main.spark__branch).bool__content <- ( ((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (Lz77__is_valid__L_4__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) > Lz77__is_valid__totallength.totallength.int__content) )));
          ( [@branch_id=2833] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:lz77.adb:108:15] ([#"lz77.adb" 108 0 0] ()) );
           ( [@GP_Sloc:lz77.adb:108:21] ([#"lz77.adb" 108 0 0] [#"lz77.adb" 108 0 0] (Lz77__is_valid__valid.valid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
           ()))) );
          ( [@GP_Sloc:lz77.adb:110:10] ([#"lz77.adb" 110 0 0] ()) );
          ( [@GP_Sloc:lz77.adb:110:25] ([#"lz77.adb" 110 0 0] ()) );
          ( [@GP_Sloc:lz77.adb:110:22] ([#"lz77.adb" 110 0 0] [#"lz77.adb" 110 0 0] (Lz77__is_valid__totallength.totallength.int__content <- ( ([#"lz77.adb" 110 0 0] ( [@vc:annotation] [@comment:         TotalLength := TotalLength + Input(Index).Length + 1;                                                           ^ lz77.adb:110:59:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__totallength_assign__add] [@GP_Id:65] [@GP_Sloc:lz77.adb:110:59] (Standard__integer.range_check_((([#"lz77.adb" 110 0 0] ( [@comment:         TotalLength := TotalLength + Input(Index).Length + 1;                                     ^ lz77.adb:110:37:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:L_4_while__totallength_assign__add__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:110:37] [@GP_Id:64] (Standard__integer.range_check_((Lz77__is_valid__totallength.totallength.int__content + (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (Lz77__is_valid__L_4__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))))) )) + (1 : int)))) )) ))) );
          () (* While loop translating the Ada loop from lz77.adb:105 *)
          ;
          (let temp___inv_410 [@mlw:proxy_symbol] [@introduced] = (Lz77__is_valid__totallength.totallength.int__content = ([#"lz77.adb" 111 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                                           ^ lz77.adb:111:91:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:68] [@GP_Sloc:lz77.adb:111:91] (Standard__integer.range_check_((([#"lz77.adb" 111 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__add] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                     ^ lz77.adb:111:69:VC_OVERFLOW_CHECK] [@GP_Id:67] [@GP_Sloc:lz77.adb:111:69] (Standard__integer.range_check_((temp___411 + (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (( [#"lz77.adb" 111 0 0] assert { [#"lz77.adb" 111 0 0] ([#"lz77.adb" 111 0 0] ( [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp__add__add__selectcomp__ixdcomp] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                             ^ lz77.adb:111:77:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:111:77] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:66] ( ((Lz77__token_array.first Lz77__is_valid__input.input) <= Lz77__is_valid__L_4__index.index.int__content) /\ (Lz77__is_valid__L_4__index.index.int__content <= (Lz77__token_array.last Lz77__is_valid__input.input)) ) )) };
          Lz77__is_valid__L_4__index.index.int__content ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))))) )) + Lz77__is_valid__L_4__index.index.int__content))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
          ;
           while True do
           invariant { 
            ([#"lz77.adb" 111 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                ^ lz77.adb:111:32:VC_LOOP_INVARIANT] [@GP_Sloc:lz77.adb:111:32] [@GP_Id:69] ( [@GP_Pretty_Ada:2860] [@GP_Sloc:lz77.adb:111:32] (Lz77__is_valid__totallength.totallength.int__content = ((temp___411 + (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array Lz77__is_valid__input.input) Lz77__is_valid__L_4__index.index.int__content).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)) + Lz77__is_valid__L_4__index.index.int__content)) ) ))
            }
           ( () (* Assume implicit invariants from the loop lz77.adb:105 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((Lz77__token_array.first Lz77__is_valid__input.input) <= (Lz77__token_array.last Lz77__is_valid__input.input)) )) then (
            (Lz77__is_valid__L_4__T27b.dynamic_property (Lz77__token_array.first Lz77__is_valid__input.input) (Lz77__token_array.last Lz77__is_valid__input.input) Lz77__is_valid__L_4__index.index.int__content)) else true) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Lz77__is_valid__totallength.totallength.int__content True True True True) )/\true ) /\ true )/\true )) (( ((Lz77__token_array.first Lz77__is_valid__input.input) <= Lz77__is_valid__L_4__index.index.int__content) /\ (Lz77__is_valid__L_4__index.index.int__content <= (Lz77__token_array.last Lz77__is_valid__input.input)) ))) };
           () (* Check for absence of RTE in the invariant of loop lz77.adb:105 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop lz77.adb:105 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:105 *)
           ;
           (if ((Lz77__is_valid__L_4__index.index.int__content = temp___406)) then (
             raise Lz77__is_valid__L_4.L_4));
           ([#"lz77.adb" 105 0 0] [#"lz77.adb" 105 0 0] (Lz77__is_valid__L_4__index.index.int__content <- ( (Lz77__is_valid__L_4__index.index.int__content + (1 : int)) )));
           ();
           ( [@GP_Sloc:lz77.adb:107:36] ([#"lz77.adb" 107 0 0] ()) );
           ( [@GP_Sloc:lz77.adb:107:10] ([#"lz77.adb" 107 0 0] (if (( ([#"lz77.adb" 107 0 0] [#"lz77.adb" 107 0 0] (([@branch_id=2833] Main.spark__branch).bool__content <- ( ((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (Lz77__is_valid__L_4__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) > Lz77__is_valid__totallength.totallength.int__content) )));
           ( [@branch_id=2833] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:lz77.adb:108:15] ([#"lz77.adb" 108 0 0] ()) );
            ( [@GP_Sloc:lz77.adb:108:21] ([#"lz77.adb" 108 0 0] [#"lz77.adb" 108 0 0] (Lz77__is_valid__valid.valid.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
            ()))) );
           ( [@GP_Sloc:lz77.adb:110:10] ([#"lz77.adb" 110 0 0] ()) );
           ( [@GP_Sloc:lz77.adb:110:25] ([#"lz77.adb" 110 0 0] ()) );
           ( [@GP_Sloc:lz77.adb:110:22] ([#"lz77.adb" 110 0 0] [#"lz77.adb" 110 0 0] (Lz77__is_valid__totallength.totallength.int__content <- ( ([#"lz77.adb" 110 0 0] ( [@vc:annotation] [@comment:         TotalLength := TotalLength + Input(Index).Length + 1;                                                           ^ lz77.adb:110:59:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__totallength_assign__add] [@GP_Id:65] [@GP_Sloc:lz77.adb:110:59] (Standard__integer.range_check_((([#"lz77.adb" 110 0 0] ( [@comment:         TotalLength := TotalLength + Input(Index).Length + 1;                                     ^ lz77.adb:110:37:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:L_4_while__totallength_assign__add__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:110:37] [@GP_Id:64] (Standard__integer.range_check_((Lz77__is_valid__totallength.totallength.int__content + (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (Lz77__is_valid__L_4__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))))) )) + (1 : int)))) )) ))) );
           (let temp___inv_410 [@mlw:proxy_symbol] [@introduced] = (Lz77__is_valid__totallength.totallength.int__content = ([#"lz77.adb" 111 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                                           ^ lz77.adb:111:91:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:68] [@GP_Sloc:lz77.adb:111:91] (Standard__integer.range_check_((([#"lz77.adb" 111 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__add] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                     ^ lz77.adb:111:69:VC_OVERFLOW_CHECK] [@GP_Id:67] [@GP_Sloc:lz77.adb:111:69] (Standard__integer.range_check_((temp___411 + (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__is_valid__input.input))) (( [#"lz77.adb" 111 0 0] assert { [#"lz77.adb" 111 0 0] ([#"lz77.adb" 111 0 0] ( [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp__add__add__selectcomp__ixdcomp] [@comment:         pragma Loop_Invariant(TotalLength = TotalLength'Loop_Entry + Input(Index).Length + (Index));                                                                             ^ lz77.adb:111:77:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:111:77] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:66] ( ((Lz77__token_array.first Lz77__is_valid__input.input) <= Lz77__is_valid__L_4__index.index.int__content) /\ (Lz77__is_valid__L_4__index.index.int__content <= (Lz77__token_array.last Lz77__is_valid__input.input)) ) )) };
           Lz77__is_valid__L_4__index.index.int__content ))).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))))) )) + Lz77__is_valid__L_4__index.index.int__content))) ))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            )
          done )))
          )))
         )))
        )))
       )
     with
      Lz77__is_valid__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:lz77.adb:113:14] ([#"lz77.adb" 113 0 0] ()) );
   ( [@GP_Sloc:lz77.adb:113:7] ([#"lz77.adb" 113 0 0] ( [#"lz77.adb" 113 0 0] (lz77__is_valid__result.bool__content <- ( Lz77__is_valid__valid.valid.bool__content ));
   [#"lz77.adb" 113 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (lz77__is_valid__result.bool__content) then (
   (Lz77__valid___axiom.valid(Lz77__is_valid__input.input) ((  begin ensures {true} let _ = (let _ = Lz77__is_valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__is_valid__input.input)) )))) else (
   not ( (Lz77__valid___axiom.valid(Lz77__is_valid__input.input) ((  begin ensures {true} let _ = (let _ = Lz77__is_valid__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__is_valid__input.input)) ))) ))) in (
   ()))
   in () end ;
  lz77__is_valid__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decode_fast" defined at lz77.ads:113, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Lz77__decode_fast__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__decoded_length as Lz77__decoded_length
 use        Lz77__decoded_length___axiom as Lz77__decoded_length___axiom
 use        Lz77__valid as Lz77__valid
 use        Lz77__valid___axiom as Lz77__valid___axiom
 use        Lz77__token as Lz77__token
 use        Lz77__decode_fast__input as Lz77__decode_fast__input
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Lz77__decode_fast__output as Lz77__decode_fast__output
 use        Lz77__decode_fast__output_length as Lz77__decode_fast__output_length
 use        Lz77__decode_fast__L_5__index as Lz77__decode_fast__L_5__index
 use        Lz77__decode_fast__L_6__R32b as Lz77__decode_fast__L_6__R32b
 use        Lz77__decode_fast__L_6__tokenindex as Lz77__decode_fast__L_6__tokenindex
 use        Lz77__byte_array as Lz77__byte_array
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__to_integer as Big_integers__to_integer
 use        Lz77__decode_fast__L_5 as Lz77__decode_fast__L_5
 use        Lz77__decode_fast__L_5__T31b as Lz77__decode_fast__L_5__T31b
 use        Lz77__decode_fast__L_6 as Lz77__decode_fast__L_6
 use        Lz77__decode_fast__L_6__T33b as Lz77__decode_fast__L_6__T33b
 use        Lz77__decode_fast__L_5__T37b as Lz77__decode_fast__L_5__T37b
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Lz77__decode_fast__L_5__index___axiom as Lz77__decode_fast__L_5__index___axiom
 use        Lz77__decode_fast__L_6__tokenindex___axiom as Lz77__decode_fast__L_6__tokenindex___axiom
 use        Lz77__decode_fast__L_6___axiom as Lz77__decode_fast__L_6___axiom
 use        Lz77__decode_fast__L_5___axiom as Lz77__decode_fast__L_5___axiom
 use        Lz77__byte_array___axiom as Lz77__byte_array___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__decoded_length___axiom as Lz77__decoded_length___axiom
 use        Lz77__valid___axiom as Lz77__valid___axiom
 use        Lz77__decode_fast__input___axiom as Lz77__decode_fast__input___axiom
 use        Lz77__decode_fast__output___axiom as Lz77__decode_fast__output___axiom
 use        Lz77__decode_fast__output_length___axiom as Lz77__decode_fast__output_length___axiom
 use        Lz77__decode_fast__L_5__T31b___axiom as Lz77__decode_fast__L_5__T31b___axiom
 use        Lz77__decode_fast__L_6__R32b___axiom as Lz77__decode_fast__L_6__R32b___axiom
 use        Lz77__decode_fast__L_6__T33b___axiom as Lz77__decode_fast__L_6__T33b___axiom
 use        Lz77__decode_fast__L_5__T37b___axiom as Lz77__decode_fast__L_5__T37b___axiom

 let def [#"lz77.ads" 113 0 0][@GP_Subp:lz77.ads:113] 
   (__void_param : unit)
  requires { [#"lz77.ads" 113 0 0] true }
  ensures { [#"lz77.ads" 113 0 0] ([#"lz77.ads" 116 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => Output_Length = To_Integer(Decoded_Length(Input));              ^ lz77.ads:116:14:VC_POSTCONDITION] [@GP_Id:86] [@GP_Sloc:lz77.ads:116:14] [@GP_Shape:pragargs__cmp] [@model_vc_post] ( [@GP_Sloc:lz77.ads:116:14] [@GP_Pretty_Ada:22322] (Lz77__decode_fast__output_length.output_length.int__content = (Big_integers__to_integer.to_integer__logic (epsilon temp___result_445 : Big_integers__big_integer.big_integer.
   ( (temp___result_445 = (Lz77__decoded_length.decoded_length Lz77__decode_fast__input.input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_445 Lz77__decode_fast__input.input) )))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram lz77.ads:113 *)
  ;
   assume {  (Lz77__token_array___axiom.dynamic_invariant Lz77__decode_fast__input.input True False True True) };
   assume {  (if (False) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)))) };
   assume {  (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__output_length.output_length.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram lz77.ads:113 *)
  ;
  () (* Check for RTE in the Pre of the subprogram lz77.ads:113 *)
  ;
   begin ensures {true} let _ = (let _ = ( (Lz77__valid___axiom.valid(Lz77__decode_fast__input.input) ((  begin ensures {true} let _ = (let _ = Lz77__decode_fast__input.input in (
   ()))
   in () end ;
  (Lz77__token_array.last(Lz77__decode_fast__input.input)) ))) && (([#"lz77.ads" 115 0 0] ( [@GP_Shape:pragargs__andthen__cmp__typeconv__length_ref] [@GP_Id:84] [@comment:     Pre => Valid(Input,Input'Last) and then Output'Length >= To_Integer(Decoded_Length(Input)),                                                    ^ lz77.ads:115:52:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:lz77.ads:115:52] (Standard__integer.range_check_(( [#"lz77.ads" 115 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(Lz77__decode_fast__output.output__first))) ((Standard__integer__rep.to_rep(Lz77__decode_fast__output.output__last)))) ))) )) >= ([#"lz77.ads" 115 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:85] [@GP_Shape:pragargs__andthen__cmp__call_to_integer] [@vc:annotation] [@GP_Sloc:lz77.ads:115:63] [@comment:     Pre => Valid(Input,Input'Last) and then Output'Length >= To_Integer(Decoded_Length(Input)),                                                               ^ lz77.ads:115:63:VC_PRECONDITION] (Big_integers__to_integer.to_integer((Lz77__decoded_length___axiom.decoded_length(Lz77__decode_fast__input.input)))) ))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram lz77.ads:113 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3708] ((epsilon temp___result_443 : bool.
   ( (temp___result_443 = (Lz77__valid.valid Lz77__decode_fast__input.input (Lz77__token_array.last Lz77__decode_fast__input.input))) /\ (Lz77__valid.valid__function_guard temp___result_443 Lz77__decode_fast__input.input (Lz77__token_array.last Lz77__decode_fast__input.input)) )) = True) ) /\ ( [@GP_Pretty_Ada:3714] ((Integer.length (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) >= (Big_integers__to_integer.to_integer__logic (epsilon temp___result_444 : Big_integers__big_integer.big_integer.
   ( (temp___result_444 = (Lz77__decoded_length.decoded_length Lz77__decode_fast__input.input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_444 Lz77__decode_fast__input.input) )))) ) ) };
   try
   ( ();
   ([#"lz77.adb" 117 0 0] ());
   ([#"lz77.adb" 117 0 0] ());
   ([#"lz77.adb" 128 0 0] ());
   ([#"lz77.adb" 125 0 0] ());
   ();
   ( [@GP_Sloc:lz77.adb:122:21] ([#"lz77.adb" 122 0 0] [#"lz77.adb" 122 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( (0 : int) ))) );
   ( [@GP_Sloc:lz77.adb:125:32] ([#"lz77.adb" 125 0 0] (let temp___415 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.first(Lz77__decode_fast__input.input)) ) in (
   (let temp___416 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__input.input in (
    ()))
    in () end ;
   (Lz77__token_array.last(Lz77__decode_fast__input.input)) ) in (
    ( [#"lz77.adb" 125 0 0] (Lz77__decode_fast__L_5__index.index.int__content <- ( temp___415 ));
    () (* Translation of an Ada loop from lz77.adb:125 *)
    ;
    (if ((Boolean.andb((temp___415 <= Lz77__decode_fast__L_5__index.index.int__content)) ((Lz77__decode_fast__L_5__index.index.int__content <= temp___416)))) then (
     [#"lz77.adb" 125 0 0] try
      ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__L_6__R32b.r32b.int__content in (
       ()))
       in () end ;
      (let temp___432 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 125 0 0] (val _f : int
      ensures {[#"lz77.adb" 125 0 0] (result = Lz77__decode_fast__L_6__R32b.r32b.int__content)} 
      in _f) in (
       ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output_length.output_length.int__content in (
        ()))
        in () end ;
       (let temp___431 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 125 0 0] (val _f : int
       ensures {[#"lz77.adb" 125 0 0] (result = Lz77__decode_fast__output_length.output_length.int__content)} 
       in _f) in (
        ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
         ()))
         in () end ;
        (let temp___429 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 125 0 0] (val _f : Array__Int__Standard__character.map
        ensures {[#"lz77.adb" 125 0 0] (result = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content)} 
        in _f) in (
         ( [#"lz77.adb" 125 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__L_5__index.index.int__content in (
          ()))
          in () end ;
         (let temp___427 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 125 0 0] (val _f : int
         ensures {[#"lz77.adb" 125 0 0] (result = Lz77__decode_fast__L_5__index.index.int__content)} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:125 *)
          ;
          ();
          ( [@GP_Sloc:lz77.adb:128:45] ([#"lz77.adb" 128 0 0] ([#"lz77.adb" 128 0 0] ( [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__R32b.r32b.int__content <- ( (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)) ));
          [#"lz77.adb" 128 0 0] assume { [#"lz77.adb" 128 0 0] (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__L_6__R32b.r32b.int__content True False True True) } ))) );
          ( [@GP_Sloc:lz77.adb:128:53] ([#"lz77.adb" 128 0 0] (let temp___417 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
          (let temp___418 [@mlw:proxy_symbol] [@introduced] = Lz77__decode_fast__L_6__R32b.r32b.int__content in (
           ( [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <- ( temp___417 ));
           () (* Translation of an Ada loop from lz77.adb:128 *)
           ;
           (if ((Boolean.andb((temp___417 <= Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) ((Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <= temp___418)))) then (
            [#"lz77.adb" 128 0 0] try
             ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output_length.output_length.int__content in (
              ()))
              in () end ;
             (let temp___426 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
             ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output_length.output_length.int__content)} 
             in _f) in (
              ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output_length.output_length.int__content in (
               ()))
               in () end ;
              (let temp___424 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
              ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output_length.output_length.int__content)} 
              in _f) in (
               ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                ()))
                in () end ;
               (let temp___422 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : Array__Int__Standard__character.map
               ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content)} 
               in _f) in (
                ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content in (
                 ()))
                 in () end ;
                (let temp___420 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
                ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)} 
                in _f) in (
                 ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:128 *)
                 ;
                 ();
                 ( [@GP_Sloc:lz77.adb:129:13] ([#"lz77.adb" 129 0 0] (if (( ([#"lz77.adb" 129 0 0] [#"lz77.adb" 129 0 0] (([@branch_id=2948] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
                 ( [@branch_id=2948] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:lz77.adb:130:30] ([#"lz77.adb" 130 0 0] [#"lz77.adb" 130 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 130 0 0] ( [@GP_Sloc:lz77.adb:130:47] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:130:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_length_assign__add] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
                  ()))) );
                 ( [@GP_Sloc:lz77.adb:132:13] ([#"lz77.adb" 132 0 0] (if (( ([#"lz77.adb" 132 0 0] [#"lz77.adb" 132 0 0] (([@branch_id=2961] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                  ()))
                  in () end ;
                 Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= ([#"lz77.adb" 132 0 0] ( [@vc:annotation] [@comment:            if Output_Length <= Output'Last and Output_Length >= Input(Index).Offset + Output'First then                                                                                      ^ lz77.adb:132:86:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@GP_Shape:L_5_while__L_6_while__if__and__cmp__add] [@GP_Sloc:lz77.adb:132:86] (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) + (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                  ()))
                  in () end ;
                 Lz77__decode_fast__output.output__first )))))) ))))) )));
                 ( [@branch_id=2961] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:lz77.adb:133:38] ([#"lz77.adb" 133 0 0] [#"lz77.adb" 133 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 133 0 0] assert { [#"lz77.adb" 133 0 0] ([#"lz77.adb" 133 0 0] ( [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                       ^ lz77.adb:133:23:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:23] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                  Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) ((let temp___419 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:133:62] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                   (  assert {  ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:73] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:62] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= temp___419) /\ (temp___419 <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                   temp___419 )))
                  )))))))) ))) ) )) else (
                  ()))) );
                 () (* While loop translating the Ada loop from lz77.adb:128 *)
                 ;
                 (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                  (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 136 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                      ^ lz77.adb:136:118:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:136:118] [@GP_Shape:L_5_while__L_6_while__pragargs__if__cmp__add] (Standard__integer.range_check_((temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content))) )))) else (
                  (Boolean.of_int((1 : int))))) in (
                   begin ensures {true} let _ = (let _ = () in (
                   ()))
                   in () end ))
                 ;
                  while True do
                  invariant { 
                   ([#"lz77.adb" 136 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Shape:L_5_while__L_6_while__pragargs__if] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                   ^ lz77.adb:136:35:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:77] [@GP_Sloc:lz77.adb:136:35] (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                    ( [@GP_Sloc:lz77.adb:136:77] [@GP_Pretty_Ada:3004] (Lz77__decode_fast__output_length.output_length.int__content = (temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) )) else (
                    ( [@GP_Pretty_Ada:23372] [@GP_Sloc:lz77.adb:136:35] true ))) ))
                   }
                  ( () (* Assume implicit invariants from the loop lz77.adb:128 *)
                  ;
                   assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((1 : int) <= Lz77__decode_fast__L_6__R32b.r32b.int__content) )) then (
                   (Lz77__decode_fast__L_6__T33b.dynamic_property (1 : int) Lz77__decode_fast__L_6__R32b.r32b.int__content Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) else true) )/\true ) /\ (if (True) then (
                   true) else (
                   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__output_length.output_length.int__content False True True True) )/\true )) (( ((1 : int) <= Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content) /\ (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <= Lz77__decode_fast__L_6__R32b.r32b.int__content) ))) };
                  () (* Check for absence of RTE in the invariant of loop lz77.adb:128 *)
                  ;
                  () (* Loop statements appearing after the loop invariant of loop lz77.adb:128 *)
                  ;
                  () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:128 *)
                  ;
                  (if ((Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content = temp___418)) then (
                    raise Lz77__decode_fast__L_6.L_6));
                  ([#"lz77.adb" 128 0 0] [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <- ( (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content + (1 : int)) )));
                  ();
                  ( [@GP_Sloc:lz77.adb:129:13] ([#"lz77.adb" 129 0 0] (if (( ([#"lz77.adb" 129 0 0] [#"lz77.adb" 129 0 0] (([@branch_id=2948] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
                  ( [@branch_id=2948] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:lz77.adb:130:30] ([#"lz77.adb" 130 0 0] [#"lz77.adb" 130 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 130 0 0] ( [@GP_Sloc:lz77.adb:130:47] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:130:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_length_assign__add] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
                   ()))) );
                  ( [@GP_Sloc:lz77.adb:132:13] ([#"lz77.adb" 132 0 0] (if (( ([#"lz77.adb" 132 0 0] [#"lz77.adb" 132 0 0] (([@branch_id=2961] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= ([#"lz77.adb" 132 0 0] ( [@vc:annotation] [@comment:            if Output_Length <= Output'Last and Output_Length >= Input(Index).Offset + Output'First then                                                                                      ^ lz77.adb:132:86:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@GP_Shape:L_5_while__L_6_while__if__and__cmp__add] [@GP_Sloc:lz77.adb:132:86] (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) + (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Lz77__decode_fast__output.output__first )))))) ))))) )));
                  ( [@branch_id=2961] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:lz77.adb:133:38] ([#"lz77.adb" 133 0 0] [#"lz77.adb" 133 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 133 0 0] assert { [#"lz77.adb" 133 0 0] ([#"lz77.adb" 133 0 0] ( [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                       ^ lz77.adb:133:23:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:23] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                   Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) ((let temp___419 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:133:62] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                    (  assert {  ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:73] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:62] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= temp___419) /\ (temp___419 <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                    temp___419 )))
                   )))))))) ))) ) )) else (
                   ()))) );
                  (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                   (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 136 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                      ^ lz77.adb:136:118:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:136:118] [@GP_Shape:L_5_while__L_6_while__pragargs__if__cmp__add] (Standard__integer.range_check_((temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content))) )))) else (
                   (Boolean.of_int((1 : int))))) in (
                    begin ensures {true} let _ = (let _ = () in (
                    ()))
                    in () end ))
                   )
                 done )))
                 )))
                )))
               )))
              )
            with
             Lz77__decode_fast__L_6.L_6 -> ()
            end)) )))
          ))
          ) );
          ( [@GP_Sloc:lz77.adb:139:10] ([#"lz77.adb" 139 0 0] (if (( ([#"lz77.adb" 139 0 0] [#"lz77.adb" 139 0 0] (([@branch_id=3011] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
          ( [@branch_id=3011] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:lz77.adb:140:30] ([#"lz77.adb" 140 0 0] [#"lz77.adb" 140 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 140 0 0] ( [@GP_Shape:L_5_while__if__output_length_assign__add] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:140:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Sloc:lz77.adb:140:47] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:78] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) );
          ( [@GP_Sloc:lz77.adb:142:10] ([#"lz77.adb" 142 0 0] (if (( ([#"lz77.adb" 142 0 0] [#"lz77.adb" 142 0 0] (([@branch_id=3024] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 142 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
           ()))
           in () end ;
          Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= (Standard__integer__rep.to_rep(( [#"lz77.adb" 142 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
           ()))
           in () end ;
          Lz77__decode_fast__output.output__first )))))) )));
          ( [@branch_id=3024] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:lz77.adb:143:35] ([#"lz77.adb" 143 0 0] [#"lz77.adb" 143 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 143 0 0] assert { [#"lz77.adb" 143 0 0] ([#"lz77.adb" 143 0 0] ( [@vc:annotation] [@GP_Shape:L_5_while__if__output_assign__ixdcomp] [@comment:            Output(Output_Length) := Input(Index).Next_C;                    ^ lz77.adb:143:20:VC_INDEX_CHECK] [@GP_Id:79] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:143:20] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
           Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__next_c)))))) ))) ) )) else (
           ()))) );
          () (* While loop translating the Ada loop from lz77.adb:125 *)
          ;
          (let temp___inv_433 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
           (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 146 0 0] ( [@GP_Shape:L_5_while__pragargs__if__cmp__call_to_integer] [@GP_Id:81] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:lz77.adb:146:90] [@vc:annotation] [@comment:         pragma Loop_Invariant (if Output_Length < Natural'Last - 1 then Output_Length = To_Integer(Decoded_Length(Input(Input'First..Index))));                                                                                          ^ lz77.adb:146:90:VC_PRECONDITION] (Big_integers__to_integer.to_integer((Lz77__decoded_length___axiom.decoded_length((let temp___435 [@mlw:proxy_symbol] [@introduced] = (let temp___434 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 146 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__input.input in (
            ()))
            in () end ;
           (Lz77__token_array.first(Lz77__decode_fast__input.input)) ) in (
            (Lz77__decode_fast__L_5__T37b.of_array(( [#"lz77.adb" 146 0 0] assert { [#"lz77.adb" 146 0 0] ([#"lz77.adb" 146 0 0] ( [@GP_Id:80] [@GP_Sloc:lz77.adb:146:116] [@vc:annotation] [@comment:         pragma Loop_Invariant (if Output_Length < Natural'Last - 1 then Output_Length = To_Integer(Decoded_Length(Input(Input'First..Index))));                                                                                                                    ^ lz77.adb:146:116:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_5_while__pragargs__if__cmp__call_to_integer__call_decoded_length__slice] ( (temp___434 <= Lz77__decode_fast__L_5__index.index.int__content) -> ( ( ((Lz77__token_array.first Lz77__decode_fast__input.input) <= temp___434) /\ (temp___434 <= (Lz77__token_array.last Lz77__decode_fast__input.input)) ) /\ ( ((Lz77__token_array.first Lz77__decode_fast__input.input) <= Lz77__decode_fast__L_5__index.index.int__content) /\ (Lz77__decode_fast__L_5__index.index.int__content <= (Lz77__token_array.last Lz77__decode_fast__input.input)) ) ) ) )) };
            (Lz77__token_array.to_array(Lz77__decode_fast__input.input)) )) (temp___434) (Lz77__decode_fast__L_5__index.index.int__content))))
            in (
            (Lz77__token_array.of_array((Lz77__decode_fast__L_5__T37b.to_array(temp___435))) ((Lz77__decode_fast__L_5__T37b.first(temp___435))) ((Lz77__decode_fast__L_5__T37b.last(temp___435))))))
           )))) )))) else (
           (Boolean.of_int((1 : int))))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
          ;
           while True do
           invariant { 
            ([#"lz77.adb" 146 0 0] ( [@GP_Id:82] [@comment:         pragma Loop_Invariant (if Output_Length < Natural'Last - 1 then Output_Length = To_Integer(Decoded_Length(Input(Input'First..Index))));                                 ^ lz77.adb:146:33:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_5_while__pragargs__if] [@GP_Sloc:lz77.adb:146:33] (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
             ( [@GP_Pretty_Ada:3057] [@GP_Sloc:lz77.adb:146:74] (Lz77__decode_fast__output_length.output_length.int__content = (Big_integers__to_integer.to_integer__logic (epsilon temp___result_438 : Big_integers__big_integer.big_integer.
              ( (temp___result_438 = (Lz77__decoded_length.decoded_length (let temp___437 [@mlw:proxy_symbol] [@introduced] = (let temp___436 [@mlw:proxy_symbol] [@introduced] = (Lz77__token_array.first Lz77__decode_fast__input.input) in (
               (Lz77__decode_fast__L_5__T37b.of_array (Lz77__token_array.to_array Lz77__decode_fast__input.input) temp___436 Lz77__decode_fast__L_5__index.index.int__content)))
               in (
               (Lz77__token_array.of_array (Lz77__decode_fast__L_5__T37b.to_array temp___437) (Lz77__decode_fast__L_5__T37b.first temp___437) (Lz77__decode_fast__L_5__T37b.last temp___437))))
              )) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_438 (let temp___437 [@mlw:proxy_symbol] [@introduced] = (let temp___436 [@mlw:proxy_symbol] [@introduced] = (Lz77__token_array.first Lz77__decode_fast__input.input) in (
               (Lz77__decode_fast__L_5__T37b.of_array (Lz77__token_array.to_array Lz77__decode_fast__input.input) temp___436 Lz77__decode_fast__L_5__index.index.int__content)))
               in (
               (Lz77__token_array.of_array (Lz77__decode_fast__L_5__T37b.to_array temp___437) (Lz77__decode_fast__L_5__T37b.first temp___437) (Lz77__decode_fast__L_5__T37b.last temp___437))))
              ) )))) )) else (
             ( [@GP_Pretty_Ada:23439] [@GP_Sloc:lz77.adb:146:33] true ))) ))
            }
           ( () (* Assume implicit invariants from the loop lz77.adb:125 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( ( ( true /\ (if (( True \/ ((Lz77__token_array.first Lz77__decode_fast__input.input) <= (Lz77__token_array.last Lz77__decode_fast__input.input)) )) then (
            (Lz77__decode_fast__L_5__T31b.dynamic_property (Lz77__token_array.first Lz77__decode_fast__input.input) (Lz77__token_array.last Lz77__decode_fast__input.input) Lz77__decode_fast__L_5__index.index.int__content)) else true) )/\true ) /\ (if (True) then (
            true) else (
            (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)))) )/\(forall temp___430   : int.
            (if (( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= temp___430) /\ (temp___430 <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) )) then (
             (if (( false /\ false )) then (
              ((Array__Int__Standard__character.get Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content temp___430) = (Array__Int__Standard__character.get temp___429 temp___430))) else (
              true))) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__output_length.output_length.int__content False True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__L_6__R32b.r32b.int__content True True True True) )/\true )) (( ((Lz77__token_array.first Lz77__decode_fast__input.input) <= Lz77__decode_fast__L_5__index.index.int__content) /\ (Lz77__decode_fast__L_5__index.index.int__content <= (Lz77__token_array.last Lz77__decode_fast__input.input)) ))) };
           () (* Check for absence of RTE in the invariant of loop lz77.adb:125 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop lz77.adb:125 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:125 *)
           ;
           (if ((Lz77__decode_fast__L_5__index.index.int__content = temp___416)) then (
             raise Lz77__decode_fast__L_5.L_5));
           ([#"lz77.adb" 125 0 0] [#"lz77.adb" 125 0 0] (Lz77__decode_fast__L_5__index.index.int__content <- ( (Lz77__decode_fast__L_5__index.index.int__content + (1 : int)) )));
           ();
           ( [@GP_Sloc:lz77.adb:128:45] ([#"lz77.adb" 128 0 0] ([#"lz77.adb" 128 0 0] ( [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__R32b.r32b.int__content <- ( (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length)) ));
           [#"lz77.adb" 128 0 0] assume { [#"lz77.adb" 128 0 0] (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__L_6__R32b.r32b.int__content True False True True) } ))) );
           ( [@GP_Sloc:lz77.adb:128:53] ([#"lz77.adb" 128 0 0] (let temp___417 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
           (let temp___418 [@mlw:proxy_symbol] [@introduced] = Lz77__decode_fast__L_6__R32b.r32b.int__content in (
            ( [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <- ( temp___417 ));
            () (* Translation of an Ada loop from lz77.adb:128 *)
            ;
            (if ((Boolean.andb((temp___417 <= Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) ((Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <= temp___418)))) then (
             [#"lz77.adb" 128 0 0] try
              ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output_length.output_length.int__content in (
               ()))
               in () end ;
              (let temp___426 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
              ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output_length.output_length.int__content)} 
              in _f) in (
               ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output_length.output_length.int__content in (
                ()))
                in () end ;
               (let temp___424 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
               ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output_length.output_length.int__content)} 
               in _f) in (
                ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                 ()))
                 in () end ;
                (let temp___422 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : Array__Int__Standard__character.map
                ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content)} 
                in _f) in (
                 ( [#"lz77.adb" 128 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content in (
                  ()))
                  in () end ;
                 (let temp___420 [@mlw:proxy_symbol] [@introduced] = [#"lz77.adb" 128 0 0] (val _f : int
                 ensures {[#"lz77.adb" 128 0 0] (result = Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)} 
                 in _f) in (
                  ( () (* First unroling of the loop statements appearing before the loop invariant of loop lz77.adb:128 *)
                  ;
                  ();
                  ( [@GP_Sloc:lz77.adb:129:13] ([#"lz77.adb" 129 0 0] (if (( ([#"lz77.adb" 129 0 0] [#"lz77.adb" 129 0 0] (([@branch_id=2948] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
                  ( [@branch_id=2948] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:lz77.adb:130:30] ([#"lz77.adb" 130 0 0] [#"lz77.adb" 130 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 130 0 0] ( [@GP_Sloc:lz77.adb:130:47] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:130:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_length_assign__add] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
                   ()))) );
                  ( [@GP_Sloc:lz77.adb:132:13] ([#"lz77.adb" 132 0 0] (if (( ([#"lz77.adb" 132 0 0] [#"lz77.adb" 132 0 0] (([@branch_id=2961] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= ([#"lz77.adb" 132 0 0] ( [@vc:annotation] [@comment:            if Output_Length <= Output'Last and Output_Length >= Input(Index).Offset + Output'First then                                                                                      ^ lz77.adb:132:86:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@GP_Shape:L_5_while__L_6_while__if__and__cmp__add] [@GP_Sloc:lz77.adb:132:86] (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) + (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                   ()))
                   in () end ;
                  Lz77__decode_fast__output.output__first )))))) ))))) )));
                  ( [@branch_id=2961] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:lz77.adb:133:38] ([#"lz77.adb" 133 0 0] [#"lz77.adb" 133 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 133 0 0] assert { [#"lz77.adb" 133 0 0] ([#"lz77.adb" 133 0 0] ( [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                       ^ lz77.adb:133:23:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:23] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                   Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) ((let temp___419 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:133:62] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                    (  assert {  ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:73] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:62] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= temp___419) /\ (temp___419 <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                    temp___419 )))
                   )))))))) ))) ) )) else (
                   ()))) );
                  () (* While loop translating the Ada loop from lz77.adb:128 *)
                  ;
                  (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                   (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 136 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                      ^ lz77.adb:136:118:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:136:118] [@GP_Shape:L_5_while__L_6_while__pragargs__if__cmp__add] (Standard__integer.range_check_((temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content))) )))) else (
                   (Boolean.of_int((1 : int))))) in (
                    begin ensures {true} let _ = (let _ = () in (
                    ()))
                    in () end ))
                  ;
                   while True do
                   invariant { 
                    ([#"lz77.adb" 136 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Shape:L_5_while__L_6_while__pragargs__if] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                   ^ lz77.adb:136:35:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:77] [@GP_Sloc:lz77.adb:136:35] (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                     ( [@GP_Sloc:lz77.adb:136:77] [@GP_Pretty_Ada:3004] (Lz77__decode_fast__output_length.output_length.int__content = (temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) )) else (
                     ( [@GP_Pretty_Ada:23372] [@GP_Sloc:lz77.adb:136:35] true ))) ))
                    }
                   ( () (* Assume implicit invariants from the loop lz77.adb:128 *)
                   ;
                    assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((1 : int) <= Lz77__decode_fast__L_6__R32b.r32b.int__content) )) then (
                    (Lz77__decode_fast__L_6__T33b.dynamic_property (1 : int) Lz77__decode_fast__L_6__R32b.r32b.int__content Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content)) else true) )/\true ) /\ (if (True) then (
                    true) else (
                    (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Lz77__decode_fast__output_length.output_length.int__content False True True True) )/\true )) (( ((1 : int) <= Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content) /\ (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <= Lz77__decode_fast__L_6__R32b.r32b.int__content) ))) };
                   () (* Check for absence of RTE in the invariant of loop lz77.adb:128 *)
                   ;
                   () (* Loop statements appearing after the loop invariant of loop lz77.adb:128 *)
                   ;
                   () (* Check for the exit condition and loop statements appearing before the loop invariant of loop lz77.adb:128 *)
                   ;
                   (if ((Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content = temp___418)) then (
                     raise Lz77__decode_fast__L_6.L_6));
                   ([#"lz77.adb" 128 0 0] [#"lz77.adb" 128 0 0] (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content <- ( (Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content + (1 : int)) )));
                   ();
                   ( [@GP_Sloc:lz77.adb:129:13] ([#"lz77.adb" 129 0 0] (if (( ([#"lz77.adb" 129 0 0] [#"lz77.adb" 129 0 0] (([@branch_id=2948] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
                   ( [@branch_id=2948] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:lz77.adb:130:30] ([#"lz77.adb" 130 0 0] [#"lz77.adb" 130 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 130 0 0] ( [@GP_Sloc:lz77.adb:130:47] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:130:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:71] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_length_assign__add] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
                    ()))) );
                   ( [@GP_Sloc:lz77.adb:132:13] ([#"lz77.adb" 132 0 0] (if (( ([#"lz77.adb" 132 0 0] [#"lz77.adb" 132 0 0] (([@branch_id=2961] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                    ()))
                    in () end ;
                   Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= ([#"lz77.adb" 132 0 0] ( [@vc:annotation] [@comment:            if Output_Length <= Output'Last and Output_Length >= Input(Index).Offset + Output'First then                                                                                      ^ lz77.adb:132:86:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:75] [@GP_Shape:L_5_while__L_6_while__if__and__cmp__add] [@GP_Sloc:lz77.adb:132:86] (Standard__integer.range_check_(((Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) + (Standard__integer__rep.to_rep(( [#"lz77.adb" 132 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
                    ()))
                    in () end ;
                   Lz77__decode_fast__output.output__first )))))) ))))) )));
                   ( [@branch_id=2961] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:lz77.adb:133:38] ([#"lz77.adb" 133 0 0] [#"lz77.adb" 133 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 133 0 0] assert { [#"lz77.adb" 133 0 0] ([#"lz77.adb" 133 0 0] ( [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_INDEX_CHECK] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                       ^ lz77.adb:133:23:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:23] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                    Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) ((let temp___419 [@mlw:proxy_symbol] [@introduced] = ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:133:62] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content - (Standard__natural__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset))))) )) in (
                     (  assert {  ([#"lz77.adb" 133 0 0] ( [@vc:annotation] [@GP_Id:73] [@GP_Shape:L_5_while__L_6_while__if__output_assign__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:133:62] [@comment:               Output(Output_Length) := Output(Output_Length - Input(Index).Offset);                                                              ^ lz77.adb:133:62:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= temp___419) /\ (temp___419 <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
                     temp___419 )))
                    )))))))) ))) ) )) else (
                    ()))) );
                   (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
                    (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 136 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:76] [@comment:            pragma Loop_Invariant(if Output_Length < Natural'Last - 1  then Output_Length = Output_Length'Loop_Entry + TokenIndex);                                                                                                                      ^ lz77.adb:136:118:VC_OVERFLOW_CHECK] [@GP_Sloc:lz77.adb:136:118] [@GP_Shape:L_5_while__L_6_while__pragargs__if__cmp__add] (Standard__integer.range_check_((temp___426 + Lz77__decode_fast__L_6__tokenindex.tokenindex.int__content))) )))) else (
                    (Boolean.of_int((1 : int))))) in (
                     begin ensures {true} let _ = (let _ = () in (
                     ()))
                     in () end ))
                    )
                  done )))
                  )))
                 )))
                )))
               )
             with
              Lz77__decode_fast__L_6.L_6 -> ()
             end)) )))
           ))
           ) );
           ( [@GP_Sloc:lz77.adb:139:10] ([#"lz77.adb" 139 0 0] (if (( ([#"lz77.adb" 139 0 0] [#"lz77.adb" 139 0 0] (([@branch_id=3011] Main.spark__branch).bool__content <- ( (Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int)) )));
           ( [@branch_id=3011] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:lz77.adb:140:30] ([#"lz77.adb" 140 0 0] [#"lz77.adb" 140 0 0] (Lz77__decode_fast__output_length.output_length.int__content <- ( ([#"lz77.adb" 140 0 0] ( [@GP_Shape:L_5_while__if__output_length_assign__add] [@comment:               Output_Length := Output_Length + 1;                                               ^ lz77.adb:140:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Sloc:lz77.adb:140:47] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:78] (Standard__integer.range_check_((Lz77__decode_fast__output_length.output_length.int__content + (1 : int)))) )) ))) ) )) else (
            ()))) );
           ( [@GP_Sloc:lz77.adb:142:10] ([#"lz77.adb" 142 0 0] (if (( ([#"lz77.adb" 142 0 0] [#"lz77.adb" 142 0 0] (([@branch_id=3024] Main.spark__branch).bool__content <- ( (Boolean.andb((Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep(( [#"lz77.adb" 142 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
            ()))
            in () end ;
           Lz77__decode_fast__output.output__last ))))) ((Lz77__decode_fast__output_length.output_length.int__content >= (Standard__integer__rep.to_rep(( [#"lz77.adb" 142 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content in (
            ()))
            in () end ;
           Lz77__decode_fast__output.output__first )))))) )));
           ( [@branch_id=3024] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:lz77.adb:143:35] ([#"lz77.adb" 143 0 0] [#"lz77.adb" 143 0 0] (Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Lz77__decode_fast__output.output.Array__Int__Standard__character.map__content) (( [#"lz77.adb" 143 0 0] assert { [#"lz77.adb" 143 0 0] ([#"lz77.adb" 143 0 0] ( [@vc:annotation] [@GP_Shape:L_5_while__if__output_assign__ixdcomp] [@comment:            Output(Output_Length) := Input(Index).Next_C;                    ^ lz77.adb:143:20:VC_INDEX_CHECK] [@GP_Id:79] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:lz77.adb:143:20] ( ((Standard__integer__rep.to_rep Lz77__decode_fast__output.output__first) <= Lz77__decode_fast__output_length.output_length.int__content) /\ (Lz77__decode_fast__output_length.output_length.int__content <= (Standard__integer__rep.to_rep Lz77__decode_fast__output.output__last)) ) )) };
            Lz77__decode_fast__output_length.output_length.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Lz77__token.get((Lz77__token_array.to_array(Lz77__decode_fast__input.input))) (Lz77__decode_fast__L_5__index.index.int__content)).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__next_c)))))) ))) ) )) else (
            ()))) );
           (let temp___inv_433 [@mlw:proxy_symbol] [@introduced] = (if ((Lz77__decode_fast__output_length.output_length.int__content < (2147483646 : int))) then (
            (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.adb" 146 0 0] ( [@GP_Shape:L_5_while__pragargs__if__cmp__call_to_integer] [@GP_Id:81] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:lz77.adb:146:90] [@vc:annotation] [@comment:         pragma Loop_Invariant (if Output_Length < Natural'Last - 1 then Output_Length = To_Integer(Decoded_Length(Input(Input'First..Index))));                                                                                          ^ lz77.adb:146:90:VC_PRECONDITION] (Big_integers__to_integer.to_integer((Lz77__decoded_length___axiom.decoded_length((let temp___435 [@mlw:proxy_symbol] [@introduced] = (let temp___434 [@mlw:proxy_symbol] [@introduced] = ( [#"lz77.adb" 146 0 0] begin ensures {true} let _ = (let _ = Lz77__decode_fast__input.input in (
             ()))
             in () end ;
            (Lz77__token_array.first(Lz77__decode_fast__input.input)) ) in (
             (Lz77__decode_fast__L_5__T37b.of_array(( [#"lz77.adb" 146 0 0] assert { [#"lz77.adb" 146 0 0] ([#"lz77.adb" 146 0 0] ( [@GP_Id:80] [@GP_Sloc:lz77.adb:146:116] [@vc:annotation] [@comment:         pragma Loop_Invariant (if Output_Length < Natural'Last - 1 then Output_Length = To_Integer(Decoded_Length(Input(Input'First..Index))));                                                                                                                    ^ lz77.adb:146:116:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_5_while__pragargs__if__cmp__call_to_integer__call_decoded_length__slice] ( (temp___434 <= Lz77__decode_fast__L_5__index.index.int__content) -> ( ( ((Lz77__token_array.first Lz77__decode_fast__input.input) <= temp___434) /\ (temp___434 <= (Lz77__token_array.last Lz77__decode_fast__input.input)) ) /\ ( ((Lz77__token_array.first Lz77__decode_fast__input.input) <= Lz77__decode_fast__L_5__index.index.int__content) /\ (Lz77__decode_fast__L_5__index.index.int__content <= (Lz77__token_array.last Lz77__decode_fast__input.input)) ) ) ) )) };
             (Lz77__token_array.to_array(Lz77__decode_fast__input.input)) )) (temp___434) (Lz77__decode_fast__L_5__index.index.int__content))))
             in (
             (Lz77__token_array.of_array((Lz77__decode_fast__L_5__T37b.to_array(temp___435))) ((Lz77__decode_fast__L_5__T37b.first(temp___435))) ((Lz77__decode_fast__L_5__T37b.last(temp___435))))))
            )))) )))) else (
            (Boolean.of_int((1 : int))))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            )
          done )))
          )))
         )))
        )))
       )
     with
      Lz77__decode_fast__L_5.L_5 -> ()
     end)) )))
   ))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Lz77__decode_fast__output_length.output_length.int__content = ([#"lz77.ads" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:83] [@comment:     Post => Output_Length = To_Integer(Decoded_Length(Input));                              ^ lz77.ads:116:30:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:lz77.ads:116:30] [@GP_Shape:pragargs__cmp__call_to_integer] (Big_integers__to_integer.to_integer((Lz77__decoded_length___axiom.decoded_length(Lz77__decode_fast__input.input)))) ))) in (
   ()))
   in () end  )
end
