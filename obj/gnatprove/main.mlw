(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 31 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 30 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 104 0 0][@name:Default_Priority] [@model_trace:9497] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 val constant first 
   : int
  ensures { result =  (31 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "token" defined at lz77.ads:14, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Lz77__token__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 type __split_fields =
  { rec__lz77__token__offset [@model_trace:.2582] [@name:Offset] : Standard__natural.natural; rec__lz77__token__length [@model_trace:.2592] [@name:Length] : Standard__natural.natural; rec__lz77__token__next_c [@model_trace:.2602] [@name:Next_C] : Standard__character.character }
 
 function __split_fields_rec__lz77__token__offset__projection [@model_trace:.2582] [@name:Offset] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__lz77__token__offset
 
 meta "model_projection" function __split_fields_rec__lz77__token__offset__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__offset__projection
 
 function __split_fields_rec__lz77__token__length__projection [@model_trace:.2592] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__lz77__token__length
 
 meta "model_projection" function __split_fields_rec__lz77__token__length__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__length__projection
 
 function __split_fields_rec__lz77__token__next_c__projection [@model_trace:.2602] [@name:Next_C] 
   (a : __split_fields) : Standard__character.character =
  a.rec__lz77__token__next_c
 
 meta "model_projection" function __split_fields_rec__lz77__token__next_c__projection
 
 meta "inline:no" function __split_fields_rec__lz77__token__next_c__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate lz77__token__offset__pred 
   (a : __rep) =
  true
 val lz77__token__offset__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__offset__pred (a : __rep) }
 
 val rec__lz77__token__offset_ 
   (a : __rep) : Standard__natural.natural
  requires {  (lz77__token__offset__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__offset) }
 
 predicate lz77__token__length__pred 
   (a : __rep) =
  true
 val lz77__token__length__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__length__pred (a : __rep) }
 
 val rec__lz77__token__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (lz77__token__length__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__length) }
 
 predicate lz77__token__next_c__pred 
   (a : __rep) =
  true
 val lz77__token__next_c__pred 
   (a : __rep) : bool
  ensures { result <-> lz77__token__next_c__pred (a : __rep) }
 
 val rec__lz77__token__next_c_ 
   (a : __rep) : Standard__character.character
  requires {  (lz77__token__next_c__pred a) }
  ensures {  (result = a.__split_fields.rec__lz77__token__next_c) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Standard__natural__rep.to_rep a.__split_fields.rec__lz77__token__offset) = (Standard__natural__rep.to_rep b.__split_fields.rec__lz77__token__offset)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__lz77__token__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__lz77__token__length)) )/\((Standard__character__rep.to_rep a.__split_fields.rec__lz77__token__next_c) = (Standard__character__rep.to_rep b.__split_fields.rec__lz77__token__next_c)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "token" defined at lz77.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Lz77__token
 use export Lz77__token__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type token =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant lz77__token__offset__first__bit 
   : int

 
 val constant lz77__token__offset__last__bit 
   : int

 
 val constant lz77__token__offset__position 
   : int

 
 axiom lz77__token__offset__first__bit_axiom :
  ((lz77__token__offset__first__bit ) >= (0 : int))
 
 axiom lz77__token__offset__last__bit_axiom :
  ((lz77__token__offset__last__bit ) > (lz77__token__offset__first__bit ))
 
 axiom lz77__token__offset__position_axiom :
  ((lz77__token__offset__position ) >= (0 : int))
 
 val constant lz77__token__length__first__bit 
   : int

 
 val constant lz77__token__length__last__bit 
   : int

 
 val constant lz77__token__length__position 
   : int

 
 axiom lz77__token__length__first__bit_axiom :
  ((lz77__token__length__first__bit ) >= (0 : int))
 
 axiom lz77__token__length__last__bit_axiom :
  ((lz77__token__length__last__bit ) > (lz77__token__length__first__bit ))
 
 axiom lz77__token__length__position_axiom :
  ((lz77__token__length__position ) >= (0 : int))
 
 val constant lz77__token__next_c__first__bit 
   : int

 
 val constant lz77__token__next_c__last__bit 
   : int

 
 val constant lz77__token__next_c__position 
   : int

 
 axiom lz77__token__next_c__first__bit_axiom :
  ((lz77__token__next_c__first__bit ) >= (0 : int))
 
 axiom lz77__token__next_c__last__bit_axiom :
  ((lz77__token__next_c__last__bit ) > (lz77__token__next_c__first__bit ))
 
 axiom lz77__token__next_c__position_axiom :
  ((lz77__token__next_c__position ) >= (0 : int))
 
 val function user_eq 
   (a : token) (b : token) : bool
 
 val constant dummy 
   : token

 
 type token__ref =
  { mutable token__content : token }
 
 function token__ref_token__content__projection 
   (a : token__ref) : token =
  a.token__content
 
 meta "model_projection" function token__ref_token__content__projection
 
 meta "inline:no" function token__ref_token__content__projection
 
 val token__havoc 
   (x : token__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "token_array" defined at lz77.ads:21, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Lz77__token
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token as Lz77__token

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Lz77__token.token
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    (Lz77__token.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     (Lz77__token.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "token_array" defined at lz77.ads:21, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Lz77__token__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Lz77__token.component_type, 
 type map = Array__Int__Lz77__token.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Lz77__token.get

end

(* Module for axiomatizing type "token_array" defined at lz77.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Lz77__token_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 type component_type =
  Lz77__token.token
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Lz77__token.map, 
 function array_bool_eq = Array__Int__Lz77__token.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type token_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type token_array__ref =
  { mutable token_array__content : token_array }
 
 function token_array__ref_token_array__content__projection 
   (a : token_array__ref) : token_array =
  a.token_array__content
 
 meta "model_projection" function token_array__ref_token_array__content__projection
 
 meta "inline:no" function token_array__ref_token_array__content__projection
 
 val token_array__havoc 
   (x : token_array__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTt1SP1" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__TTt1SP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTt1SP1 =
  < range 1 2 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTt1SP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTt1SP1__ref =
  { mutable tTt1SP1__content : tTt1SP1 }
 
 function tTt1SP1__ref_tTt1SP1__content__projection 
   (a : tTt1SP1__ref) : tTt1SP1 =
  a.tTt1SP1__content
 
 meta "model_projection" function tTt1SP1__ref_tTt1SP1__content__projection
 
 meta "inline:no" function tTt1SP1__ref_tTt1SP1__content__projection
 
 val tTt1SP1__havoc 
   (x : tTt1SP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTt1SP1" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__TTt1SP1__rep
 use        Main__TTt1SP1 as Main__TTt1SP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTt1SP1.tTt1SP1) : int =
  (Main__TTt1SP1.tTt1SP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTt1SP1.tTt1SP1, 
 predicate in_range = Main__TTt1SP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tt1S" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__Tt1S
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 type component_type =
  Lz77__token.token
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Lz77__token.map, 
 function array_bool_eq = Array__Int__Lz77__token.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T1b" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t1b =
  < range 1 2 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content : t1b }
 
 function t1b__ref_t1b__content__projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref_t1b__content__projection
 
 meta "inline:no" function t1b__ref_t1b__content__projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__T1b__rep
 use        Main__T1b as Main__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T1b.t1b) : int =
  (Main__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T1b.t1b, 
 predicate in_range = Main__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 type component_type =
  Lz77__token.token
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Lz77__token.map, 
 function array_bool_eq = Array__Int__Lz77__token.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "byte_array" defined at lz77.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Lz77__byte_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type byte_array =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type byte_array__ref =
  { mutable byte_array__content : byte_array }
 
 function byte_array__ref_byte_array__content__projection 
   (a : byte_array__ref) : byte_array =
  a.byte_array__content
 
 meta "model_projection" function byte_array__ref_byte_array__content__projection
 
 meta "inline:no" function byte_array__ref_byte_array__content__projection
 
 val byte_array__havoc 
   (x : byte_array__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTbSP1" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__TTbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTbSP1 =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTbSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTbSP1__ref =
  { mutable tTbSP1__content : tTbSP1 }
 
 function tTbSP1__ref_tTbSP1__content__projection 
   (a : tTbSP1__ref) : tTbSP1 =
  a.tTbSP1__content
 
 meta "model_projection" function tTbSP1__ref_tTbSP1__content__projection
 
 meta "inline:no" function tTbSP1__ref_tTbSP1__content__projection
 
 val tTbSP1__havoc 
   (x : tTbSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTbSP1" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__TTbSP1__rep
 use        Main__TTbSP1 as Main__TTbSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTbSP1.tTbSP1) : int =
  (Main__TTbSP1.tTbSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTbSP1.tTbSP1, 
 predicate in_range = Main__TTbSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TbS" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__TbS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t3b =
  < range 1 100 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3b__ref =
  { mutable t3b__content : t3b }
 
 function t3b__ref_t3b__content__projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref_t3b__content__projection
 
 meta "inline:no" function t3b__ref_t3b__content__projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3b" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__T3b__rep
 use        Main__T3b as Main__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T3b.t3b) : int =
  (Main__T3b.t3b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T3b.t3b, 
 predicate in_range = Main__T3b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4b" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "input" defined at lz77.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decode__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 94 0 0][@model_trace:2989] [@model_projected] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T5b" defined at main.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Main__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (40 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:7732] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type field =
  < range 0 255 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type field__ref =
  { mutable field__content : field }
 
 function field__ref_field__content__projection 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref_field__content__projection
 
 meta "inline:no" function field__ref_field__content__projection
 
 val field__havoc 
   (x : field__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field__rep
 use        Ada__text_io__field as Ada__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__field.field) : int =
  (Ada__text_io__field.field'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__field.field, 
 predicate in_range = Ada__text_io__field.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type num =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type num__ref =
  { mutable num__content : num }
 
 function num__ref_num__content__projection 
   (a : num__ref) : num =
  a.num__content
 
 meta "model_projection" function num__ref_num__content__projection
 
 meta "inline:no" function num__ref_num__content__projection
 
 val num__havoc 
   (x : num__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num__rep
 use        Ada__integer_text_io__num as Ada__integer_text_io__num
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__integer_text_io__num.num) : int =
  (Ada__integer_text_io__num.num'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__integer_text_io__num.num, 
 predicate in_range = Ada__integer_text_io__num.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type number_base =
  < range 2 16 >
 
 val constant first 
   : int
  ensures { result =  (2 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type number_base__ref =
  { mutable number_base__content : number_base }
 
 function number_base__ref_number_base__content__projection 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref_number_base__content__projection
 
 meta "inline:no" function number_base__ref_number_base__content__projection
 
 val number_base__havoc 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base__rep
 use        Ada__text_io__number_base as Ada__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__number_base.number_base) : int =
  (Ada__text_io__number_base.number_base'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__number_base.number_base, 
 predicate in_range = Ada__text_io__number_base.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "item" defined at a-tiinio.ads:81 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"a-tiinio.ads" 81 0 0][@name:Item] [@model_trace:21422] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:81 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "width" defined at a-tiinio.ads:82 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__width
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant width [#"a-tiinio.ads" 82 0 0][@model_trace:21431] [@name:Width] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:82 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__width___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "base" defined at a-tiinio.ads:83 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__base
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant base [#"a-tiinio.ads" 83 0 0][@name:Base] [@model_trace:21441] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "base" defined at a-tiinio.ads:83 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive_count =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive_count__ref =
  { mutable positive_count__content : positive_count }
 
 function positive_count__ref_positive_count__content__projection 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref_positive_count__content__projection
 
 meta "inline:no" function positive_count__ref_positive_count__content__projection
 
 val positive_count__havoc 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count__rep
 use        Ada__text_io__positive_count as Ada__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__positive_count.positive_count) : int =
  (Ada__text_io__positive_count.positive_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__positive_count.positive_count, 
 predicate in_range = Ada__text_io__positive_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "spacing" defined at a-textio.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__2__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"a-textio.ads" 264 0 0][@name:Spacing] [@model_trace:6184] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__2__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "R6b" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Constant *)
module Main__L_1__R6b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r6b [#"main.adb" 20 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T7b" defined at main.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content : t7b }
 
 function t7b__ref_t7b__content__projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref_t7b__content__projection
 
 meta "inline:no" function t7b__ref_t7b__content__projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for defining the constant "item" defined at a-textio.ads:392, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"a-textio.ads" 392 0 0][@name:Item] [@model_trace:7239] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:392, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T8b" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (44 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "input" defined at lz77.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__is_valid__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 100 0 0][@model_projected] [@name:Input] [@model_trace:3044] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__is_valid__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input" defined at lz77.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__valid__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 65 0 0][@model_projected] [@name:Input] [@model_trace:2841] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__valid__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "upto" defined at lz77.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__valid__upto
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant upto [#"lz77.ads" 65 0 0][@model_trace:2850] [@name:Upto] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "upto" defined at lz77.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__valid__upto___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T18s" defined at lz77.ads:72, created in Gnat2Why.Types.Translate_Type *)
module Lz77__valid__L17s__T18s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content : t18s }
 
 function t18s__ref_t18s__content__projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref_t18s__content__projection
 
 meta "inline:no" function t18s__ref_t18s__content__projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end


(* Module for axiomatizing the record theory associated to type "big_integer" defined at big_integers.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Big_integers__big_integer__rep
 use "_gnatprove_standard".Main
 use "int".Int

 type __main_type = int
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool = a = b
 
 type __rep = int
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool = a = b

end

(* Module for axiomatizing type "big_integer" defined at big_integers.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Big_integers__big_integer
 use Big_integers__big_integer__rep
 use "_gnatprove_standard".Main
 use "int".Int

 type big_integer =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   : int
 
 function alignment 
   : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  ((object__size ) >= 0)
 
 axiom alignment_axiom :
  ((alignment ) >= 0)
 
 function user_eq 
   (a : big_integer) (b : big_integer) : bool
 
 function dummy 
   : big_integer
 
 type big_integer__ref =
  { mutable big_integer__content : big_integer }
 
 function big_integer__ref_big_integer__content__projection 
   (a : big_integer__ref) : big_integer =
  a.big_integer__content
 
 meta "model_projection" function big_integer__ref_big_integer__content__projection
 
 meta "inline:no" function big_integer__ref_big_integer__content__projection
 
 val big_integer__havoc 
   (x : big_integer__ref) : unit
  writes {x}

 predicate dynamic_invariant [@inline]
   (temp___expr_158 : big_integer) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  true
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_159 : big_integer) (temp___skip_top_level_160 : bool)  =
  true

end


(* Module for defining the constant "zero" defined at big_integers.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Big_integers__zero
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 val constant zero [#"big_integers.ads" 8 0 0]
   : Big_integers__big_integer.big_integer
   ensures { result = 0 }

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for possibly declaring a logic function for "Oeq" defined at big_integers.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oeq
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oeq__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l = r
 
 predicate oeq__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oeq 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (oeq__logic l r)) /\ (oeq__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Olt" defined at big_integers.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Olt
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function olt__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l < r
 
 predicate olt__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val olt 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (olt__logic l r)) /\ (olt__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Ole" defined at big_integers.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Ole
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function ole__logic
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l <= r
 
 predicate ole__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val ole 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (ole__logic l r)) /\ (ole__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "Ogt" defined at big_integers.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Ogt
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function ogt__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l > r
 
 predicate ogt__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val ogt 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (ogt__logic l r)) /\ (ogt__function_guard result l r) )/\true ) }
  
end

(* Module for possibly declaring a logic function for "Oge" defined at big_integers.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oge
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oge__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool = l >= r
 
 predicate oge__function_guard 
   (result : bool) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oge 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : bool
  requires {  true }
  ensures {  ( ( (result = (oge__logic l r)) /\ (oge__function_guard result l r) )/\true ) }

end

(* Module for possibly declaring a logic function for "to_big_integer" defined at big_integers.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__to_big_integer
 use "_gnatprove_standard".Main
 use Big_integers__big_integer

 function to_big_integer__logic
   (arg : int) : Big_integers__big_integer.big_integer = arg
 
 predicate to_big_integer__function_guard 
   (result : Big_integers__big_integer.big_integer) (arg : int) = true

 val to_big_integer 
   (arg : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (to_big_integer__logic arg)) /\ (to_big_integer__function_guard result arg) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

module Big_integers__to_big_integer__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer

 function to_big_integer__2__logic 
   (arg : int) : Big_integers__big_integer.big_integer = arg
 
 predicate to_big_integer__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (arg : int) 

 val to_big_integer__2 
   (arg : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (to_big_integer__2__logic arg)) /\ (to_big_integer__2__function_guard result arg) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
 
end

(* Module for possibly declaring a logic function for "in_range" defined at big_integers.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__in_range
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int
 
 function in_range__logic
   (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) : bool = low <= arg /\ arg <= high
 
 predicate in_range__function_guard 
   (result : bool) (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) = true

 val in_range 
   (arg : Big_integers__big_integer.big_integer) (low : Big_integers__big_integer.big_integer) (high : Big_integers__big_integer.big_integer) : bool
  requires {  true }
(*  ensures {  ( ( (result = (in_range__logic arg low high)) /\ (in_range__function_guard result arg low high) )/\( (result = True) <-> ( ((epsilon temp___result_178 : bool.
   ( (temp___result_178 = (Big_integers__Ole.ole low arg)) /\ (Big_integers__Ole.ole__function_guard temp___result_178 low arg) )) = True) /\ ((epsilon temp___result_179 : bool.
   ( (temp___result_179 = (Big_integers__Ole.ole arg high)) /\ (Big_integers__Ole.ole__function_guard temp___result_179 arg high) )) = True) ) ) ) } *)
   ensures { result = (in_range__logic arg low high) /\ (in_range__function_guard result arg low high) }
end

(* Module for possibly declaring a logic function for "to_integer" defined at big_integers.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__to_integer
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use Big_integers__to_big_integer
 use Big_integers__in_range
 use "int".Int

 function to_integer__logic 
   (arg : Big_integers__big_integer.big_integer) : int = arg
 
 predicate to_integer__function_guard 
   (result : int) (arg : Big_integers__big_integer.big_integer) = true

 val to_integer 
   (arg : Big_integers__big_integer.big_integer) : int
   requires { in_range__logic arg (to_big_integer__logic (-2147483648)) (to_big_integer__logic 2147483647)}
  ensures {  ( ( (result = (to_integer__logic arg)) /\ (to_integer__function_guard result arg) ) ) }

end

(* Module for possibly declaring a logic function for "Osubtract" defined at big_integers.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Osubtract
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function osubtract__logic 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = -l
 
 predicate osubtract__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) 

 val osubtract 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (osubtract__logic l)) /\ (osubtract__function_guard result l) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
 
end

(* Module for possibly declaring a logic function for "Oabs" defined at big_integers.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oabs
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Abs
 
 function oabs__logic 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = abs l
 
 predicate oabs__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer)

 val oabs 
   (l : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oabs__logic l)) /\ (oabs__function_guard result l) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Oadd" defined at big_integers.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oadd__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function oadd__2__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l + r
 
 predicate oadd__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) = true

 val oadd__2 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oadd__2__logic l r)) /\ (oadd__2__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Osubtract__2" defined at big_integers.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Osubtract__2
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function osubtract__2__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l - r
 
 predicate osubtract__2__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val osubtract__2 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (osubtract__2__logic l r)) /\ (osubtract__2__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Omultiply" defined at big_integers.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Omultiply
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int

 function omultiply__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = l * r
 
 predicate omultiply__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) 

 val omultiply 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (omultiply__logic l r)) /\ (omultiply__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "Odivide" defined at big_integers.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Odivide
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".EuclideanDivision

 function odivide__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = div l r
 
 predicate odivide__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val odivide 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (odivide__logic l r)) /\ (odivide__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Omod" defined at big_integers.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Omod
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".EuclideanDivision
 use "int".Int
 
 function omod__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = if r > 0 then mod l r else mod l r + r
 
 predicate omod__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val omod 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (omod__logic l r)) /\ (omod__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "Orem" defined at big_integers.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Orem
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Int
 use "int".EuclideanDivision

 function orem__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = mod l r
 
 predicate orem__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) 

 val orem 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires { r <> 0 }
  ensures {  ( ( (result = (orem__logic l r)) /\ (orem__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "Oexpon" defined at big_integers.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__Oexpon
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".Power

 function oexpon__logic 
   (l : Big_integers__big_integer.big_integer) (r : int) : Big_integers__big_integer.big_integer = power l r
 
 predicate oexpon__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : int) 

 val oexpon 
   (l : Big_integers__big_integer.big_integer) (r : int) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (oexpon__logic l r)) /\ (oexpon__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }
  
end

(* Module for possibly declaring a logic function for "min" defined at big_integers.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__min
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".MinMax

 function min__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = min l r
 
 predicate min__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val min 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (min__logic l r)) /\ (min__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end

(* Module for possibly declaring a logic function for "max" defined at big_integers.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Big_integers__max
 use "_gnatprove_standard".Main
 use Big_integers__big_integer
 use "int".MinMax

 function max__logic 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer = max l r
 
 predicate max__function_guard 
   (result : Big_integers__big_integer.big_integer) (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer)

 val max 
   (l : Big_integers__big_integer.big_integer) (r : Big_integers__big_integer.big_integer) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (max__logic l r)) /\ (max__function_guard result l r) )/\(Big_integers__big_integer.dynamic_invariant result True False True True) ) }

end


(* Module for axiomatizing the array theory associated to type "partial_length" defined at lz77.ads:31, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Big_integers__big_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Big_integers__big_integer as Big_integers__big_integer

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Big_integers__big_integer.big_integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_157   : int.
   (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
    (Big_integers__big_integer.user_eq (get a temp___idx_157) (get b ((b__first - a__first) + temp___idx_157)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_157   : int.
    (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
     (Big_integers__big_integer.user_eq (get a temp___idx_157) (get b ((b__first - a__first) + temp___idx_157)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "partial_length" defined at lz77.ads:31, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Big_integers__big_integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Big_integers__big_integer.component_type, 
 type map = Array__Int__Big_integers__big_integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Big_integers__big_integer.get

end

(* Module for axiomatizing type "partial_length" defined at lz77.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Lz77__partial_length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 type component_type =
  Big_integers__big_integer.big_integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Big_integers__big_integer.map, 
 function array_bool_eq = Array__Int__Big_integers__big_integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type partial_length =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type partial_length__ref =
  { mutable partial_length__content : partial_length }
 
 function partial_length__ref_partial_length__content__projection 
   (a : partial_length__ref) : partial_length =
  a.partial_length__content
 
 meta "model_projection" function partial_length__ref_partial_length__content__projection
 
 meta "inline:no" function partial_length__ref_partial_length__content__projection
 
 val partial_length__havoc 
   (x : partial_length__ref) : unit
  writes {x}

end

(* Module for defining the constant "input" defined at lz77.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__length_acc__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 41 0 0][@model_projected] [@model_trace:2662] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__length_acc__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at lz77.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "one" defined at lz77.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__one
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant one [#"lz77.ads" 33 0 0][@name:One] [@model_trace:2642] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T12s" defined at lz77.ads:50, created in Gnat2Why.Types.Translate_Type *)
module Lz77__length_acc__L9s__L11s__T12s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t12s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref =
  { mutable t12s__content : t12s }
 
 function t12s__ref_t12s__content__projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref_t12s__content__projection
 
 meta "inline:no" function t12s__ref_t12s__content__projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "length_acc" defined at lz77.ads:41, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__length_acc
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length

 val function length_acc 
   (input : Lz77__token_array.token_array) : Lz77__partial_length.partial_length
 
 val predicate length_acc__function_guard 
   (temp___result_158 : Lz77__partial_length.partial_length) (input : Lz77__token_array.token_array)

end

(* Module for possibly declaring a logic function for "valid" defined at lz77.ads:65, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__valid
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val function valid 
   (input : Lz77__token_array.token_array) (upto : int) : bool
 
 val predicate valid__function_guard 
   (temp___result_159 : bool) (input : Lz77__token_array.token_array) (upto : int)

end

(* Module for possibly declaring a logic function for "is_valid" defined at lz77.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__is_valid
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val function is_valid 
   (input : Lz77__token_array.token_array) : bool
 
 val predicate is_valid__function_guard 
   (temp___result_160 : bool) (input : Lz77__token_array.token_array)

end

(* Module for defining the constant "input" defined at lz77.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decode_fast__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 113 0 0][@model_projected] [@name:Input] [@model_trace:3084] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input" defined at lz77.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Lz77__decoded_length__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array

 val constant input [#"lz77.ads" 54 0 0][@model_trace:2785] [@model_projected] [@name:Input] 
   : Lz77__token_array.token_array

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at lz77.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decoded_length__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decoded_length" defined at lz77.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decoded_length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Big_integers__big_integer as Big_integers__big_integer

 val function decoded_length 
   (input : Lz77__token_array.token_array) : Big_integers__big_integer.big_integer
 
 val predicate decoded_length__function_guard 
   (temp___result_161 : Big_integers__big_integer.big_integer) (input : Lz77__token_array.token_array)

end

(* Module for axiomatizing type "T9b" defined at main.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Main__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "R10b" defined at main.adb:33, created in Gnat2Why.Decls.Translate_Constant *)
module Main__L_2__R10b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r10b [#"main.adb" 33 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T11b" defined at main.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content : t11b }
 
 function t11b__ref_t11b__content__projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref_t11b__content__projection
 
 meta "inline:no" function t11b__ref_t11b__content__projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "t1" defined at main.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Main__t1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 val t1 [#"main.adb" 8 0 0][@model_trace:2328] [@model_projected] [@name:T1]  : Array__Int__Lz77__token.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t1" defined at main.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__t1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "error" defined at main.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Main__error
 use        "_gnatprove_standard".Main
 use        "int".Int

 val error [#"main.adb" 10 0 0][@model_trace:2367] [@model_projected] [@name:Error]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "error" defined at main.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at main.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Main__b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val b [#"main.adb" 11 0 0][@model_projected] [@name:B] [@model_trace:2376]  : Array__Int__Standard__character.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at main.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "blen" defined at main.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Main__blen
 use        "_gnatprove_standard".Main
 use        "int".Int

 val blen [#"main.adb" 12 0 0][@name:BLen] [@model_trace:2394] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "blen" defined at main.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__blen___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output" defined at lz77.ads:94, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val output [#"lz77.ads" 94 0 0][@model_trace:2998] [@name:Output] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant output__first [#"lz77.ads" 94 0 0][@name:Output] [@model_trace:2998'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant output__last [#"lz77.ads" 94 0 0][@name:Output] [@model_projected] [@model_trace:2998'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output" defined at lz77.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output_length" defined at lz77.ads:95, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__output_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val output_length [#"lz77.ads" 95 0 0][@name:Output_Length] [@model_projected] [@model_trace:3007]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output_length" defined at lz77.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__output_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "error" defined at lz77.ads:95, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode__error
 use        "_gnatprove_standard".Main
 use        "int".Int

 val error [#"lz77.ads" 95 0 0][@model_projected] [@name:Error] [@model_trace:3016]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "error" defined at lz77.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode__error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_width
 use        "_gnatprove_standard".Main
 use        "int".Int

 val default_width [#"a-tiinio.ads" 48 0 0][@model_trace:21193] [@model_projected] [@name:Default_Width]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_width___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_base
 use        "_gnatprove_standard".Main
 use        "int".Int

 val default_base [#"a-tiinio.ads" 49 0 0][@name:Default_Base] [@model_trace:21204] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Variable *)
module Main__L_1__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"main.adb" 20 0 0][@model_projected] [@name:Index] [@model_trace:2429]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at main.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output" defined at lz77.ads:113, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val output [#"lz77.ads" 113 0 0][@name:Output] [@model_trace:3093] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant output__first [#"lz77.ads" 113 0 0][@name:Output] [@model_trace:3093'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant output__last [#"lz77.ads" 113 0 0][@name:Output] [@model_projected] [@model_trace:3093'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output" defined at lz77.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "output_length" defined at lz77.ads:114, created in Gnat2Why.Decls.Translate_Variable *)
module Lz77__decode_fast__output_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val output_length [#"lz77.ads" 114 0 0][@model_trace:3102] [@name:Output_Length] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "output_length" defined at lz77.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lz77__decode_fast__output_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "index" defined at main.adb:33, created in Gnat2Why.Decls.Translate_Variable *)
module Main__L_2__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val index [#"main.adb" 33 0 0][@model_projected] [@model_trace:2490] [@name:Index]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at main.adb:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decode" defined at lz77.ads:94, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decode
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__2" defined at a-tiinio.ads:80 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "new_line__2" defined at a-textio.ads:264, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__2" defined at a-textio.ads:392, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decode_fast" defined at lz77.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lz77__decode_fast
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:33, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) =
  (if (( temp___is_init_162 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_166)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_167 : int) (temp___skip_top_level_168 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) =
  (if (( temp___is_init_169 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_173)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_174 : int) (temp___skip_top_level_175 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) =
  (if (( temp___is_init_176 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_180)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_181 : int) (temp___skip_top_level_182 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) =
  (if (( temp___is_init_183 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_187)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_188 : int) (temp___skip_top_level_189 : bool) }

end

(* Module giving axioms for type "token" defined at lz77.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__token___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token as Lz77__token

 predicate dynamic_invariant [@inline] 
   (temp___expr_194 : Lz77__token.token) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_194 : Lz77__token.token) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_194 : Lz77__token.token) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : Lz77__token.token) (temp___skip_top_level_196 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_195 : Lz77__token.token) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : Lz77__token.token) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "token_array" defined at lz77.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__token_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__token_array as Lz77__token_array

 predicate dynamic_invariant [@inline] 
   (temp___expr_204 : Lz77__token_array.token_array) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) =
  (if (temp___skip_constant_201) then (
   true) else (
   (Lz77__token_array.dynamic_property Standard__positive.first Standard__positive.last (Lz77__token_array.first temp___expr_204) (Lz77__token_array.last temp___expr_204))))
 val dynamic_invariant [@inline] 
   (temp___expr_204 : Lz77__token_array.token_array) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_204 : Lz77__token_array.token_array) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) }

end

(* Module giving axioms for type "TTt1SP1" defined at main.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTt1SP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tt1S" defined at main.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__Tt1S___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 predicate dynamic_invariant [@inline] 
   (temp___expr_210 : Array__Int__Lz77__token.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_210 : Array__Int__Lz77__token.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_210 : Array__Int__Lz77__token.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : Array__Int__Lz77__token.map) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : Array__Int__Lz77__token.map) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : Array__Int__Lz77__token.map) (temp___skip_top_level_213 : bool) }

end

(* Module giving axioms for type "T1b" defined at main.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at main.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "byte_array" defined at lz77.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__byte_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__byte_array as Lz77__byte_array

 predicate dynamic_invariant [@inline] 
   (temp___expr_223 : Lz77__byte_array.byte_array) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) =
  (if (temp___skip_constant_220) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Lz77__byte_array.first temp___expr_223) (Lz77__byte_array.last temp___expr_223))))
 val dynamic_invariant [@inline] 
   (temp___expr_223 : Lz77__byte_array.byte_array) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_223 : Lz77__byte_array.byte_array) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) }

end

(* Module giving axioms for type "TTbSP1" defined at main.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTbSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TbS" defined at main.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TbS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_229 : Array__Int__Standard__character.map) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_229 : Array__Int__Standard__character.map) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_229 : Array__Int__Standard__character.map) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_231 : Array__Int__Standard__character.map) (temp___skip_top_level_232 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_231 : Array__Int__Standard__character.map) (temp___skip_top_level_232 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_231 : Array__Int__Standard__character.map) (temp___skip_top_level_232 : bool) }

end

(* Module giving axioms for type "T3b" defined at main.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at main.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at main.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "field" defined at a-textio.ads:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__field___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__field as Ada__text_io__field

 predicate dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) =
  (if (( temp___is_init_240 \/ (Ada__text_io__field.first <= Ada__text_io__field.last) )) then (
   (Ada__text_io__field.dynamic_property Ada__text_io__field.first Ada__text_io__field.last temp___expr_244)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : int) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__integer_text_io__num___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__integer_text_io__num as Ada__integer_text_io__num

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (( temp___is_init_247 \/ (Ada__integer_text_io__num.first <= Ada__integer_text_io__num.last) )) then (
   (Ada__integer_text_io__num.dynamic_property Ada__integer_text_io__num.first Ada__integer_text_io__num.last temp___expr_251)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : int) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "number_base" defined at a-textio.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__number_base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__number_base as Ada__text_io__number_base

 predicate dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) =
  (if (( temp___is_init_254 \/ (Ada__text_io__number_base.first <= Ada__text_io__number_base.last) )) then (
   (Ada__text_io__number_base.dynamic_property Ada__text_io__number_base.first Ada__text_io__number_base.last temp___expr_258)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_259 : int) (temp___skip_top_level_260 : bool) }

end

(* Module giving axioms for type "positive_count" defined at a-textio.ads:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__positive_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__positive_count as Ada__text_io__positive_count

 predicate dynamic_invariant [@inline] 
   (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) =
  (if (( temp___is_init_261 \/ (Ada__text_io__positive_count.first <= Ada__text_io__positive_count.last) )) then (
   (Ada__text_io__positive_count.dynamic_property Ada__text_io__positive_count.first Ada__text_io__positive_count.last temp___expr_265)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_265 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_266 : int) (temp___skip_top_level_267 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_266 : int) (temp___skip_top_level_267 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_266 : int) (temp___skip_top_level_267 : bool) }

end

(* Module giving axioms for type "T7b" defined at main.adb:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at main.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18s" defined at lz77.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__valid__L17s__T18s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "partial_length" defined at lz77.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__partial_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Lz77__partial_length as Lz77__partial_length

 predicate dynamic_invariant [@inline] 
   (temp___expr_272 : Lz77__partial_length.partial_length) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) =
  (if (temp___skip_constant_269) then (
   true) else (
   (Lz77__partial_length.dynamic_property Standard__positive.first Standard__positive.last (Lz77__partial_length.first temp___expr_272) (Lz77__partial_length.last temp___expr_272))))
 val dynamic_invariant [@inline] 
   (temp___expr_272 : Lz77__partial_length.partial_length) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_272 : Lz77__partial_length.partial_length) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) }

end

(* Module giving axioms for type "T10s" defined at lz77.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12s" defined at lz77.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module Lz77__length_acc__L9s__L11s__T12s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at main.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at main.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at main.adb:8, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t1__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 val function main__t1__aggregate_def 
   (temp___308 : Lz77__token.token) (temp___309 : Lz77__token.token) : Array__Int__Lz77__token.map

end

(* Module for declaring an abstract function for the aggregate at main.adb:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__b__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function main__b__aggregate_def 
   (temp___312 : int) : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at main.adb:18, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_315
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_315 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_315__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_315 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (6 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (7 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (8 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (9 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (10 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (12 : int))) = (112 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (13 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (15 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (16 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (17 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (18 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (20 : int))) = (71 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (21 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (24 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (25 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (26 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (27 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (28 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (29 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (30 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (31 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (32 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (33 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (34 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (35 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (36 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (37 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (38 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (39 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (40 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:25, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_318
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_318 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_318__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_318 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (3 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (5 : int))) = (99 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (6 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (8 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (9 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (11 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (13 : int))) = (99 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (14 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (18 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (20 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (21 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (22 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (23 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (24 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (25 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (26 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (27 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (28 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (29 : int))) = (104 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (31 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (32 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (33 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (34 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (36 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (37 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (39 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (41 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (42 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (43 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_318 __void_param) (44 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_320
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_320 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_320__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_320 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (1 : int))) = (71 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (6 : int))) = (104 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (7 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (8 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (9 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (10 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (11 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (12 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (13 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (14 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_320 __void_param) (15 : int))) = (32 : int)) ) ) ) ))

end
(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (15 : int))

end

(* Module for defining the value of constant "R6b" defined at main.adb:20, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__L_1__R6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the value of constant "one" defined at lz77.ads:33, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Lz77__one___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__one as Lz77__one

 axiom one__def_axiom :
  ((Lz77__one.one ) = (1 : int))

end

(* Module for defining the value of constant "R10b" defined at main.adb:33, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__L_2__R10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__integer_text_io__default_width as Ada__integer_text_io__default_width
 use        Ada__integer_text_io__default_base as Ada__integer_text_io__default_base
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__integer_text_io__default_base.default_base, Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__integer_text_io__default_width.default_width}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "decode" defined at lz77.ads:94, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__decode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__byte_array as Lz77__byte_array
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val decode 
   (input : Lz77__token_array.token_array) (output : Array__Int__Standard__character.map__ref) (output__first : Standard__integer.integer) (output__last : Standard__integer.integer) (output_length : int__ref) (error : bool__ref) : unit
  requires {  true }
  ensures {  ( (if ((error.bool__content = True)) then (
   ( [@GP_Pretty_Ada:3034] (output_length.int__content = (0 : int)) )) else (
   ( [@GP_Pretty_Ada:3035] true ))) /\ ( (if (True) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)))) /\ (Standard__natural___axiom.dynamic_invariant output_length.int__content True True True True) ) ) }
  writes {output, output_length, error}

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:7751] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:7757] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-tiinio.ads:80 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__2 
   (item : int) (width : int) (base : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:21399] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:21403] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at a-textio.ads:264, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val new_line__2 
   (spacing : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:6204] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:6210] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-textio.ads:392, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__2 
   (item : int) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:7258] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:7264] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "length_acc" defined at lz77.ads:41, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__length_acc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Oeq as Big_integers__Oeq
 use        Big_integers__Ogt as Big_integers__Ogt
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__Oadd__2 as Big_integers__Oadd__2
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val length_acc 
   (input : Lz77__token_array.token_array) : Lz77__partial_length.partial_length
  requires {  ( [@GP_Pretty_Ada:14816] ((Lz77__token_array.length input) > (0 : int)) ) }
  ensures {  ( ( (result = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard result input) )/\( (Lz77__partial_length___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:2693] ((Lz77__partial_length.length result) = (Lz77__token_array.length input)) ) /\ ( [@GP_Pretty_Ada:2703] ((Lz77__partial_length.first result) = (Lz77__token_array.first input)) ) ) /\ (forall i   [@name:I] [@model_trace:2708]  : int.
   ( ( ((Lz77__token_array.first input) <= i) /\ (i <= (Lz77__token_array.last input)) ) -> ( ( [@GP_Pretty_Ada:2723] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first input))) then (
    Big_integers__zero.zero) else (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j   [@model_trace:2752] [@name:J]  : int.
    ( ( ((Lz77__token_array.first input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:2773] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) j)) = True) ) )) ) )) ) ) ) }
 
 axiom length_acc__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__length_acc.length_acc input)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ ( [@GP_Pretty_Ada:14816] ((Lz77__token_array.length input) > (0 : int)) ) ) -> (let result = (Lz77__length_acc.length_acc input) in (
    (if ((Lz77__length_acc.length_acc__function_guard result input)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:2693] ((Lz77__partial_length.length result) = (Lz77__token_array.length input)) ) /\ ( [@GP_Pretty_Ada:2703] ((Lz77__partial_length.first result) = (Lz77__token_array.first input)) ) ) /\ (forall i   [@name:I] [@model_trace:2708]  : int.
      ( ( ((Lz77__token_array.first input) <= i) /\ (i <= (Lz77__token_array.last input)) ) -> ( ( [@GP_Pretty_Ada:2723] ((Big_integers__Oeq.oeq__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Big_integers__Oadd__2.oadd__2__logic (Big_integers__Oadd__2.oadd__2__logic (if ((i = (Lz77__token_array.first input))) then (
       Big_integers__zero.zero) else (
       (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) (i - (1 : int))))) (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__length))) (Big_integers__to_big_integer.to_big_integer__logic (1 : int)))) = True) ) /\ (forall j   [@model_trace:2752] [@name:J]  : int.
       ( ( ((Lz77__token_array.first input) <= j) /\ (j <= (i - (1 : int))) ) -> ( [@GP_Pretty_Ada:2773] ((Big_integers__Ogt.ogt__logic (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) i) (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array result) j)) = True) ) )) ) )) ) /\ (Lz77__partial_length___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "valid" defined at lz77.ads:65, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Lz77__valid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Lz77__valid as Lz77__valid
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__token as Lz77__token
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Big_integers__Ole as Big_integers__Ole
 use        Big_integers__to_big_integer as Big_integers__to_big_integer
 use        Big_integers__in_range as Big_integers__in_range
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val valid 
   (input : Lz77__token_array.token_array) (upto : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Lz77__valid.valid input upto)) /\ (Lz77__valid.valid__function_guard result input upto) )/\( (result = True) <-> ( (upto <= (Lz77__token_array.last input)) /\ ( ((Lz77__token_array.length input) = (0 : int)) \/ (forall i   [@model_trace:2907] [@name:I]  : int.
   ( ( ((Lz77__token_array.first input) <= i) /\ (i <= upto) ) -> ( ((Big_integers__in_range.in_range__logic (let temp___279 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_278 : Lz77__partial_length.partial_length.
    ( (temp___result_278 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_278 input) )) in (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___279) i)))
    (Big_integers__to_big_integer.to_big_integer__logic (1 : int)) (Big_integers__to_big_integer.to_big_integer__logic (2147483647 : int))) = True) /\ ((Big_integers__Ole.ole__logic (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) (if ((i = (Lz77__token_array.first input))) then (
    Big_integers__zero.zero) else (
    (let temp___281 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_280 : Lz77__partial_length.partial_length.
     ( (temp___result_280 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_280 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___281) (i - (1 : int)))))
   ))) = True) ) )) ) ) ) ) }
 
 axiom valid__post_axiom :
  (forall input   : Lz77__token_array.token_array.
  (forall upto   : int [(Lz77__valid.valid input upto)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ (Standard__integer___axiom.dynamic_invariant upto True True True True) ) -> (let result = (Lz77__valid.valid input upto) in (
    (if ((Lz77__valid.valid__function_guard result input upto)) then (
     ( ( true /\ true )/\true )) else true)))
    )))
 
 axiom valid__def_axiom :
  (forall input   : Lz77__token_array.token_array.
  (forall upto   : int [(Lz77__valid.valid input upto)].
   ( (let result = (Lz77__valid.valid input upto) in (
    (Lz77__valid.valid__function_guard result input upto)))
    -> ( ((Lz77__valid.valid input upto) = True) <-> ( (upto <= (Lz77__token_array.last input)) /\ ( ((Lz77__token_array.length input) = (0 : int)) \/ (forall i   [@model_trace:2907] [@name:I]  : int.
    ( ( ((Lz77__token_array.first input) <= i) /\ (i <= upto) ) -> ( ((Big_integers__in_range.in_range__logic (let temp___285 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_284 : Lz77__partial_length.partial_length.
     ( (temp___result_284 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_284 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___285) i)))
     (Big_integers__to_big_integer.to_big_integer__logic (1 : int)) (Big_integers__to_big_integer.to_big_integer__logic (2147483647 : int))) = True) /\ ((Big_integers__Ole.ole__logic (Big_integers__to_big_integer.to_big_integer__logic (Standard__natural__rep.to_rep (Array__Int__Lz77__token.get (Lz77__token_array.to_array input) i).Lz77__token.__split_fields.Lz77__token.rec__lz77__token__offset)) (if ((i = (Lz77__token_array.first input))) then (
     Big_integers__zero.zero) else (
     (let temp___287 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_286 : Lz77__partial_length.partial_length.
      ( (temp___result_286 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_286 input) )) in (
      (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___287) (i - (1 : int)))))
    ))) = True) ) )) ) ) ) )))

end

(* Module for declaring a program function (and possibly an axiom) for "is_valid" defined at lz77.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__is_valid___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__valid as Lz77__valid
 use        Lz77__is_valid as Lz77__is_valid
 use        Lz77__token_array___axiom as Lz77__token_array___axiom

 val is_valid 
   (input : Lz77__token_array.token_array) : bool
  requires {  true }
  ensures {  ( ( (result = (Lz77__is_valid.is_valid input)) /\ (Lz77__is_valid.is_valid__function_guard result input) )/\(if ((result = True)) then (
   ( [@GP_Pretty_Ada:3068] ((epsilon temp___result_288 : bool.
    ( (temp___result_288 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_288 input (Lz77__token_array.last input)) )) = True) )) else (
   ( [@GP_Pretty_Ada:3069] not ( ((epsilon temp___result_289 : bool.
    ( (temp___result_289 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_289 input (Lz77__token_array.last input)) )) = True) ) ))) ) }
 
 axiom is_valid__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__is_valid.is_valid input)].
   ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) -> (let result = (Lz77__is_valid.is_valid input) in (
    (if ((Lz77__is_valid.is_valid__function_guard result input)) then (
     ( ( (if ((result = True)) then (
      ( [@GP_Pretty_Ada:3068] ((epsilon temp___result_291 : bool.
       ( (temp___result_291 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_291 input (Lz77__token_array.last input)) )) = True) )) else (
      ( [@GP_Pretty_Ada:3069] not ( ((epsilon temp___result_292 : bool.
       ( (temp___result_292 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_292 input (Lz77__token_array.last input)) )) = True) ) ))) /\ true )/\true )) else true)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "decoded_length" defined at lz77.ads:54, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Lz77__decoded_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__partial_length as Lz77__partial_length
 use        Lz77__length_acc as Lz77__length_acc
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__decoded_length as Lz77__decoded_length
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Big_integers__zero as Big_integers__zero
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer
 use        Array__Int__Big_integers__big_integer as Array__Int__Big_integers__big_integer

 val decoded_length 
   (input : Lz77__token_array.token_array) : Big_integers__big_integer.big_integer
  requires {  true }
  ensures {  ( ( (result = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard result input) )/\( (Big_integers__big_integer.dynamic_invariant result True False True True) /\ (result = (if (((Lz77__token_array.length input) = (0 : int))) then (
   Big_integers__zero.zero) else (
   (let temp___295 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_294 : Lz77__partial_length.partial_length.
    ( (temp___result_294 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_294 input) )) in (
    (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___295) (Lz77__token_array.last input))))
  ))) ) ) }
 
 axiom decoded_length__post_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__decoded_length.decoded_length input)].
   ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) -> (let result = (Lz77__decoded_length.decoded_length input) in (
    (if ((Lz77__decoded_length.decoded_length__function_guard result input)) then (
     ( ( true /\ (Big_integers__big_integer.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom decoded_length__def_axiom :
  (forall input   : Lz77__token_array.token_array [(Lz77__decoded_length.decoded_length input)].
   ( ( (Lz77__token_array___axiom.dynamic_invariant input True True True True) /\ (let result = (Lz77__decoded_length.decoded_length input) in (
    (Lz77__decoded_length.decoded_length__function_guard result input)))
    ) -> ((Lz77__decoded_length.decoded_length input) = (if (((Lz77__token_array.length input) = (0 : int))) then (
    Big_integers__zero.zero) else (
    (let temp___299 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_298 : Lz77__partial_length.partial_length.
     ( (temp___result_298 = (Lz77__length_acc.length_acc input)) /\ (Lz77__length_acc.length_acc__function_guard temp___result_298 input) )) in (
     (Array__Int__Big_integers__big_integer.get (Lz77__partial_length.to_array temp___299) (Lz77__token_array.last input))))
   ))) ))

end

(* Module for declaring a program function (and possibly an axiom) for "decode_fast" defined at lz77.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lz77__decode_fast___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__valid as Lz77__valid
 use        Big_integers__big_integer as Big_integers__big_integer
 use        Lz77__decoded_length as Lz77__decoded_length
 use        Lz77__byte_array as Lz77__byte_array
 use        Big_integers__to_integer as Big_integers__to_integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val decode_fast 
   (input : Lz77__token_array.token_array) (output : Array__Int__Standard__character.map__ref) (output__first : Standard__integer.integer) (output__last : Standard__integer.integer) (output_length : int__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3122] ((epsilon temp___result_300 : bool.
   ( (temp___result_300 = (Lz77__valid.valid input (Lz77__token_array.last input))) /\ (Lz77__valid.valid__function_guard temp___result_300 input (Lz77__token_array.last input)) )) = True) ) /\ ( [@GP_Pretty_Ada:3128] ((Integer.length (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)) >= (Big_integers__to_integer.to_integer__logic (epsilon temp___result_301 : Big_integers__big_integer.big_integer.
   ( (temp___result_301 = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_301 input) )))) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:15368] (output_length.int__content = (Big_integers__to_integer.to_integer__logic (epsilon temp___result_302 : Big_integers__big_integer.big_integer.
   ( (temp___result_302 = (Lz77__decoded_length.decoded_length input)) /\ (Lz77__decoded_length.decoded_length__function_guard temp___result_302 input) )))) ) /\ ( (if (True) then (
   true) else (
   (Lz77__byte_array.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep output__first) (Standard__integer__rep.to_rep output__last)))) /\ (Standard__natural___axiom.dynamic_invariant output_length.int__content True True True True) ) ) }
  writes {output, output_length}

end

(* Module for defining the value of the aggregate at main.adb:8, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t1__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Lz77__token as Lz77__token
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Main__t1__aggregate_def as Main__t1__aggregate_def
 use        Array__Int__Lz77__token as Array__Int__Lz77__token

 axiom def_axiom :
  (forall temp___308   temp___309   : Lz77__token.token.
   (let temp___307 [@mlw:proxy_symbol] [@introduced] = (Main__t1__aggregate_def.main__t1__aggregate_def temp___308 temp___309) in (
    (if (( (Lz77__token___axiom.dynamic_invariant temp___308 True True True True) /\ (Lz77__token___axiom.dynamic_invariant temp___309 True True True True) )) then (
     ( ((Array__Int__Lz77__token.get temp___307 (1 : int)) = temp___308) /\ ((Array__Int__Lz77__token.get temp___307 (2 : int)) = temp___309) )) else true)))
  )

end

(* Module for defining the value of the aggregate at main.adb:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__b__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__b__aggregate_def as Main__b__aggregate_def
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___312   : int.
   (let temp___311 [@mlw:proxy_symbol] [@introduced] = (Main__b__aggregate_def.main__b__aggregate_def temp___312) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___312 True True True True)) then (
     (forall temp___313   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___311 temp___313)) = temp___312))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Main__t1 as Main__t1
 use        Main__error as Main__error
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__b as Main__b
 use        Main__blen as Main__blen
 use        Lz77__token_array as Lz77__token_array
 use        Lz77__decode___axiom as Lz77__decode___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__integer_text_io__default_width as Ada__integer_text_io__default_width
 use        Ada__integer_text_io__default_base as Ada__integer_text_io__default_base
 use        Ada__integer_text_io__put__2___axiom as Ada__integer_text_io__put__2___axiom
 use        Ada__text_io__new_line__2___axiom as Ada__text_io__new_line__2___axiom
 use        Main__L_1__R6b as Main__L_1__R6b
 use        Main__L_1__index as Main__L_1__index
 use        Ada__text_io__put__2___axiom as Ada__text_io__put__2___axiom
 use        Lz77__is_valid___axiom as Lz77__is_valid___axiom
 use        Lz77__decode_fast___axiom as Lz77__decode_fast___axiom
 use        Main__L_2__R10b as Main__L_2__R10b
 use        Main__L_2__index as Main__L_2__index
 use        Lz77__token as Lz77__token
 use        Main__TTt1SP1 as Main__TTt1SP1
 use        Main__Tt1S___axiom as Main__Tt1S___axiom
 use        Lz77__byte_array as Lz77__byte_array
 use        Main__TTbSP1 as Main__TTbSP1
 use        Main__TbS___axiom as Main__TbS___axiom
 use        Ada__text_io__field___axiom as Ada__text_io__field___axiom
 use        Ada__text_io__number_base___axiom as Ada__text_io__number_base___axiom
 use        Main__L_1 as Main__L_1
 use        Main__L_2 as Main__L_2
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Main__t1__aggregate_def as Main__t1__aggregate_def
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__b__aggregate_def as Main__b__aggregate_def
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_315 as Temp___String_Literal_315
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_318 as Temp___String_Literal_318
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_320 as Temp___String_Literal_320
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Lz77__token as Array__Int__Lz77__token
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__t1___axiom as Main__t1___axiom
 use        Main__t1__aggregate_def___axiom as Main__t1__aggregate_def___axiom
 use        Main__error___axiom as Main__error___axiom
 use        Main__b___axiom as Main__b___axiom
 use        Main__b__aggregate_def___axiom as Main__b__aggregate_def___axiom
 use        Main__blen___axiom as Main__blen___axiom
 use        Main__L_1__index___axiom as Main__L_1__index___axiom
 use        Main__L_2__index___axiom as Main__L_2__index___axiom
 use        Main__L_1___axiom as Main__L_1___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Lz77__byte_array___axiom as Lz77__byte_array___axiom
 use        Lz77__token___axiom as Lz77__token___axiom
 use        Lz77__token_array___axiom as Lz77__token_array___axiom
 use        Lz77__partial_length___axiom as Lz77__partial_length___axiom
 use        Lz77__length_acc___axiom as Lz77__length_acc___axiom
 use        Lz77__decoded_length___axiom as Lz77__decoded_length___axiom
 use        Lz77__valid___axiom as Lz77__valid___axiom
 use        Lz77__decode___axiom as Lz77__decode___axiom
 use        Lz77__is_valid___axiom as Lz77__is_valid___axiom
 use        Lz77__decode_fast___axiom as Lz77__decode_fast___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__field___axiom as Ada__text_io__field___axiom
 use        Ada__text_io__number_base___axiom as Ada__text_io__number_base___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__new_line__2___axiom as Ada__text_io__new_line__2___axiom
 use        Ada__text_io__put__2___axiom as Ada__text_io__put__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__integer_text_io__default_width___axiom as Ada__integer_text_io__default_width___axiom
 use        Ada__integer_text_io__default_base___axiom as Ada__integer_text_io__default_base___axiom
 use        Ada__integer_text_io__put__2___axiom as Ada__integer_text_io__put__2___axiom
 use        Main__Tt1S___axiom as Main__Tt1S___axiom
 use        Main__TTt1SP1___axiom as Main__TTt1SP1___axiom
 use        Main__TbS___axiom as Main__TbS___axiom
 use        Main__TTbSP1___axiom as Main__TTbSP1___axiom
 use        Main__L_1__R6b___axiom as Main__L_1__R6b___axiom
 use        Main__L_2__R10b___axiom as Main__L_2__R10b___axiom

 let def [#"main.adb" 6 0 0][@GP_Subp:main.adb:6] 
   (__void_param : unit)
  requires { [#"main.adb" 6 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:6 *)
  ;
  [#"main.adb" 6 0 0] assume { [#"main.adb" 6 0 0] (Ada__text_io__field___axiom.dynamic_invariant Ada__integer_text_io__default_width.default_width.int__content True False True True) };
  [#"main.adb" 6 0 0] assume { [#"main.adb" 6 0 0] (Ada__text_io__number_base___axiom.dynamic_invariant Ada__integer_text_io__default_base.default_base.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:6 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:6 *)
  ;
  [#"main.adb" 6 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:6 *)
  ;
  [#"main.adb" 6 0 0] try
   ( ();
   ([#"main.adb" 6 0 0] ());
   ([#"main.adb" 8 0 0] ());
   ([#"main.adb" 8 0 0] ( [#"main.adb" 8 0 0] (Main__t1.t1.Array__Int__Lz77__token.map__content <- ( ( [#"main.adb" 8 0 0] begin ensures {true} let _ = (let _ = ((0 : int) = (2 : int)) in (
    ()))
    in () end ;
   [#"main.adb" 8 0 0] begin ensures {true} let _ = (let _ = ((0 : int) = (1 : int)) in (
    ()))
    in () end ;
   (Main__t1__aggregate_def.main__t1__aggregate_def({ Lz77__token.__split_fields = { Lz77__token.rec__lz77__token__offset = ( 0 : Standard__natural.natural ); Lz77__token.rec__lz77__token__length = ( 0 : Standard__natural.natural ); Lz77__token.rec__lz77__token__next_c = (Standard__character__rep.of_rep((65 : int))) } }) ({ Lz77__token.__split_fields = { Lz77__token.rec__lz77__token__offset = ( 1 : Standard__natural.natural ); Lz77__token.rec__lz77__token__length = ( 2 : Standard__natural.natural ); Lz77__token.rec__lz77__token__next_c = (Standard__character__rep.of_rep((66 : int))) } })) ) ));
   [#"main.adb" 8 0 0] assume { [#"main.adb" 8 0 0] (Main__Tt1S___axiom.dynamic_invariant Main__t1.t1.Array__Int__Lz77__token.map__content True False True True) } ));
   ([#"main.adb" 10 0 0] ());
   ([#"main.adb" 11 0 0] ());
   ([#"main.adb" 11 0 0] ( [#"main.adb" 11 0 0] (Main__b.b.Array__Int__Standard__character.map__content <- ( (Main__b__aggregate_def.main__b__aggregate_def((88 : int))) ));
   [#"main.adb" 11 0 0] assume { [#"main.adb" 11 0 0] (Main__TbS___axiom.dynamic_invariant Main__b.b.Array__Int__Standard__character.map__content True False True True) } ));
   ([#"main.adb" 12 0 0] ( [#"main.adb" 12 0 0] assume { [#"main.adb" 12 0 0] (Standard__natural___axiom.default_initial_assumption Main__blen.blen.int__content False) };
   [#"main.adb" 12 0 0] assume { [#"main.adb" 12 0 0] (Standard__natural___axiom.dynamic_invariant Main__blen.blen.int__content False False True True) } ));
   ([#"main.adb" 20 0 0] ());
   ([#"main.adb" 33 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:16:11] ([#"main.adb" 16 0 0] ()) );
   ( [@GP_Sloc:main.adb:16:14] ([#"main.adb" 16 0 0] ()) );
   ( [@GP_Sloc:main.adb:16:16] ([#"main.adb" 16 0 0] ()) );
   ( [@GP_Sloc:main.adb:16:21] ([#"main.adb" 16 0 0] ()) );
   ( [@GP_Sloc:main.adb:16:4] ([#"main.adb" 16 0 0] ()) );
   ( [@GP_Sloc:main.adb:16:4] ([#"main.adb" 16 0 0] (let lz77__decode__output__compl = Main__b.b.Array__Int__Standard__character.map__content in (
    [#"main.adb" 16 0 0] let lz77__decode__output = { Array__Int__Standard__character.map__content = lz77__decode__output__compl } in 
     ( (Lz77__decode___axiom.decode((Lz77__token_array.of_array(Main__t1.t1.Array__Int__Lz77__token.map__content) (Main__TTt1SP1.first) (Main__TTt1SP1.last))) (lz77__decode__output) ((Standard__integer__rep.of_rep(Main__TTbSP1.first))) ((Standard__integer__rep.of_rep(Main__TTbSP1.last))) (Main__blen.blen) (Main__error.error));
     [#"main.adb" 16 0 0] (Main__b.b.Array__Int__Standard__character.map__content <- ( (let temp___314 [@mlw:proxy_symbol] [@introduced] = (Lz77__byte_array.of_array(lz77__decode__output.Array__Int__Standard__character.map__content) (Main__TTbSP1.first) (Main__TTbSP1.last)) in (
      (Array__Int__Standard__character.slide (Lz77__byte_array.to_array temp___314) (Lz77__byte_array.first temp___314) Main__TTbSP1.first)))
      )) )))
   ) );
   ( [@GP_Sloc:main.adb:17:11] ([#"main.adb" 17 0 0] ()) );
   ( [@GP_Sloc:main.adb:17:4] ([#"main.adb" 17 0 0] (if (( ([#"main.adb" 17 0 0] [#"main.adb" 17 0 0] (([@branch_id=2410] Main.spark__branch).bool__content <- ( not ( Main__error.error.bool__content ) )));
   ( [@branch_id=2410] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:18:7] ([#"main.adb" 18 0 0] ()) );
    ( [@GP_Sloc:main.adb:18:7] ([#"main.adb" 18 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_315.temp___String_Literal_315(()))) ((1 : int)) ((40 : int))))) )) );
    ( [@GP_Sloc:main.adb:18:60] ([#"main.adb" 18 0 0] ()) );
    ( [@GP_Sloc:main.adb:18:56] ([#"main.adb" 18 0 0] ()) );
    ( [@GP_Sloc:main.adb:18:56] ([#"main.adb" 18 0 0] ( (Ada__integer_text_io__put__2___axiom.put__2(Main__blen.blen.int__content) (Ada__integer_text_io__default_width.default_width.int__content) (Ada__integer_text_io__default_base.default_base.int__content)) )) );
    ( [@GP_Sloc:main.adb:18:67] ([#"main.adb" 18 0 0] ()) );
    ( [@GP_Sloc:main.adb:18:67] ([#"main.adb" 18 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) );
    ( [@GP_Sloc:main.adb:19:10] ([#"main.adb" 19 0 0] ()) );
    ( [@GP_Sloc:main.adb:19:18] ([#"main.adb" 19 0 0] ()) );
    ( [@GP_Sloc:main.adb:19:7] ([#"main.adb" 19 0 0] (if (( ([#"main.adb" 19 0 0] [#"main.adb" 19 0 0] (([@branch_id=2421] Main.spark__branch).bool__content <- ( (Main__blen.blen.int__content <= (100 : int)) )));
    ( [@branch_id=2421] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:main.adb:20:23] ([#"main.adb" 20 0 0] ()) );
     ( [@GP_Sloc:main.adb:20:34] ([#"main.adb" 20 0 0] ()) );
     ( [@GP_Sloc:main.adb:20:44] ([#"main.adb" 20 0 0] ()) );
     ( [@GP_Sloc:main.adb:20:49] ([#"main.adb" 20 0 0] ([#"main.adb" 20 0 0] ( (let main__L_1__R6b__assume = (([#"main.adb" 20 0 0] ( [@GP_Sloc:main.adb:20:42] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__if__R6b_decl__sub__add] [@comment:         for Index in B'First .. B'First + BLen - 1 loop                                          ^ main.adb:20:42:VC_OVERFLOW_CHECK] [@GP_Id:0] (Standard__integer.range_check_(((1 : int) + Main__blen.blen.int__content))) )) - (1 : int)) in (
       assume {  (main__L_1__R6b__assume = Main__L_1__R6b.r6b) }))
     ;
      assume {  (Standard__integer___axiom.dynamic_invariant Main__L_1__R6b.r6b True False True True) } ))) );
     ( [@GP_Sloc:main.adb:20:53] ([#"main.adb" 20 0 0] (let temp___316 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
     (let temp___317 [@mlw:proxy_symbol] [@introduced] = Main__L_1__R6b.r6b in (
      ( [#"main.adb" 20 0 0] (Main__L_1__index.index.int__content <- ( temp___316 ));
      () (* Translation of an Ada loop from main.adb:20 *)
      ;
      (if ((Boolean.andb((temp___316 <= Main__L_1__index.index.int__content)) ((Main__L_1__index.index.int__content <= temp___317)))) then (
       [#"main.adb" 20 0 0] try
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:20 *)
        ;
        () (* While loop translating the Ada loop from main.adb:20 *)
        ;
        [#"main.adb" 20 0 0] while True do
         ( () (* Assume implicit invariants from the loop main.adb:20 *)
         ;
         [#"main.adb" 20 0 0] assume { [#"main.adb" 20 0 0] ( ((1 : int) <= Main__L_1__index.index.int__content) /\ (Main__L_1__index.index.int__content <= Main__L_1__R6b.r6b) ) };
         () (* Check for absence of RTE in the invariant of loop main.adb:20 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop main.adb:20 *)
         ;
         ();
         ( [@GP_Sloc:main.adb:21:13] ([#"main.adb" 21 0 0] ()) );
         ( [@GP_Sloc:main.adb:21:13] ([#"main.adb" 21 0 0] ( (Ada__text_io__put__2___axiom.put__2((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__b.b.Array__Int__Standard__character.map__content) (( [#"main.adb" 21 0 0] assert { [#"main.adb" 21 0 0] ([#"main.adb" 21 0 0] ( [@GP_Shape:if__if__L_1_while__call_put__2__ixdcomp] [@GP_Sloc:main.adb:21:27] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:1] [@comment:            Put(Item => B(Index));                           ^ main.adb:21:27:VC_INDEX_CHECK] ( (Main__TTbSP1.first <= Main__L_1__index.index.int__content) /\ (Main__L_1__index.index.int__content <= Main__TTbSP1.last) ) )) };
         Main__L_1__index.index.int__content ))))))) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:20 *)
         ;
         (if ((Main__L_1__index.index.int__content = temp___317)) then (
           raise Main__L_1.L_1));
         ([#"main.adb" 20 0 0] [#"main.adb" 20 0 0] (Main__L_1__index.index.int__content <- ( (Main__L_1__index.index.int__content + (1 : int)) ))) )
        done )
       with
        Main__L_1.L_1 -> ()
       end)) )))
     ))
     ) );
     ( [@GP_Sloc:main.adb:23:10] ([#"main.adb" 23 0 0] ()) );
     ( [@GP_Sloc:main.adb:23:10] ([#"main.adb" 23 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) ) )) else (
     ( ();
     ( [@GP_Sloc:main.adb:25:10] ([#"main.adb" 25 0 0] ()) );
     ( [@GP_Sloc:main.adb:25:10] ([#"main.adb" 25 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_318.temp___String_Literal_318(()))) ((1 : int)) ((44 : int))))) )) );
     ( [@GP_Sloc:main.adb:25:63] ([#"main.adb" 25 0 0] ()) );
     ( [@GP_Sloc:main.adb:25:63] ([#"main.adb" 25 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) ) )))) ) )) else (
    ()))) );
   ( [@GP_Sloc:main.adb:29:16] ([#"main.adb" 29 0 0] ()) );
   ( [@GP_Sloc:main.adb:29:7] ([#"main.adb" 29 0 0] ()) );
   ( [@GP_Sloc:main.adb:29:4] ([#"main.adb" 29 0 0] (if (( ([#"main.adb" 29 0 0] [#"main.adb" 29 0 0] (([@branch_id=2465] Main.spark__branch).bool__content <- ( (Lz77__is_valid___axiom.is_valid((Lz77__token_array.of_array(Main__t1.t1.Array__Int__Lz77__token.map__content) (Main__TTt1SP1.first) (Main__TTt1SP1.last)))) )));
   ( [@branch_id=2465] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:30:19] ([#"main.adb" 30 0 0] ()) );
    ( [@GP_Sloc:main.adb:30:22] ([#"main.adb" 30 0 0] ()) );
    ( [@GP_Sloc:main.adb:30:24] ([#"main.adb" 30 0 0] ()) );
    ( [@GP_Sloc:main.adb:30:7] ([#"main.adb" 30 0 0] ()) );
    ( [@GP_Sloc:main.adb:30:7] ([#"main.adb" 30 0 0] (let lz77__decode_fast__output__compl = Main__b.b.Array__Int__Standard__character.map__content in (
     [#"main.adb" 30 0 0] let lz77__decode_fast__output = { Array__Int__Standard__character.map__content = lz77__decode_fast__output__compl } in 
      ( ([#"main.adb" 30 0 0] ( [@comment:      Decode_Fast(T1,B,BLen);       ^ main.adb:30:7:VC_PRECONDITION] [@GP_Shape:if__call_decode_fast] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:30:7] [@GP_Id:2] (Lz77__decode_fast___axiom.decode_fast((Lz77__token_array.of_array(Main__t1.t1.Array__Int__Lz77__token.map__content) (Main__TTt1SP1.first) (Main__TTt1SP1.last))) (lz77__decode_fast__output) ((Standard__integer__rep.of_rep(Main__TTbSP1.first))) ((Standard__integer__rep.of_rep(Main__TTbSP1.last))) (Main__blen.blen)) ));
       (Main__b.b.Array__Int__Standard__character.map__content <- ( (let temp___319 [@mlw:proxy_symbol] [@introduced] = (Lz77__byte_array.of_array(lz77__decode_fast__output.Array__Int__Standard__character.map__content) (Main__TTbSP1.first) (Main__TTbSP1.last)) in (
       (Array__Int__Standard__character.slide (Lz77__byte_array.to_array temp___319) (Lz77__byte_array.first temp___319) Main__TTbSP1.first)))
       )) )))
    ) );
    ( [@GP_Sloc:main.adb:31:7] ([#"main.adb" 31 0 0] ()) );
    ( [@GP_Sloc:main.adb:31:7] ([#"main.adb" 31 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_320.temp___String_Literal_320(()))) ((1 : int)) ((15 : int))))) )) );
    ( [@GP_Sloc:main.adb:31:35] ([#"main.adb" 31 0 0] ()) );
    ( [@GP_Sloc:main.adb:31:31] ([#"main.adb" 31 0 0] ()) );
    ( [@GP_Sloc:main.adb:31:31] ([#"main.adb" 31 0 0] ( (Ada__integer_text_io__put__2___axiom.put__2(Main__blen.blen.int__content) (Ada__integer_text_io__default_width.default_width.int__content) (Ada__integer_text_io__default_base.default_base.int__content)) )) );
    ( [@GP_Sloc:main.adb:31:42] ([#"main.adb" 31 0 0] ()) );
    ( [@GP_Sloc:main.adb:31:42] ([#"main.adb" 31 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) );
    ( [@GP_Sloc:main.adb:32:7] ([#"main.adb" 32 0 0] ( [#"main.adb" 32 0 0] begin ensures {true} let _ = (let _ = (Main__blen.blen.int__content = (4 : int)) in (
     ()))
     in () end ;
    [#"main.adb" 32 0 0] assert { [#"main.adb" 32 0 0] ([#"main.adb" 32 0 0] ( [@GP_Shape:if__pragargs__cmp] [@vc:annotation] [@GP_Reason:VC_ASSERT] [@comment:      pragma Assert (BLen = 4);                      ^ main.adb:32:22:VC_ASSERT] [@GP_Sloc:main.adb:32:22] [@GP_Id:3] ( [@GP_Pretty_Ada:2487] [@GP_Sloc:main.adb:32:22] (Main__blen.blen.int__content = (4 : int)) ) )) } )) );
    ( [@GP_Sloc:main.adb:33:20] ([#"main.adb" 33 0 0] ()) );
    ( [@GP_Sloc:main.adb:33:31] ([#"main.adb" 33 0 0] ()) );
    ( [@GP_Sloc:main.adb:33:41] ([#"main.adb" 33 0 0] ()) );
    ( [@GP_Sloc:main.adb:33:46] ([#"main.adb" 33 0 0] ([#"main.adb" 33 0 0] ( (let main__L_2__R10b__assume = (([#"main.adb" 33 0 0] ( [@comment:      for Index in B'First .. B'First + BLen - 1 loop                                       ^ main.adb:33:39:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:4] [@GP_Sloc:main.adb:33:39] [@GP_Shape:if__R10b_decl__sub__add] (Standard__integer.range_check_(((1 : int) + Main__blen.blen.int__content))) )) - (1 : int)) in (
      assume {  (main__L_2__R10b__assume = Main__L_2__R10b.r10b) }))
    ;
     assume {  (Standard__integer___axiom.dynamic_invariant Main__L_2__R10b.r10b True False True True) } ))) );
    ( [@GP_Sloc:main.adb:33:50] ([#"main.adb" 33 0 0] (let temp___321 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    (let temp___322 [@mlw:proxy_symbol] [@introduced] = Main__L_2__R10b.r10b in (
     ( [#"main.adb" 33 0 0] (Main__L_2__index.index.int__content <- ( temp___321 ));
     () (* Translation of an Ada loop from main.adb:33 *)
     ;
     (if ((Boolean.andb((temp___321 <= Main__L_2__index.index.int__content)) ((Main__L_2__index.index.int__content <= temp___322)))) then (
      [#"main.adb" 33 0 0] try
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:33 *)
       ;
       () (* While loop translating the Ada loop from main.adb:33 *)
       ;
       [#"main.adb" 33 0 0] while True do
        ( () (* Assume implicit invariants from the loop main.adb:33 *)
        ;
        [#"main.adb" 33 0 0] assume { [#"main.adb" 33 0 0] ( ((1 : int) <= Main__L_2__index.index.int__content) /\ (Main__L_2__index.index.int__content <= Main__L_2__R10b.r10b) ) };
        () (* Check for absence of RTE in the invariant of loop main.adb:33 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop main.adb:33 *)
        ;
        ();
        ( [@GP_Sloc:main.adb:34:10] ([#"main.adb" 34 0 0] ()) );
        ( [@GP_Sloc:main.adb:34:10] ([#"main.adb" 34 0 0] ( (Ada__text_io__put__2___axiom.put__2((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__b.b.Array__Int__Standard__character.map__content) (( [#"main.adb" 34 0 0] assert { [#"main.adb" 34 0 0] ([#"main.adb" 34 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:34:24] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__call_put__2__ixdcomp] [@GP_Id:5] [@comment:         Put(Item => B(Index));                        ^ main.adb:34:24:VC_INDEX_CHECK] ( (Main__TTbSP1.first <= Main__L_2__index.index.int__content) /\ (Main__L_2__index.index.int__content <= Main__TTbSP1.last) ) )) };
        Main__L_2__index.index.int__content ))))))) )) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:33 *)
        ;
        (if ((Main__L_2__index.index.int__content = temp___322)) then (
          raise Main__L_2.L_2));
        ([#"main.adb" 33 0 0] [#"main.adb" 33 0 0] (Main__L_2__index.index.int__content <- ( (Main__L_2__index.index.int__content + (1 : int)) ))) )
       done )
      with
       Main__L_2.L_2 -> ()
      end)) )))
    ))
    ) );
    ( [@GP_Sloc:main.adb:36:7] ([#"main.adb" 36 0 0] ()) );
    ( [@GP_Sloc:main.adb:36:7] ([#"main.adb" 36 0 0] ( (Ada__text_io__new_line__2___axiom.new_line__2((1 : int))) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
